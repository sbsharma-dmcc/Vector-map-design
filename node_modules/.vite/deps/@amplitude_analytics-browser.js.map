{
  "version": 3,
  "sources": ["../../@amplitude/analytics-core/src/types/event/event.ts", "../../@amplitude/analytics-core/src/types/constants.ts", "../../@amplitude/analytics-core/src/utils/valid-properties.ts", "../../@amplitude/analytics-core/src/identify.ts", "../../@amplitude/analytics-core/src/types/messages.ts", "../../@amplitude/analytics-core/src/types/status.ts", "../../@amplitude/analytics-core/src/utils/result-builder.ts", "../../@amplitude/analytics-core/src/global-scope.ts", "../../@amplitude/analytics-core/src/utils/uuid.ts", "../../@amplitude/analytics-core/src/timeline.ts", "../../@amplitude/analytics-core/src/utils/event-builder.ts", "../../@amplitude/analytics-core/src/utils/return-wrapper.ts", "../../@amplitude/analytics-core/src/core-client.ts", "../../@amplitude/analytics-core/src/revenue.ts", "../../@amplitude/analytics-core/src/utils/chunk.ts", "../../@amplitude/analytics-core/src/types/loglevel.ts", "../../@amplitude/analytics-core/src/logger.ts", "../../@amplitude/analytics-core/src/config.ts", "../../@amplitude/analytics-core/src/plugins/destination.ts", "../../@amplitude/analytics-connector/dist/analytics-connector.esm.js", "../../@amplitude/analytics-core/src/analytics-connector.ts", "../../@amplitude/analytics-core/src/plugins/identity.ts", "../../@amplitude/analytics-core/src/session.ts", "../../@amplitude/analytics-core/src/cookie-name.ts", "../../@amplitude/analytics-core/src/language.ts", "../../@amplitude/analytics-core/src/query-params.ts", "../../@amplitude/analytics-core/src/utils/debug.ts", "../../@amplitude/analytics-core/src/storage/memory.ts", "../../@amplitude/analytics-core/src/storage/cookie.ts", "../../@amplitude/analytics-core/src/storage/helpers.ts", "../../@amplitude/analytics-core/src/transports/base.ts", "../../@amplitude/analytics-core/src/transports/fetch.ts", "../../@amplitude/analytics-core/src/types/server-zone.ts", "../../@amplitude/analytics-core/src/types/offline.ts", "../../@amplitude/analytics-core/src/types/element-interactions.ts", "../../@amplitude/analytics-core/src/network-request-event.ts", "../../@amplitude/analytics-core/src/network-observer.ts", "../../@amplitude/analytics-browser/src/default-tracking.ts", "../../@amplitude/analytics-browser/src/utils/snippet-helper.ts", "../../@amplitude/analytics-browser/src/version.ts", "../../@amplitude/analytics-browser/src/lib-prefix.ts", "../../@amplitude/analytics-browser/src/plugins/context.ts", "../../@amplitude/analytics-browser/src/storage/browser-storage.ts", "../../@amplitude/analytics-browser/src/storage/local-storage.ts", "../../@amplitude/analytics-browser/src/storage/session-storage.ts", "../../@amplitude/analytics-browser/src/transports/xhr.ts", "../../@amplitude/analytics-browser/src/transports/send-beacon.ts", "../../@amplitude/analytics-browser/src/cookie-migration/index.ts", "../../@amplitude/analytics-browser/src/constants.ts", "../../@amplitude/analytics-browser/src/config.ts", "../../@amplitude/analytics-client-common/src/global-scope.ts", "../../@amplitude/analytics-client-common/src/query-params.ts", "../../@amplitude/analytics-client-common/src/attribution/constants.ts", "../../@amplitude/analytics-client-common/src/attribution/campaign-parser.ts", "../../@amplitude/analytics-client-common/src/cookie-name.ts", "../../@amplitude/analytics-client-common/src/attribution/campaign-tracker.ts", "../../@amplitude/analytics-client-common/src/attribution/helpers.ts", "../../@amplitude/analytics-client-common/src/storage/helpers.ts", "../../@amplitude/analytics-client-common/src/session.ts", "../../@amplitude/analytics-client-common/src/attribution/web-attribution.ts", "../../@amplitude/analytics-client-common/src/storage/cookie.ts", "../../@amplitude/analytics-client-common/src/transports/fetch.ts", "../../@amplitude/analytics-client-common/src/analytics-connector.ts", "../../@amplitude/analytics-client-common/src/plugins/identity.ts", "../../@amplitude/analytics-types/src/event.ts", "../../@amplitude/analytics-types/src/logger.ts", "../../@amplitude/analytics-types/src/server-zone.ts", "../../@amplitude/analytics-types/src/status.ts", "../../@amplitude/plugin-page-view-tracking-browser/src/utils.ts", "../../@amplitude/plugin-page-view-tracking-browser/src/page-view-tracking.ts", "../../@amplitude/analytics-browser/src/plugins/form-interaction-tracking.ts", "../../@amplitude/analytics-browser/src/plugins/file-download-tracking.ts", "../../@amplitude/analytics-browser/src/det-notification.ts", "../../@amplitude/analytics-browser/src/plugins/network-connectivity-checker.ts", "../../@amplitude/analytics-remote-config/src/remote-config.ts", "../../@amplitude/analytics-remote-config/src/index.ts", "../../@amplitude/analytics-browser/src/config/joined-config.ts", "../../@amplitude/plugin-autocapture-browser/src/constants.ts", "../../rxjs/src/internal/util/isFunction.ts", "../../rxjs/src/internal/util/createErrorClass.ts", "../../rxjs/src/internal/util/UnsubscriptionError.ts", "../../rxjs/src/internal/util/arrRemove.ts", "../../rxjs/src/internal/Subscription.ts", "../../rxjs/src/internal/config.ts", "../../rxjs/src/internal/scheduler/timeoutProvider.ts", "../../rxjs/src/internal/util/reportUnhandledError.ts", "../../rxjs/src/internal/util/noop.ts", "../../rxjs/src/internal/NotificationFactories.ts", "../../rxjs/src/internal/util/errorContext.ts", "../../rxjs/src/internal/Subscriber.ts", "../../rxjs/src/internal/symbol/observable.ts", "../../rxjs/src/internal/util/identity.ts", "../../rxjs/src/internal/util/pipe.ts", "../../rxjs/src/internal/Observable.ts", "../../rxjs/src/internal/util/lift.ts", "../../rxjs/src/internal/operators/OperatorSubscriber.ts", "../../rxjs/src/internal/operators/refCount.ts", "../../rxjs/src/internal/observable/ConnectableObservable.ts", "../../rxjs/src/internal/scheduler/performanceTimestampProvider.ts", "../../rxjs/src/internal/scheduler/animationFrameProvider.ts", "../../rxjs/src/internal/observable/dom/animationFrames.ts", "../../rxjs/src/internal/util/ObjectUnsubscribedError.ts", "../../rxjs/src/internal/Subject.ts", "../../rxjs/src/internal/BehaviorSubject.ts", "../../rxjs/src/internal/scheduler/dateTimestampProvider.ts", "../../rxjs/src/internal/ReplaySubject.ts", "../../rxjs/src/internal/AsyncSubject.ts", "../../rxjs/src/internal/scheduler/Action.ts", "../../rxjs/src/internal/scheduler/intervalProvider.ts", "../../rxjs/src/internal/scheduler/AsyncAction.ts", "../../rxjs/src/internal/util/Immediate.ts", "../../rxjs/src/internal/scheduler/immediateProvider.ts", "../../rxjs/src/internal/scheduler/AsapAction.ts", "../../rxjs/src/internal/Scheduler.ts", "../../rxjs/src/internal/scheduler/AsyncScheduler.ts", "../../rxjs/src/internal/scheduler/AsapScheduler.ts", "../../rxjs/src/internal/scheduler/asap.ts", "../../rxjs/src/internal/scheduler/async.ts", "../../rxjs/src/internal/scheduler/QueueAction.ts", "../../rxjs/src/internal/scheduler/QueueScheduler.ts", "../../rxjs/src/internal/scheduler/queue.ts", "../../rxjs/src/internal/scheduler/AnimationFrameAction.ts", "../../rxjs/src/internal/scheduler/AnimationFrameScheduler.ts", "../../rxjs/src/internal/scheduler/animationFrame.ts", "../../rxjs/src/internal/scheduler/VirtualTimeScheduler.ts", "../../rxjs/src/internal/observable/empty.ts", "../../rxjs/src/internal/util/isScheduler.ts", "../../rxjs/src/internal/util/args.ts", "../../rxjs/src/internal/util/isArrayLike.ts", "../../rxjs/src/internal/util/isPromise.ts", "../../rxjs/src/internal/util/isInteropObservable.ts", "../../rxjs/src/internal/util/isAsyncIterable.ts", "../../rxjs/src/internal/util/throwUnobservableError.ts", "../../rxjs/src/internal/symbol/iterator.ts", "../../rxjs/src/internal/util/isIterable.ts", "../../rxjs/src/internal/util/isReadableStreamLike.ts", "../../rxjs/src/internal/observable/innerFrom.ts", "../../rxjs/src/internal/util/executeSchedule.ts", "../../rxjs/src/internal/operators/observeOn.ts", "../../rxjs/src/internal/operators/subscribeOn.ts", "../../rxjs/src/internal/scheduled/scheduleObservable.ts", "../../rxjs/src/internal/scheduled/schedulePromise.ts", "../../rxjs/src/internal/scheduled/scheduleArray.ts", "../../rxjs/src/internal/scheduled/scheduleIterable.ts", "../../rxjs/src/internal/scheduled/scheduleAsyncIterable.ts", "../../rxjs/src/internal/scheduled/scheduleReadableStreamLike.ts", "../../rxjs/src/internal/scheduled/scheduled.ts", "../../rxjs/src/internal/observable/from.ts", "../../rxjs/src/internal/observable/of.ts", "../../rxjs/src/internal/observable/throwError.ts", "../../rxjs/src/internal/Notification.ts", "../../rxjs/src/internal/util/EmptyError.ts", "../../rxjs/src/internal/util/ArgumentOutOfRangeError.ts", "../../rxjs/src/internal/util/NotFoundError.ts", "../../rxjs/src/internal/util/SequenceError.ts", "../../rxjs/src/internal/util/isDate.ts", "../../rxjs/src/internal/operators/timeout.ts", "../../rxjs/src/internal/operators/map.ts", "../../rxjs/src/internal/util/mapOneOrManyArgs.ts", "../../rxjs/src/internal/util/argsArgArrayOrObject.ts", "../../rxjs/src/internal/operators/mergeInternals.ts", "../../rxjs/src/internal/operators/mergeMap.ts", "../../rxjs/src/internal/operators/mergeAll.ts", "../../rxjs/src/internal/operators/concatAll.ts", "../../rxjs/src/internal/observable/concat.ts", "../../rxjs/src/internal/observable/fromEvent.ts", "../../rxjs/src/internal/observable/timer.ts", "../../rxjs/src/internal/observable/merge.ts", "../../rxjs/src/internal/observable/never.ts", "../../rxjs/src/internal/util/argsOrArgArray.ts", "../../rxjs/src/internal/operators/filter.ts", "../../rxjs/src/internal/operators/buffer.ts", "../../rxjs/src/internal/operators/debounceTime.ts", "../../rxjs/src/internal/operators/take.ts", "../../rxjs/src/internal/operators/ignoreElements.ts", "../../rxjs/src/internal/operators/mapTo.ts", "../../rxjs/src/internal/operators/delayWhen.ts", "../../rxjs/src/internal/operators/delay.ts", "../../rxjs/src/internal/operators/pairwise.ts", "../../rxjs/src/internal/operators/share.ts", "../../rxjs/src/internal/operators/switchMap.ts", "../../@amplitude/plugin-autocapture-browser/src/helpers.ts", "../../@amplitude/plugin-autocapture-browser/src/libs/messenger.ts", "../../@amplitude/plugin-autocapture-browser/src/hierarchy.ts", "../../@amplitude/plugin-autocapture-browser/src/autocapture/track-click.ts", "../../@amplitude/plugin-autocapture-browser/src/autocapture/track-change.ts", "../../@amplitude/plugin-autocapture-browser/src/autocapture/track-action-click.ts", "../../@amplitude/plugin-autocapture-browser/src/autocapture-plugin.ts", "../../@amplitude/plugin-network-capture-browser/src/constants.ts", "../../@amplitude/plugin-network-capture-browser/src/track-network-event.ts", "../../@amplitude/plugin-network-capture-browser/src/network-capture-plugin.ts", "../../@amplitude/analytics-browser/src/attribution/constants.ts", "../../@amplitude/analytics-browser/src/attribution/helpers.ts", "../../@amplitude/analytics-browser/src/attribution/campaign-parser.ts", "../../@amplitude/analytics-browser/src/attribution/web-attribution.ts", "../../@amplitude/analytics-browser/src/browser-client.ts", "../../@amplitude/analytics-browser/src/browser-client-factory.ts", "../../@amplitude/analytics-browser/src/types.ts", "../../@amplitude/analytics-browser/src/index.ts"],
  "sourcesContent": ["import { BaseEvent } from './base-event';\nimport { RevenueEventProperties } from '../../revenue';\n\nexport enum IdentifyOperation {\n  // Base Operations to set values\n  SET = '$set',\n  SET_ONCE = '$setOnce',\n\n  // Operations around modifying existing values\n  ADD = '$add',\n  APPEND = '$append',\n  PREPEND = '$prepend',\n  REMOVE = '$remove',\n\n  // Operations around appending values *if* they aren't present\n  PREINSERT = '$preInsert',\n  POSTINSERT = '$postInsert',\n\n  // Operations around removing properties/values\n  UNSET = '$unset',\n  CLEAR_ALL = '$clearAll',\n}\n\nexport type ValidPropertyType =\n  | number\n  | string\n  | boolean\n  | Array<string | number>\n  | { [key: string]: ValidPropertyType }\n  | Array<{ [key: string]: ValidPropertyType }>;\n\ninterface BaseOperationConfig {\n  [key: string]: ValidPropertyType;\n}\n\nexport interface IdentifyUserProperties {\n  // Add operations can only take numbers\n  [IdentifyOperation.ADD]?: { [key: string]: number };\n\n  // This reads the keys of the passed object, but the values are not used\n  [IdentifyOperation.UNSET]?: BaseOperationConfig;\n  // This option does not read the key as it unsets all user properties\n  [IdentifyOperation.CLEAR_ALL]?: any;\n\n  // These operations can take numbers, strings, or arrays of both.\n  [IdentifyOperation.SET]?: BaseOperationConfig;\n  [IdentifyOperation.SET_ONCE]?: BaseOperationConfig;\n  [IdentifyOperation.APPEND]?: BaseOperationConfig;\n  [IdentifyOperation.PREPEND]?: BaseOperationConfig;\n  [IdentifyOperation.POSTINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.PREINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.REMOVE]?: BaseOperationConfig;\n}\n\n/**\n * Represents the structure of user properties that can be sent with an Identify or GroupIdentify event.\n *\n * This type supports both:\n *\n * 1. Reserved Amplitude identify operations via `IdentifyUserProperties`:\n *    These operations enable structured updates to user properties.\n *\n *    Example:\n *    ```ts\n *    {\n *      $set: { plan: 'premium', login_count: 1 },\n *      $add: { login_count: 1 },\n *      $unset: { plan: '-' },\n *      $clearAll: '-'\n *    }\n *    ```\n *\n * 2. Custom user-defined properties (excluding reserved operation keys):\n *    Useful for assigning static properties without using Identify operations.\n *\n *    Example:\n *    ```ts\n *    {\n *      custom_flag: true,\n *      experiment_group: 'B',\n *      favorite_color: 'blue'\n *    }\n *    ```\n *\n * This union ensures compatibility with Amplitude's identify semantics\n * while allowing flexibility to define arbitrary non-reserved properties.\n */\nexport type UserProperties =\n  | IdentifyUserProperties\n  | {\n      [key in Exclude<string, IdentifyOperation>]: any;\n    };\n\n/**\n * Strings that have special meaning when used as an event's type\n * and have different specifications.\n */\nexport enum SpecialEventType {\n  IDENTIFY = '$identify',\n  GROUP_IDENTIFY = '$groupidentify',\n  REVENUE = 'revenue_amount',\n}\n\nexport interface TrackEvent extends BaseEvent {\n  event_type: Exclude<string, SpecialEventType>;\n}\n\nexport interface IdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.IDENTIFY;\n  user_properties: UserProperties;\n}\n\nexport interface GroupIdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.GROUP_IDENTIFY;\n  group_properties: UserProperties;\n}\n\nexport interface RevenueEvent extends BaseEvent {\n  event_type: SpecialEventType.REVENUE;\n  event_properties:\n    | RevenueEventProperties\n    | {\n        [key: string]: any;\n      };\n}\n\nexport type Event = TrackEvent | IdentifyEvent | GroupIdentifyEvent | RevenueEvent;\n", "export const UNSET_VALUE = '-';\nexport const AMPLITUDE_PREFIX = 'AMP';\nexport const STORAGE_PREFIX = `${AMPLITUDE_PREFIX}_unsent`;\nexport const AMPLITUDE_SERVER_URL = 'https://api2.amplitude.com/2/httpapi';\nexport const EU_AMPLITUDE_SERVER_URL = 'https://api.eu.amplitude.com/2/httpapi';\nexport const AMPLITUDE_BATCH_SERVER_URL = 'https://api2.amplitude.com/batch';\nexport const EU_AMPLITUDE_BATCH_SERVER_URL = 'https://api.eu.amplitude.com/batch';\n", "const MAX_PROPERTY_KEYS = 1000;\n\nexport const isValidObject = (properties: { [key: string]: any }): boolean => {\n  if (Object.keys(properties).length > MAX_PROPERTY_KEYS) {\n    return false;\n  }\n  for (const key in properties) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const value = properties[key];\n    if (!isValidProperties(key, value)) return false;\n  }\n  return true;\n};\n\nexport const isValidProperties = (property: string, value: any): boolean => {\n  if (typeof property !== 'string') return false;\n  if (Array.isArray(value)) {\n    let isValid = true;\n    for (const valueElement of value) {\n      if (Array.isArray(valueElement)) {\n        return false;\n      } else if (typeof valueElement === 'object') {\n        isValid = isValid && isValidObject(valueElement as object);\n      } else if (!['number', 'string'].includes(typeof valueElement)) {\n        return false;\n      }\n      if (!isValid) {\n        return false;\n      }\n    }\n  } else if (value === null || value === undefined) {\n    return false;\n  } else if (typeof value === 'object') {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    return isValidObject(value);\n  } else if (!['number', 'string', 'boolean'].includes(typeof value)) {\n    return false;\n  }\n  return true;\n};\n", "import { UNSET_VALUE } from './types/constants';\nimport { isValidProperties } from './utils/valid-properties';\n\nexport interface IIdentify {\n  getUserProperties(): IdentifyUserProperties;\n  set(property: string, value: ValidPropertyType): IIdentify;\n  setOnce(property: string, value: ValidPropertyType): IIdentify;\n  append(property: string, value: ValidPropertyType): IIdentify;\n  prepend(property: string, value: ValidPropertyType): IIdentify;\n  postInsert(property: string, value: ValidPropertyType): IIdentify;\n  preInsert(property: string, value: ValidPropertyType): IIdentify;\n  remove(property: string, value: ValidPropertyType): IIdentify;\n  add(property: string, value: number): IIdentify;\n  unset(property: string): IIdentify;\n  clearAll(): IIdentify;\n}\n\nexport class Identify implements IIdentify {\n  protected readonly _propertySet: Set<string> = new Set<string>();\n  protected _properties: IdentifyUserProperties = {};\n\n  public getUserProperties(): IdentifyUserProperties {\n    return { ...this._properties };\n  }\n\n  public set(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.SET, property, value);\n    return this;\n  }\n\n  public setOnce(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.SET_ONCE, property, value);\n    return this;\n  }\n\n  public append(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.APPEND, property, value);\n    return this;\n  }\n\n  public prepend(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.PREPEND, property, value);\n    return this;\n  }\n\n  public postInsert(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.POSTINSERT, property, value);\n    return this;\n  }\n\n  public preInsert(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.PREINSERT, property, value);\n    return this;\n  }\n\n  public remove(property: string, value: ValidPropertyType): Identify {\n    this._safeSet(IdentifyOperation.REMOVE, property, value);\n    return this;\n  }\n\n  public add(property: string, value: number): Identify {\n    this._safeSet(IdentifyOperation.ADD, property, value);\n    return this;\n  }\n\n  public unset(property: string): Identify {\n    this._safeSet(IdentifyOperation.UNSET, property, UNSET_VALUE);\n    return this;\n  }\n\n  public clearAll(): Identify {\n    // When clear all happens, all properties are unset. Reset the entire object.\n    this._properties = {};\n    this._properties[IdentifyOperation.CLEAR_ALL] = UNSET_VALUE;\n\n    return this;\n  }\n\n  // Returns whether or not this set actually worked.\n  private _safeSet(operation: IdentifyOperation, property: string, value: ValidPropertyType): boolean {\n    if (this._validate(operation, property, value)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      let userPropertyMap: any = this._properties[operation];\n      if (userPropertyMap === undefined) {\n        userPropertyMap = {};\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this._properties[operation] = userPropertyMap;\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      userPropertyMap[property] = value;\n      this._propertySet.add(property);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _validate(operation: IdentifyOperation, property: string, value: ValidPropertyType): boolean {\n    if (this._properties[IdentifyOperation.CLEAR_ALL] !== undefined) {\n      // clear all already set. Skipping operation;\n      return false;\n    }\n\n    if (this._propertySet.has(property)) {\n      // Property already used. Skipping operation\n      return false;\n    }\n\n    if (operation === IdentifyOperation.ADD) {\n      return typeof value === 'number';\n    }\n\n    if (operation !== IdentifyOperation.UNSET && operation !== IdentifyOperation.REMOVE) {\n      return isValidProperties(property, value);\n    }\n    return true;\n  }\n}\n\nexport type ValidPropertyType =\n  | number\n  | string\n  | boolean\n  | Array<string | number>\n  | { [key: string]: ValidPropertyType }\n  | Array<{ [key: string]: ValidPropertyType }>;\n\ninterface BaseOperationConfig {\n  [key: string]: ValidPropertyType;\n}\n\nexport interface IdentifyUserProperties {\n  // Add operations can only take numbers\n  [IdentifyOperation.ADD]?: { [key: string]: number };\n\n  // This reads the keys of the passed object, but the values are not used\n  [IdentifyOperation.UNSET]?: BaseOperationConfig;\n  // This option does not read the key as it unsets all user properties\n  [IdentifyOperation.CLEAR_ALL]?: any;\n\n  // These operations can take numbers, strings, or arrays of both.\n  [IdentifyOperation.SET]?: BaseOperationConfig;\n  [IdentifyOperation.SET_ONCE]?: BaseOperationConfig;\n  [IdentifyOperation.APPEND]?: BaseOperationConfig;\n  [IdentifyOperation.PREPEND]?: BaseOperationConfig;\n  [IdentifyOperation.POSTINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.PREINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.REMOVE]?: BaseOperationConfig;\n}\n\nexport enum IdentifyOperation {\n  // Base Operations to set values\n  SET = '$set',\n  SET_ONCE = '$setOnce',\n\n  // Operations around modifying existing values\n  ADD = '$add',\n  APPEND = '$append',\n  PREPEND = '$prepend',\n  REMOVE = '$remove',\n\n  // Operations around appending values *if* they aren't present\n  PREINSERT = '$preInsert',\n  POSTINSERT = '$postInsert',\n\n  // Operations around removing properties/values\n  UNSET = '$unset',\n  CLEAR_ALL = '$clearAll',\n}\n\n/**\n * Note that the order of operations should align with https://github.com/amplitude/nova/blob/7701b5986b565d4b2fb53b99a9f2175df055dea8/src/main/java/com/amplitude/ingestion/core/UserPropertyUtils.java#L210\n */\nexport const OrderedIdentifyOperations = [\n  IdentifyOperation.CLEAR_ALL,\n  IdentifyOperation.UNSET,\n  IdentifyOperation.SET,\n  IdentifyOperation.SET_ONCE,\n  IdentifyOperation.ADD,\n  IdentifyOperation.APPEND,\n  IdentifyOperation.PREPEND,\n  IdentifyOperation.PREINSERT,\n  IdentifyOperation.POSTINSERT,\n  IdentifyOperation.REMOVE,\n];\n", "export const SUCCESS_MESSAGE = 'Event tracked successfully';\nexport const UNEXPECTED_ERROR_MESSAGE = 'Unexpected error occurred';\nexport const MAX_RETRIES_EXCEEDED_MESSAGE = 'Event rejected due to exceeded retry count';\nexport const OPT_OUT_MESSAGE = 'Event skipped due to optOut config';\nexport const MISSING_API_KEY_MESSAGE = 'Event rejected due to missing API key';\nexport const INVALID_API_KEY = 'Invalid API key';\nexport const CLIENT_NOT_INITIALIZED = 'Client not initialized';\n", "/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent successfully. */\n  Success = 'success',\n  /** A user or device in the payload is currently rate limited and should try again later. */\n  RateLimit = 'rate_limit',\n  /** The sent payload was too large to be processed. */\n  PayloadTooLarge = 'payload_too_large',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n  /** a server or client side error occuring when a request takes too long and is cancelled */\n  Timeout = 'Timeout',\n  /** NodeJS runtime environment error.. E.g. disconnected from network */\n  SystemError = 'SystemError',\n}\n", "import { Event } from '../types/event/event';\nimport { Result } from '../types/result';\nimport { Status } from '../types/status';\n\nexport const buildResult = (event: Event, code = 0, message: string = Status.Unknown): Result => {\n  return { event, code, message };\n};\n", "/* eslint-disable no-restricted-globals */\n/* Only file allowed to access to globalThis, window, self */\n\nexport const getGlobalScope = (): typeof globalThis | undefined => {\n  // This should only be used for integrations with Amplitude that are not running in a browser environment\n  //   We need to specify the name of the global variable as a string to prevent it from being minified\n  const ampIntegrationContextName = 'ampIntegrationContext' as keyof typeof globalThis;\n  if (typeof globalThis !== 'undefined' && typeof globalThis[ampIntegrationContextName] !== 'undefined') {\n    return globalThis[ampIntegrationContextName] as typeof globalThis;\n  }\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n};\n", "/**\n * Source: [jed's gist's comment]{@link https://gist.github.com/jed/982883?permalink_comment_id=3223002#gistcomment-3223002}.\n * Returns a random v4 UUID of the form xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx,\n * where each x is replaced with a random hexadecimal digit from 0 to f, and\n * y is replaced with a random hexadecimal digit from 8 to b.\n * Used to generate UUIDs for deviceIds.\n * @private\n */\n\nimport { getGlobalScope } from '../global-scope';\n\nconst legacyUUID = function (a?: any): string {\n  return a // if the placeholder was passed, return\n    ? // a random number from 0 to 15\n      (\n        a ^ // unless b is 8,\n        ((Math.random() * // in which case\n          16) >> // a random number from\n          (a / 4))\n      ) // 8 to 11\n        .toString(16) // in hexadecimal\n    : // or otherwise a concatenated string:\n      (\n        String(1e7) + // 10000000 +\n        String(-1e3) + // -1000 +\n        String(-4e3) + // -4000 +\n        String(-8e3) + // -80000000 +\n        String(-1e11)\n      ) // -100000000000,\n        .replace(\n          // replacing\n          /[018]/g, // zeroes, ones, and eights with\n          UUID, // random hex digits\n        );\n};\n\nconst hex: string[] = [...Array(256).keys()].map((index) => index.toString(16).padStart(2, '0'));\n\nexport const UUID = (a?: any): string => {\n  const globalScope = getGlobalScope();\n\n  /* istanbul ignore next */\n  if (!globalScope?.crypto?.getRandomValues) {\n    // Fallback to legacy UUID generation if crypto is not available\n    return legacyUUID(a);\n  }\n\n  const r = globalScope.crypto.getRandomValues(new Uint8Array(16));\n\n  r[6] = (r[6] & 0x0f) | 0x40;\n  r[8] = (r[8] & 0x3f) | 0x80;\n\n  return [...r.entries()].map(([index, int]) => ([4, 6, 8, 10].includes(index) ? `-${hex[int]}` : hex[int])).join('');\n};\n", "import { AnalyticsIdentity, BeforePlugin, DestinationPlugin, EnrichmentPlugin, Plugin } from './types/plugin';\nimport { CoreClient } from './core-client';\nimport { IConfig } from './config';\nimport { EventCallback } from './types/event-callback';\nimport { Event } from './types/event/event';\nimport { Result } from './types/result';\nimport { buildResult } from './utils/result-builder';\nimport { UUID } from './utils/uuid';\n\nexport class Timeline {\n  queue: [Event, EventCallback][] = [];\n  // Flag to guarantee one schedule apply is running\n  applying = false;\n  // Flag indicates whether timeline is ready to process event\n  // Events collected before timeline is ready will stay in the queue to be processed later\n  plugins: Plugin[] = [];\n\n  constructor(private client: CoreClient) {}\n\n  async register(plugin: Plugin, config: IConfig) {\n    if (this.plugins.some((existingPlugin) => existingPlugin.name === plugin.name)) {\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      config.loggerProvider.warn(`Plugin with name ${plugin.name} already exists, skipping registration`);\n      return;\n    }\n\n    if (plugin.name === undefined) {\n      plugin.name = UUID();\n      config.loggerProvider.warn(`Plugin name is undefined. \n      Generating a random UUID for plugin name: ${plugin.name}. \n      Set a name for the plugin to prevent it from being added multiple times.`);\n    }\n\n    plugin.type = plugin.type ?? 'enrichment';\n    await plugin.setup?.(config, this.client);\n    this.plugins.push(plugin);\n  }\n\n  async deregister(pluginName: string, config: IConfig) {\n    const index = this.plugins.findIndex((plugin) => plugin.name === pluginName);\n    if (index === -1) {\n      config.loggerProvider.warn(`Plugin with name ${pluginName} does not exist, skipping deregistration`);\n      return;\n    }\n    const plugin = this.plugins[index];\n    this.plugins.splice(index, 1);\n    await plugin.teardown?.();\n  }\n\n  reset(client: CoreClient) {\n    this.applying = false;\n    const plugins = this.plugins;\n    plugins.map((plugin) => plugin.teardown?.());\n    this.plugins = [];\n    this.client = client;\n  }\n\n  push(event: Event) {\n    return new Promise<Result>((resolve) => {\n      this.queue.push([event, resolve]);\n      this.scheduleApply(0);\n    });\n  }\n\n  scheduleApply(timeout: number) {\n    if (this.applying) return;\n    this.applying = true;\n    setTimeout(() => {\n      void this.apply(this.queue.shift()).then(() => {\n        this.applying = false;\n        if (this.queue.length > 0) {\n          this.scheduleApply(0);\n        }\n      });\n    }, timeout);\n  }\n\n  async apply(item: [Event, EventCallback] | undefined) {\n    if (!item) {\n      return;\n    }\n\n    let [event] = item;\n    const [, resolve] = item;\n\n    const before = this.plugins.filter<BeforePlugin>(\n      (plugin: Plugin): plugin is BeforePlugin => plugin.type === 'before',\n    );\n\n    for (const plugin of before) {\n      /* istanbul ignore if */\n      if (!plugin.execute) {\n        // do nothing\n        continue;\n      }\n      const e = await plugin.execute({ ...event });\n      if (e === null) {\n        resolve({ event, code: 0, message: '' });\n        return;\n      } else {\n        event = e;\n      }\n    }\n\n    const enrichment = this.plugins.filter<EnrichmentPlugin>(\n      (plugin: Plugin): plugin is EnrichmentPlugin => plugin.type === 'enrichment' || plugin.type === undefined,\n    );\n\n    for (const plugin of enrichment) {\n      /* istanbul ignore if */\n      if (!plugin.execute) {\n        // do nothing\n        continue;\n      }\n      const e = await plugin.execute({ ...event });\n      if (e === null) {\n        resolve({ event, code: 0, message: '' });\n        return;\n      } else {\n        event = e;\n      }\n    }\n\n    const destination = this.plugins.filter<DestinationPlugin>(\n      (plugin: Plugin): plugin is DestinationPlugin => plugin.type === 'destination',\n    );\n\n    const executeDestinations = destination.map((plugin) => {\n      const eventClone = { ...event };\n      return plugin.execute(eventClone).catch((e) => buildResult(eventClone, 0, String(e)));\n    });\n\n    void Promise.all(executeDestinations).then(([result]) => {\n      const resolveResult =\n        result || buildResult(event, 100, 'Event not tracked, no destination plugins on the instance');\n      resolve(resolveResult);\n    });\n\n    return;\n  }\n\n  async flush() {\n    const queue = this.queue;\n    this.queue = [];\n\n    await Promise.all(queue.map((item) => this.apply(item)));\n\n    const destination = this.plugins.filter<DestinationPlugin>(\n      (plugin: Plugin): plugin is DestinationPlugin => plugin.type === 'destination',\n    );\n\n    const executeDestinations = destination.map((plugin) => {\n      return plugin.flush && plugin.flush();\n    });\n\n    await Promise.all(executeDestinations);\n  }\n\n  onIdentityChanged(identity: AnalyticsIdentity) {\n    this.plugins.forEach((plugin) => {\n      // Intentionally to not await plugin.onIdentityChanged() for non-blocking.\n      // Ignore optional channing next line for test coverage.\n      // If the plugin doesn't implement it, it won't be called.\n      /* istanbul ignore next */\n      void plugin.onIdentityChanged?.(identity);\n    });\n  }\n\n  onSessionIdChanged(sessionId: number) {\n    this.plugins.forEach((plugin) => {\n      // Intentionally to not await plugin.onSessionIdChanged() for non-blocking.\n      // Ignore optional channing next line for test coverage.\n      // If the plugin doesn't implement it, it won't be called.\n      /* istanbul ignore next */\n      void plugin.onSessionIdChanged?.(sessionId);\n    });\n  }\n\n  onOptOutChanged(optOut: boolean) {\n    this.plugins.forEach((plugin) => {\n      // Intentionally to not await plugin.onOptOutChanged() for non-blocking.\n      // Ignore optional channing next line for test coverage.\n      // If the plugin doesn't implement it, it won't be called.\n      /* istanbul ignore next */\n      void plugin.onOptOutChanged?.(optOut);\n    });\n  }\n}\n", "import { Identify, IIdentify } from '../identify';\nimport { IRevenue } from '../revenue';\nimport { BaseEvent, EventOptions } from '../types/event/base-event';\nimport { TrackEvent, IdentifyEvent, GroupIdentifyEvent, SpecialEventType, RevenueEvent } from '../types/event/event';\n\nexport const createTrackEvent = (\n  eventInput: BaseEvent | string,\n  eventProperties?: Record<string, any>,\n  eventOptions?: EventOptions,\n): TrackEvent => {\n  const baseEvent: BaseEvent = typeof eventInput === 'string' ? { event_type: eventInput } : eventInput;\n  return {\n    ...baseEvent,\n    ...eventOptions,\n    ...(eventProperties && { event_properties: eventProperties }),\n  };\n};\n\nexport const createIdentifyEvent = (identify: IIdentify, eventOptions?: EventOptions): IdentifyEvent => {\n  const identifyEvent: IdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties(),\n  };\n\n  return identifyEvent;\n};\n\nexport const createGroupIdentifyEvent = (\n  groupType: string,\n  groupName: string | string[],\n  identify: IIdentify,\n  eventOptions?: EventOptions,\n): GroupIdentifyEvent => {\n  const groupIdentify: GroupIdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.GROUP_IDENTIFY,\n    group_properties: identify.getUserProperties(),\n    groups: {\n      [groupType]: groupName,\n    },\n  };\n\n  return groupIdentify;\n};\n\nexport const createGroupEvent = (groupType: string, groupName: string | string[], eventOptions?: EventOptions) => {\n  const identify = new Identify();\n  identify.set(groupType, groupName);\n\n  const groupEvent: IdentifyEvent = {\n    ...eventOptions,\n    event_type: SpecialEventType.IDENTIFY,\n    user_properties: identify.getUserProperties(),\n    groups: {\n      [groupType]: groupName,\n    },\n  };\n  return groupEvent;\n};\n\nexport const createRevenueEvent = (revenue: IRevenue, eventOptions?: EventOptions): RevenueEvent => {\n  return {\n    ...eventOptions,\n    event_type: SpecialEventType.REVENUE,\n    event_properties: revenue.getEventProperties(),\n  };\n};\n", "export interface AmplitudeReturn<T> {\n  promise: Promise<T>;\n}\n\nexport const returnWrapper: {\n  (): AmplitudeReturn<void>;\n  <T>(awaitable: Promise<T>): AmplitudeReturn<T>;\n} = <T>(awaitable?: Promise<T>) => ({\n  promise: awaitable || Promise.resolve(),\n});\n", "import { Plugin } from './types/plugin';\nimport { IConfig } from './config';\nimport { BaseEvent, EventOptions } from './types/event/base-event';\nimport { Result } from './types/result';\nimport {\n  Event,\n  IdentifyOperation,\n  IdentifyUserProperties,\n  SpecialEventType,\n  UserProperties,\n} from './types/event/event';\nimport { IIdentify, OrderedIdentifyOperations } from './identify';\nimport { IRevenue } from './revenue';\nimport { CLIENT_NOT_INITIALIZED, OPT_OUT_MESSAGE } from './types/messages';\nimport { Timeline } from './timeline';\nimport {\n  createGroupEvent,\n  createGroupIdentifyEvent,\n  createIdentifyEvent,\n  createRevenueEvent,\n  createTrackEvent,\n} from './utils/event-builder';\nimport { buildResult } from './utils/result-builder';\nimport { AmplitudeReturn, returnWrapper } from './utils/return-wrapper';\n\ninterface PluginHost {\n  plugin(name: string): Plugin | undefined;\n  plugins<T extends Plugin>(pluginClass: new (...args: any[]) => T): T[];\n}\n\nexport interface CoreClient {\n  /**\n   * Adds a new plugin.\n   *\n   * ```typescript\n   * const plugin = {\n   *   name: 'myPlugin',\n   *   type: 'enrichment',\n   *   setup(config: Config) {\n   *     return;\n   *   },\n   *   execute(context: Event) {\n   *     return context;\n   *   },\n   * };\n   * amplitude.add(plugin);\n   * ```\n   */\n  add(plugin: Plugin): AmplitudeReturn<void>;\n\n  /**\n   * Removes a plugin.\n   *\n   * ```typescript\n   * amplitude.remove('myPlugin');\n   * ```\n   */\n  remove(pluginName: string): AmplitudeReturn<void>;\n\n  /**\n   * Tracks user-defined event, with specified type, optional event properties and optional overwrites.\n   *\n   * ```typescript\n   * // event tracking with event type only\n   * track('Page Load');\n   *\n   * // event tracking with event type and additional event properties\n   * track('Page Load', { loadTime: 1000 });\n   *\n   * // event tracking with event type, additional event properties, and overwritten event options\n   * track('Page Load', { loadTime: 1000 }, { sessionId: -1 });\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await track('Page Load').promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  track(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Alias for track()\n   */\n  logEvent(\n    eventInput: BaseEvent | string,\n    eventProperties?: Record<string, any>,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Sends an identify event containing user property operations\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('colors', ['rose', 'gold']);\n   * identify(id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await identify(id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  identify(identify: IIdentify, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a group identify event containing group property operations.\n   *\n   * ```typescript\n   * const id = new Identify();\n   * id.set('skills', ['js', 'ts']);\n   * const groupType = 'org';\n   * const groupName = 'engineering';\n   * groupIdentify(groupType, groupName, id);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await groupIdentify(groupType, groupName, id).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  groupIdentify(\n    groupType: string,\n    groupName: string | string[],\n    identify: IIdentify,\n    eventOptions?: EventOptions,\n  ): AmplitudeReturn<Result>;\n\n  /**\n   * Assigns a user to group\n   *\n   * ```typescript\n   * const groupType = 'orgId';\n   * const groupName = '15';\n   * setGroup(groupType, groupName, { user_id: '12345' })\n   * ```\n   */\n  setGroup(groupType: string, groupName: string | string[], eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sends a revenue event containing revenue property operations.\n   *\n   * ```typescript\n   * const rev = new Revenue();\n   * rev.setRevenue(100);\n   * revenue(rev);\n   *\n   * // alternatively, this tracking method is awaitable\n   * const result = await revenue(rev).promise;\n   * console.log(result.event); // {...}\n   * console.log(result.code); // 200\n   * console.log(result.message); // \"Event tracked successfully\"\n   * ```\n   */\n  revenue(revenue: IRevenue, eventOptions?: EventOptions): AmplitudeReturn<Result>;\n\n  /**\n   * Sets a new optOut config value. This toggles event tracking on/off.\n   *\n   *```typescript\n   * // Stops tracking\n   * setOptOut(true);\n   *\n   * // Starts/resumes tracking\n   * setOptOut(false);\n   * ```\n   */\n  setOptOut(optOut: boolean): void;\n\n  /**\n   * Flush all unsent events.\n   *\n   *```typescript\n   * flush();\n   * ```\n   */\n  flush(): AmplitudeReturn<void>;\n}\n\nexport class AmplitudeCore implements CoreClient, PluginHost {\n  protected initializing = false;\n  protected name: string;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: IConfig;\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  timeline: Timeline;\n  isReady = false;\n  protected q: Array<CallableFunction | typeof returnWrapper> = [];\n  protected dispatchQ: Array<CallableFunction> = [];\n\n  constructor(name = '$default') {\n    this.timeline = new Timeline(this);\n    this.name = name;\n  }\n\n  protected async _init(config: IConfig) {\n    this.config = config;\n    this.timeline.reset(this);\n    await this.runQueuedFunctions('q');\n    this.isReady = true;\n  }\n\n  async runQueuedFunctions(queueName: 'q' | 'dispatchQ') {\n    const queuedFunctions = this[queueName];\n    this[queueName] = [];\n    for (const queuedFunction of queuedFunctions) {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const val: ReturnType<typeof returnWrapper> | Promise<any> = queuedFunction();\n      if (val && 'promise' in val) {\n        await val.promise;\n      } else {\n        await val;\n      }\n    }\n    // Rerun queued functions if the queue has accrued more while awaiting promises\n    if (this[queueName].length) {\n      await this.runQueuedFunctions(queueName);\n    }\n  }\n\n  track(eventInput: BaseEvent | string, eventProperties?: Record<string, any>, eventOptions?: EventOptions) {\n    const event = createTrackEvent(eventInput, eventProperties, eventOptions);\n    return returnWrapper(this.dispatch(event));\n  }\n\n  logEvent = this.track.bind(this);\n\n  identify(identify: IIdentify, eventOptions?: EventOptions) {\n    const event = createIdentifyEvent(identify, eventOptions);\n    return returnWrapper(this.dispatch(event));\n  }\n\n  groupIdentify(groupType: string, groupName: string | string[], identify: IIdentify, eventOptions?: EventOptions) {\n    const event = createGroupIdentifyEvent(groupType, groupName, identify, eventOptions);\n    return returnWrapper(this.dispatch(event));\n  }\n\n  setGroup(groupType: string, groupName: string | string[], eventOptions?: EventOptions) {\n    const event = createGroupEvent(groupType, groupName, eventOptions);\n    return returnWrapper(this.dispatch(event));\n  }\n\n  revenue(revenue: IRevenue, eventOptions?: EventOptions) {\n    const event = createRevenueEvent(revenue, eventOptions);\n    return returnWrapper(this.dispatch(event));\n  }\n\n  add(plugin: Plugin) {\n    if (!this.isReady) {\n      this.q.push(this._addPlugin.bind(this, plugin));\n      return returnWrapper();\n    }\n    return this._addPlugin(plugin);\n  }\n\n  _addPlugin(plugin: Plugin) {\n    return returnWrapper(this.timeline.register(plugin, this.config));\n  }\n\n  remove(pluginName: string) {\n    if (!this.isReady) {\n      this.q.push(this._removePlugin.bind(this, pluginName));\n      return returnWrapper();\n    }\n    return this._removePlugin(pluginName);\n  }\n\n  _removePlugin(pluginName: string) {\n    return returnWrapper(this.timeline.deregister(pluginName, this.config));\n  }\n\n  dispatchWithCallback(event: Event, callback: (result: Result) => void): void {\n    if (!this.isReady) {\n      return callback(buildResult(event, 0, CLIENT_NOT_INITIALIZED));\n    }\n    void this.process(event).then(callback);\n  }\n\n  async dispatch(event: Event): Promise<Result> {\n    if (!this.isReady) {\n      return new Promise<Result>((resolve) => {\n        this.dispatchQ.push(this.dispatchWithCallback.bind(this, event, resolve));\n      });\n    }\n\n    return this.process(event);\n  }\n\n  /**\n   *\n   * This method applies identify operations to user properties and\n   * returns a single object representing the final user property state.\n   *\n   * This is a best-effort api that only supports $set, $clearAll, and $unset.\n   * Other operations are not supported and are ignored.\n   *\n   *\n   * @param userProperties The `event.userProperties` object from an Identify event.\n   * @returns A key-value object user properties without operations.\n   *\n   * @example\n   * Input:\n   * {\n   *   $set: { plan: 'premium' },\n   *   custom_flag: true\n   * }\n   *\n   * Output:\n   * {\n   *   plan: 'premium',\n   *   custom_flag: true\n   * }\n   */\n  getOperationAppliedUserProperties(userProperties: UserProperties | undefined): { [key: string]: any } {\n    const updatedProperties: { [key: string]: any } = {};\n\n    if (userProperties === undefined) {\n      return updatedProperties;\n    }\n\n    // Keep non-operation keys for later merge\n    const nonOpProperties: {\n      [key in Exclude<string, IdentifyOperation>]: any;\n    } = {};\n    Object.keys(userProperties).forEach((key) => {\n      if (!Object.values(IdentifyOperation).includes(key as IdentifyOperation)) {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        nonOpProperties[key] = userProperties[key];\n      }\n    });\n\n    OrderedIdentifyOperations.forEach((operation) => {\n      // Skip when key is an operation.\n      if (!Object.keys(userProperties).includes(operation)) return;\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const opProperties: IdentifyUserProperties = userProperties[operation];\n\n      switch (operation) {\n        case IdentifyOperation.CLEAR_ALL:\n          // Due to operation order, the following line will never execute.\n          /* istanbul ignore next */\n          Object.keys(updatedProperties).forEach((prop) => {\n            delete updatedProperties[prop];\n          });\n          break;\n        case IdentifyOperation.UNSET:\n          Object.keys(opProperties).forEach((prop) => {\n            delete updatedProperties[prop];\n          });\n          break;\n        case IdentifyOperation.SET:\n          Object.assign(updatedProperties, opProperties);\n          break;\n      }\n    });\n\n    // Merge non-operation properties.\n    // Custom properties should not be affected by operations.\n    // https://github.com/amplitude/nova/blob/343f678ded83c032e83b189796b3c2be161b48f5/src/main/java/com/amplitude/userproperty/model/ModifyUserPropertiesIdent.java#L79-L83\n    Object.assign(updatedProperties, nonOpProperties);\n\n    return updatedProperties;\n  }\n\n  async process(event: Event): Promise<Result> {\n    try {\n      // skip event processing if opt out\n      if (this.config.optOut) {\n        return buildResult(event, 0, OPT_OUT_MESSAGE);\n      }\n\n      if (event.event_type === SpecialEventType.IDENTIFY) {\n        const userProperties = this.getOperationAppliedUserProperties(event.user_properties);\n        this.timeline.onIdentityChanged({ userProperties: userProperties });\n      }\n\n      const result = await this.timeline.push(event);\n\n      result.code === 200\n        ? this.config.loggerProvider.log(result.message)\n        : result.code === 100\n        ? this.config.loggerProvider.warn(result.message)\n        : this.config.loggerProvider.error(result.message);\n\n      return result;\n    } catch (e) {\n      const message = String(e);\n      this.config.loggerProvider.error(message);\n      const result = buildResult(event, 0, message);\n\n      return result;\n    }\n  }\n\n  setOptOut(optOut: boolean) {\n    if (!this.isReady) {\n      this.q.push(this._setOptOut.bind(this, Boolean(optOut)));\n      return;\n    }\n    this._setOptOut(optOut);\n  }\n\n  _setOptOut(optOut: boolean) {\n    if (this.config.optOut !== optOut) {\n      this.timeline.onOptOutChanged(optOut);\n      this.config.optOut = Boolean(optOut);\n    }\n  }\n\n  flush() {\n    return returnWrapper(this.timeline.flush());\n  }\n\n  plugin(name: string): Plugin | undefined {\n    const plugin = this.timeline.plugins.find((plugin) => plugin.name === name);\n    if (plugin === undefined) {\n      this.config.loggerProvider.debug(`Cannot find plugin with name ${name}`);\n      return undefined;\n    }\n\n    return plugin;\n  }\n\n  plugins<T extends Plugin>(pluginClass: { new (...args: any[]): T }): T[] {\n    return this.timeline.plugins.filter((plugin) => plugin instanceof pluginClass) as T[];\n  }\n}\n", "import { isValidObject } from './utils/valid-properties';\n\nexport interface IRevenue {\n  getEventProperties(): RevenueEventProperties;\n  setProductId(productId: string): IRevenue;\n  setQuantity(quantity: number): IRevenue;\n  setPrice(price: number): IRevenue;\n  setRevenueType(revenueType: string): IRevenue;\n  setCurrency(currency: string): IRevenue;\n  setEventProperties(properties: { [key: string]: any }): IRevenue;\n  setRevenue(revenue: number): IRevenue;\n  setReceipt(receipt: string): IRevenue;\n  setReceiptSig(receiptSig: string): IRevenue;\n}\n\nexport class Revenue implements IRevenue {\n  private productId: string;\n  private quantity: number;\n  private price: number;\n  private revenueType?: string;\n  private currency?: string;\n  private properties?: { [key: string]: any };\n  private revenue?: number;\n  private receipt?: string;\n  private receiptSig?: string;\n\n  constructor() {\n    this.productId = '';\n    this.quantity = 1;\n    this.price = 0.0;\n  }\n\n  setProductId(productId: string) {\n    this.productId = productId;\n    return this;\n  }\n\n  setQuantity(quantity: number) {\n    if (quantity > 0) {\n      this.quantity = quantity;\n    }\n    return this;\n  }\n\n  setPrice(price: number) {\n    this.price = price;\n    return this;\n  }\n\n  setRevenueType(revenueType: string) {\n    this.revenueType = revenueType;\n    return this;\n  }\n\n  setCurrency(currency: string) {\n    this.currency = currency;\n    return this;\n  }\n\n  setRevenue(revenue: number) {\n    this.revenue = revenue;\n    return this;\n  }\n\n  setReceipt(receipt: string) {\n    this.receipt = receipt;\n    return this;\n  }\n\n  setReceiptSig(receiptSig: string) {\n    this.receiptSig = receiptSig;\n    return this;\n  }\n\n  setEventProperties(properties: { [key: string]: ValidPropertyType }) {\n    if (isValidObject(properties)) {\n      this.properties = properties;\n    }\n    return this;\n  }\n\n  getEventProperties(): RevenueEventProperties {\n    const eventProperties: RevenueEventProperties = this.properties ? { ...this.properties } : {};\n    eventProperties[RevenueProperty.REVENUE_PRODUCT_ID] = this.productId;\n    eventProperties[RevenueProperty.REVENUE_QUANTITY] = this.quantity;\n    eventProperties[RevenueProperty.REVENUE_PRICE] = this.price;\n    eventProperties[RevenueProperty.REVENUE_TYPE] = this.revenueType;\n    eventProperties[RevenueProperty.REVENUE_CURRENCY] = this.currency;\n    eventProperties[RevenueProperty.REVENUE] = this.revenue;\n    eventProperties[RevenueProperty.RECEIPT] = this.receipt;\n    eventProperties[RevenueProperty.RECEIPT_SIG] = this.receiptSig;\n    return eventProperties;\n  }\n}\n\nexport interface RevenueEventProperties {\n  [RevenueProperty.REVENUE_PRODUCT_ID]?: string;\n  [RevenueProperty.REVENUE_QUANTITY]?: number;\n  [RevenueProperty.REVENUE_PRICE]?: number;\n  [RevenueProperty.REVENUE_TYPE]?: string;\n  [RevenueProperty.REVENUE_CURRENCY]?: string;\n  [RevenueProperty.REVENUE]?: number;\n  [RevenueProperty.RECEIPT]?: string;\n  [RevenueProperty.RECEIPT_SIG]?: string;\n}\n\nexport enum RevenueProperty {\n  REVENUE_PRODUCT_ID = '$productId',\n  REVENUE_QUANTITY = '$quantity',\n  REVENUE_PRICE = '$price',\n  REVENUE_TYPE = '$revenueType',\n  REVENUE_CURRENCY = '$currency',\n  REVENUE = '$revenue',\n  RECEIPT = '$receipt',\n  RECEIPT_SIG = '$receiptSig',\n}\n\nexport type ValidPropertyType =\n  | number\n  | string\n  | boolean\n  | Array<string | number>\n  | { [key: string]: ValidPropertyType }\n  | Array<{ [key: string]: ValidPropertyType }>;\n", "// Creates an array of elements split into groups the length of size.\n// If array can't be split evenly, the final chunk will be the remaining elements.\n// Works similary as https://lodash.com/docs/4.17.15#chunk\n\nexport const chunk = <T>(arr: T[], size: number) => {\n  const chunkSize = Math.max(size, 1);\n  return arr.reduce<T[][]>((chunks, element, index) => {\n    const chunkIndex = Math.floor(index / chunkSize);\n    if (!chunks[chunkIndex]) {\n      chunks[chunkIndex] = [];\n    }\n    chunks[chunkIndex].push(element);\n    return chunks;\n  }, []);\n};\n", "export enum LogLevel {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Verbose = 3,\n  Debug = 4,\n}\n", "import { LogLevel } from './types/loglevel';\n\nconst PREFIX = 'Amplitude Logger ';\n\nexport interface ILogger {\n  disable(): void;\n  enable(logLevel: LogLevel): void;\n  log(...args: any[]): void;\n  warn(...args: any[]): void;\n  error(...args: any[]): void;\n  debug(...args: any[]): void;\n}\n\nexport interface LogConfig {\n  logger: ILogger;\n  logLevel: LogLevel;\n}\n\ntype TimeKey = 'start' | 'end';\n\nexport interface DebugContext {\n  type: string;\n  name: string;\n  args: string[] | string;\n  stacktrace?: string[] | string;\n  time?: { [key in TimeKey]?: string };\n  states?: { [key: string]: any };\n}\n\nexport class Logger implements ILogger {\n  logLevel: LogLevel;\n\n  constructor() {\n    this.logLevel = LogLevel.None;\n  }\n\n  disable(): void {\n    this.logLevel = LogLevel.None;\n  }\n\n  enable(logLevel: LogLevel = LogLevel.Warn): void {\n    this.logLevel = logLevel;\n  }\n\n  log(...args: any[]): void {\n    if (this.logLevel < LogLevel.Verbose) {\n      return;\n    }\n    console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n  }\n\n  warn(...args: any[]): void {\n    if (this.logLevel < LogLevel.Warn) {\n      return;\n    }\n    console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n  }\n\n  error(...args: any[]): void {\n    if (this.logLevel < LogLevel.Error) {\n      return;\n    }\n    console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n  }\n\n  debug(...args: any[]): void {\n    if (this.logLevel < LogLevel.Debug) {\n      return;\n    }\n    // console.debug output is hidden by default in chrome\n    console.log(`${PREFIX}[Debug]: ${args.join(' ')}`);\n  }\n}\n", "import { OfflineDisabled } from './types/offline';\nimport { ServerZoneType } from './types/server-zone';\nimport { Transport } from './types/transport';\nimport { Event } from './types/event/event';\nimport { Plan } from './types/event/plan';\nimport { IngestionMetadata } from './types/event/ingestion-metadata';\nimport { Storage } from './types/storage';\nimport {\n  AMPLITUDE_SERVER_URL,\n  AMPLITUDE_BATCH_SERVER_URL,\n  EU_AMPLITUDE_SERVER_URL,\n  EU_AMPLITUDE_BATCH_SERVER_URL,\n} from './types/constants';\n\nimport { Logger, ILogger } from './logger';\nimport { LogLevel } from './types/loglevel';\n\nexport const getDefaultConfig = () => ({\n  flushMaxRetries: 12,\n  flushQueueSize: 200,\n  flushIntervalMillis: 10000,\n  instanceName: '$default_instance',\n  logLevel: LogLevel.Warn,\n  loggerProvider: new Logger(),\n  offline: false,\n  optOut: false,\n  serverUrl: AMPLITUDE_SERVER_URL,\n  serverZone: 'US' as ServerZoneType,\n  useBatch: false,\n});\n\nexport interface IConfig {\n  /**\n   * Your Amplitude Project API key.\n   */\n  apiKey: string;\n  /**\n   * The interval of uploading events to Amplitude in milliseconds.\n   */\n  flushIntervalMillis: number;\n  /**\n   * The maximum number of retries for failed upload attempts. This is only applicable to retryable errors.\n   */\n  flushMaxRetries: number;\n  /**\n   * The maximum number of events that are batched in a single upload attempt.\n   */\n  flushQueueSize: number;\n  /**\n   * The instance name. For tracking events to multiple Amplitude projects in your application.\n   */\n  instanceName?: string;\n  /**\n   * Level of logs to be printed in the developer console.\n   * Valid values are `LogLevel.None`, `LogLevel.Error`, `LogLevel.Warn`, `LogLevel.Verbose`,  `LogLevel.Debug`\n   */\n  logLevel: LogLevel;\n  /**\n   * A custom Logger class to emit log messages to desired destination.\n   */\n  loggerProvider: ILogger;\n  /**\n   * The minimum length for the value of userId and deviceId properties.\n   */\n  minIdLength?: number;\n  /**\n   * Whether the SDK is connected to network.\n   */\n  offline?: boolean | typeof OfflineDisabled;\n  /**\n   *  The flag to opt this device out of Amplitude tracking.\n   *  If this flag is set, no additional information will be stored for the user.\n   */\n  optOut: boolean;\n  /**\n   * Tracking plan properties.\n   * Amplitude internal use.\n   */\n  plan?: Plan;\n  /**\n   * Ingestion metadata.\n   * Amplitude internal use.\n   */\n  ingestionMetadata?: IngestionMetadata;\n  /**\n   * The URL where events are upload to.\n   */\n  serverUrl?: string;\n  /**\n   * The Amplitude server zone.\n   * Set this to EU for Amplitude projects created in EU data center.\n   */\n  serverZone?: ServerZoneType;\n  /**\n   *  The storage provider to persist unsent events.\n   */\n  storageProvider?: Storage<Event[]>;\n  /**\n   * A customer Transport Class for sending data to a server.\n   */\n  transportProvider: Transport;\n  /**\n   * The flag of whether to upload events to Batch API instead of the default HTTP V2 API.\n   */\n  useBatch: boolean;\n  /**\n   * Metrics of the SDK.\n   */\n  requestMetadata?: IRequestMetadata;\n}\n\nexport interface IRequestMetadata {\n  sdk: {\n    metrics: {\n      histogram: IHistogramOptions;\n    };\n  };\n\n  recordHistogram<T extends HistogramKey>(key: T, value: IHistogramOptions[T]): void;\n}\n\nexport interface IHistogramOptions {\n  remote_config_fetch_time_IDB?: number;\n  remote_config_fetch_time_API_success?: number;\n  remote_config_fetch_time_API_fail?: number;\n}\n\nexport type HistogramKey = keyof IHistogramOptions;\n\nexport interface ConfigOptions extends Partial<IConfig> {\n  apiKey: string;\n  transportProvider: Transport;\n}\n\nexport class Config implements IConfig {\n  apiKey: string;\n  flushIntervalMillis: number;\n  flushMaxRetries: number;\n  flushQueueSize: number;\n  instanceName?: string;\n  loggerProvider: ILogger;\n  logLevel: LogLevel;\n  minIdLength?: number;\n  offline?: boolean | typeof OfflineDisabled;\n  plan?: Plan;\n  ingestionMetadata?: IngestionMetadata;\n  serverUrl: string | undefined;\n  serverZone?: ServerZoneType;\n  transportProvider: Transport;\n  storageProvider?: Storage<Event[]>;\n  useBatch: boolean;\n  requestMetadata?: RequestMetadata;\n\n  protected _optOut = false;\n  get optOut() {\n    return this._optOut;\n  }\n  set optOut(optOut: boolean) {\n    this._optOut = optOut;\n  }\n\n  constructor(options: ConfigOptions) {\n    const defaultConfig = getDefaultConfig();\n    this.apiKey = options.apiKey;\n    this.flushIntervalMillis = options.flushIntervalMillis ?? defaultConfig.flushIntervalMillis;\n    this.flushMaxRetries = options.flushMaxRetries || defaultConfig.flushMaxRetries;\n    this.flushQueueSize = options.flushQueueSize || defaultConfig.flushQueueSize;\n    this.instanceName = options.instanceName || defaultConfig.instanceName;\n    this.loggerProvider = options.loggerProvider || defaultConfig.loggerProvider;\n    this.logLevel = options.logLevel ?? defaultConfig.logLevel;\n    this.minIdLength = options.minIdLength;\n    this.plan = options.plan;\n    this.ingestionMetadata = options.ingestionMetadata;\n    this.offline = options.offline !== undefined ? options.offline : defaultConfig.offline;\n    this.optOut = options.optOut ?? defaultConfig.optOut;\n    this.serverUrl = options.serverUrl;\n    this.serverZone = options.serverZone || defaultConfig.serverZone;\n    this.storageProvider = options.storageProvider;\n    this.transportProvider = options.transportProvider;\n    this.useBatch = options.useBatch ?? defaultConfig.useBatch;\n    this.loggerProvider.enable(this.logLevel);\n\n    const serverConfig = createServerConfig(options.serverUrl, options.serverZone, options.useBatch);\n    this.serverZone = serverConfig.serverZone;\n    this.serverUrl = serverConfig.serverUrl;\n  }\n}\n\nexport const getServerUrl = (serverZone: ServerZoneType, useBatch: boolean) => {\n  if (serverZone === 'EU') {\n    return useBatch ? EU_AMPLITUDE_BATCH_SERVER_URL : EU_AMPLITUDE_SERVER_URL;\n  }\n  return useBatch ? AMPLITUDE_BATCH_SERVER_URL : AMPLITUDE_SERVER_URL;\n};\n\nexport const createServerConfig = (\n  serverUrl = '',\n  serverZone: ServerZoneType = getDefaultConfig().serverZone,\n  useBatch: boolean = getDefaultConfig().useBatch,\n) => {\n  if (serverUrl) {\n    return { serverUrl, serverZone: undefined };\n  }\n  const _serverZone = ['US', 'EU'].includes(serverZone) ? serverZone : getDefaultConfig().serverZone;\n  return {\n    serverZone: _serverZone,\n    serverUrl: getServerUrl(_serverZone, useBatch),\n  };\n};\n\nexport class RequestMetadata implements IRequestMetadata {\n  sdk: {\n    metrics: {\n      histogram: HistogramOptions;\n    };\n  };\n\n  constructor() {\n    this.sdk = {\n      metrics: {\n        histogram: {},\n      },\n    };\n  }\n\n  recordHistogram<T extends HistogramKey>(key: T, value: HistogramOptions[T]) {\n    this.sdk.metrics.histogram[key] = value;\n  }\n}\n\nclass HistogramOptions implements IHistogramOptions {\n  remote_config_fetch_time_IDB?: number;\n  remote_config_fetch_time_API_success?: number;\n  remote_config_fetch_time_API_fail?: number;\n}\n", "import { DestinationPlugin } from '../types/plugin';\nimport { Event } from '../types/event/event';\nimport { Result } from '../types/result';\nimport { Status } from '../types/status';\nimport {\n  Response,\n  InvalidResponse,\n  PayloadTooLargeResponse,\n  RateLimitResponse,\n  SuccessResponse,\n} from '../types/response';\nimport {\n  INVALID_API_KEY,\n  MAX_RETRIES_EXCEEDED_MESSAGE,\n  MISSING_API_KEY_MESSAGE,\n  SUCCESS_MESSAGE,\n  UNEXPECTED_ERROR_MESSAGE,\n} from '../types/messages';\nimport { STORAGE_PREFIX } from '../types/constants';\nimport { chunk } from '../utils/chunk';\nimport { buildResult } from '../utils/result-builder';\nimport { createServerConfig, RequestMetadata } from '../config';\nimport { UUID } from '../utils/uuid';\nimport { IConfig } from '../config';\nimport { EventCallback } from '../types/event-callback';\n\nexport interface Context {\n  event: Event;\n  attempts: number;\n  callback: EventCallback;\n  timeout: number;\n}\n\nfunction getErrorMessage(error: unknown) {\n  if (error instanceof Error) return error.message;\n  return String(error);\n}\n\nexport function getResponseBodyString(res: Response) {\n  let responseBodyString = '';\n  try {\n    if ('body' in res) {\n      responseBodyString = JSON.stringify(res.body, null, 2);\n    }\n  } catch {\n    // to avoid crash, but don't care about the error, add comment to avoid empty block lint error\n  }\n  return responseBodyString;\n}\n\nexport class Destination implements DestinationPlugin {\n  name = 'amplitude';\n  type = 'destination' as const;\n\n  retryTimeout = 1000;\n  throttleTimeout = 30000;\n  storageKey = '';\n  // this.config is defined in setup() which will always be called first\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: IConfig;\n  // Indicator of whether events that are scheduled (but not flushed yet).\n  // When flush:\n  //   1. assign `scheduleId` to `flushId`\n  //   2. set `scheduleId` to null\n  scheduleId: ReturnType<typeof setTimeout> | null = null;\n  // Timeout in milliseconds of current schedule\n  scheduledTimeout = 0;\n  // Indicator of whether current flush resolves.\n  // When flush resolves, set `flushId` to null\n  flushId: ReturnType<typeof setTimeout> | null = null;\n  queue: Context[] = [];\n\n  async setup(config: IConfig): Promise<undefined> {\n    this.config = config;\n\n    this.storageKey = `${STORAGE_PREFIX}_${this.config.apiKey.substring(0, 10)}`;\n    const unsent = await this.config.storageProvider?.get(this.storageKey);\n    if (unsent && unsent.length > 0) {\n      void Promise.all(unsent.map((event) => this.execute(event))).catch();\n    }\n\n    return Promise.resolve(undefined);\n  }\n\n  execute(event: Event): Promise<Result> {\n    // Assign insert_id for dropping invalid event later\n    if (!event.insert_id) {\n      event.insert_id = UUID();\n    }\n\n    return new Promise((resolve) => {\n      const context = {\n        event,\n        attempts: 0,\n        callback: (result: Result) => resolve(result),\n        timeout: 0,\n      };\n      this.queue.push(context);\n      this.schedule(this.config.flushIntervalMillis);\n      this.saveEvents();\n    });\n  }\n\n  removeEventsExceedFlushMaxRetries(list: Context[]) {\n    return list.filter((context) => {\n      context.attempts += 1;\n      if (context.attempts < this.config.flushMaxRetries) {\n        return true;\n      }\n      void this.fulfillRequest([context], 500, MAX_RETRIES_EXCEEDED_MESSAGE);\n      return false;\n    });\n  }\n\n  scheduleEvents(list: Context[]) {\n    list.forEach((context) => {\n      this.schedule(context.timeout === 0 ? this.config.flushIntervalMillis : context.timeout);\n    });\n  }\n\n  // Schedule a flush in timeout when\n  // 1. No schedule\n  // 2. Timeout greater than existing timeout.\n  // This makes sure that when throttled, no flush when throttle timeout expires.\n  schedule(timeout: number) {\n    if (this.config.offline) {\n      return;\n    }\n\n    if (this.scheduleId === null || (this.scheduleId && timeout > this.scheduledTimeout)) {\n      if (this.scheduleId) {\n        clearTimeout(this.scheduleId);\n      }\n      this.scheduledTimeout = timeout;\n      this.scheduleId = setTimeout(() => {\n        this.queue = this.queue.map((context) => {\n          context.timeout = 0;\n          return context;\n        });\n        void this.flush(true);\n      }, timeout);\n      return;\n    }\n  }\n\n  // Mark current schedule is flushed.\n  resetSchedule() {\n    this.scheduleId = null;\n    this.scheduledTimeout = 0;\n  }\n\n  // Flush all events regardless of their timeout\n  async flush(useRetry = false) {\n    // Skip flush if offline\n    if (this.config.offline) {\n      this.resetSchedule();\n      this.config.loggerProvider.debug('Skipping flush while offline.');\n      return;\n    }\n\n    if (this.flushId) {\n      this.resetSchedule();\n      this.config.loggerProvider.debug('Skipping flush because previous flush has not resolved.');\n      return;\n    }\n\n    this.flushId = this.scheduleId;\n    this.resetSchedule();\n\n    const list: Context[] = [];\n    const later: Context[] = [];\n    this.queue.forEach((context) => (context.timeout === 0 ? list.push(context) : later.push(context)));\n\n    const batches = chunk(list, this.config.flushQueueSize);\n\n    // Promise.all() doesn't guarantee resolve order.\n    // Sequentially resolve to make sure backend receives events in order\n    await batches.reduce(async (promise, batch) => {\n      await promise;\n      return await this.send(batch, useRetry);\n    }, Promise.resolve());\n\n    // Mark current flush is done\n    this.flushId = null;\n\n    this.scheduleEvents(this.queue);\n  }\n\n  async send(list: Context[], useRetry = true) {\n    if (!this.config.apiKey) {\n      return this.fulfillRequest(list, 400, MISSING_API_KEY_MESSAGE);\n    }\n\n    const payload = {\n      api_key: this.config.apiKey,\n      events: list.map((context) => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { extra, ...eventWithoutExtra } = context.event;\n        return eventWithoutExtra;\n      }),\n      options: {\n        min_id_length: this.config.minIdLength,\n      },\n      client_upload_time: new Date().toISOString(),\n      request_metadata: this.config.requestMetadata,\n    };\n    this.config.requestMetadata = new RequestMetadata();\n\n    try {\n      const { serverUrl } = createServerConfig(this.config.serverUrl, this.config.serverZone, this.config.useBatch);\n      const res = await this.config.transportProvider.send(serverUrl, payload);\n      if (res === null) {\n        this.fulfillRequest(list, 0, UNEXPECTED_ERROR_MESSAGE);\n        return;\n      }\n      if (!useRetry) {\n        if ('body' in res) {\n          this.fulfillRequest(list, res.statusCode, `${res.status}: ${getResponseBodyString(res)}`);\n        } else {\n          this.fulfillRequest(list, res.statusCode, res.status);\n        }\n        return;\n      }\n      this.handleResponse(res, list);\n    } catch (e) {\n      const errorMessage = getErrorMessage(e);\n      this.config.loggerProvider.error(errorMessage);\n      this.handleResponse({ status: Status.Failed, statusCode: 0 }, list);\n    }\n  }\n\n  handleResponse(res: Response, list: Context[]) {\n    const { status } = res;\n\n    switch (status) {\n      case Status.Success: {\n        this.handleSuccessResponse(res, list);\n        break;\n      }\n      case Status.Invalid: {\n        this.handleInvalidResponse(res, list);\n        break;\n      }\n      case Status.PayloadTooLarge: {\n        this.handlePayloadTooLargeResponse(res, list);\n        break;\n      }\n      case Status.RateLimit: {\n        this.handleRateLimitResponse(res, list);\n        break;\n      }\n      default: {\n        // log intermediate event status before retry\n        this.config.loggerProvider.warn(`{code: 0, error: \"Status '${status}' provided for ${list.length} events\"}`);\n        this.handleOtherResponse(list);\n        break;\n      }\n    }\n  }\n\n  handleSuccessResponse(res: SuccessResponse, list: Context[]) {\n    this.fulfillRequest(list, res.statusCode, SUCCESS_MESSAGE);\n  }\n\n  handleInvalidResponse(res: InvalidResponse, list: Context[]) {\n    if (res.body.missingField || res.body.error.startsWith(INVALID_API_KEY)) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n\n    const dropIndex = [\n      ...Object.values(res.body.eventsWithInvalidFields),\n      ...Object.values(res.body.eventsWithMissingFields),\n      ...Object.values(res.body.eventsWithInvalidIdLengths),\n      ...res.body.silencedEvents,\n    ].flat();\n    const dropIndexSet = new Set(dropIndex);\n\n    const retry = list.filter((context, index) => {\n      if (dropIndexSet.has(index)) {\n        this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      return true;\n    });\n\n    if (retry.length > 0) {\n      // log intermediate event status before retry\n      this.config.loggerProvider.warn(getResponseBodyString(res));\n    }\n\n    const tryable = this.removeEventsExceedFlushMaxRetries(retry);\n    this.scheduleEvents(tryable);\n  }\n\n  handlePayloadTooLargeResponse(res: PayloadTooLargeResponse, list: Context[]) {\n    if (list.length === 1) {\n      this.fulfillRequest(list, res.statusCode, res.body.error);\n      return;\n    }\n\n    // log intermediate event status before retry\n    this.config.loggerProvider.warn(getResponseBodyString(res));\n\n    this.config.flushQueueSize /= 2;\n\n    const tryable = this.removeEventsExceedFlushMaxRetries(list);\n    this.scheduleEvents(tryable);\n  }\n\n  handleRateLimitResponse(res: RateLimitResponse, list: Context[]) {\n    const dropUserIds = Object.keys(res.body.exceededDailyQuotaUsers);\n    const dropDeviceIds = Object.keys(res.body.exceededDailyQuotaDevices);\n    const throttledIndex = res.body.throttledEvents;\n    const dropUserIdsSet = new Set(dropUserIds);\n    const dropDeviceIdsSet = new Set(dropDeviceIds);\n    const throttledIndexSet = new Set(throttledIndex);\n\n    const retry = list.filter((context, index) => {\n      if (\n        (context.event.user_id && dropUserIdsSet.has(context.event.user_id)) ||\n        (context.event.device_id && dropDeviceIdsSet.has(context.event.device_id))\n      ) {\n        this.fulfillRequest([context], res.statusCode, res.body.error);\n        return;\n      }\n      if (throttledIndexSet.has(index)) {\n        context.timeout = this.throttleTimeout;\n      }\n      return true;\n    });\n\n    if (retry.length > 0) {\n      // log intermediate event status before retry\n      this.config.loggerProvider.warn(getResponseBodyString(res));\n    }\n\n    const tryable = this.removeEventsExceedFlushMaxRetries(retry);\n    this.scheduleEvents(tryable);\n  }\n\n  handleOtherResponse(list: Context[]) {\n    const later = list.map((context) => {\n      context.timeout = context.attempts * this.retryTimeout;\n      return context;\n    });\n\n    const tryable = this.removeEventsExceedFlushMaxRetries(later);\n    this.scheduleEvents(tryable);\n  }\n\n  fulfillRequest(list: Context[], code: number, message: string) {\n    this.removeEvents(list);\n    list.forEach((context) => context.callback(buildResult(context.event, code, message)));\n  }\n\n  /**\n   * This is called on\n   * 1) new events are added to queue; or\n   * 2) response comes back for a request\n   *\n   * Update the event storage based on the queue\n   */\n  saveEvents() {\n    if (!this.config.storageProvider) {\n      return;\n    }\n\n    const updatedEvents = this.queue.map((context) => context.event);\n    void this.config.storageProvider.set(this.storageKey, updatedEvents);\n  }\n\n  /**\n   * This is called on response comes back for a request\n   */\n  removeEvents(eventsToRemove: Context[]) {\n    this.queue = this.queue.filter(\n      (queuedContext) => !eventsToRemove.some((context) => context.event.insert_id === queuedContext.event.insert_id),\n    );\n\n    this.saveEvents();\n  }\n}\n", "var ApplicationContextProviderImpl = /** @class */ (function () {\n    function ApplicationContextProviderImpl() {\n    }\n    ApplicationContextProviderImpl.prototype.getApplicationContext = function () {\n        return {\n            versionName: this.versionName,\n            language: getLanguage(),\n            platform: 'Web',\n            os: undefined,\n            deviceModel: undefined,\n        };\n    };\n    return ApplicationContextProviderImpl;\n}());\nvar getLanguage = function () {\n    return ((typeof navigator !== 'undefined' &&\n        ((navigator.languages && navigator.languages[0]) ||\n            navigator.language)) ||\n        '');\n};\n\nvar EventBridgeImpl = /** @class */ (function () {\n    function EventBridgeImpl() {\n        this.queue = [];\n    }\n    EventBridgeImpl.prototype.logEvent = function (event) {\n        if (!this.receiver) {\n            if (this.queue.length < 512) {\n                this.queue.push(event);\n            }\n        }\n        else {\n            this.receiver(event);\n        }\n    };\n    EventBridgeImpl.prototype.setEventReceiver = function (receiver) {\n        this.receiver = receiver;\n        if (this.queue.length > 0) {\n            this.queue.forEach(function (event) {\n                receiver(event);\n            });\n            this.queue = [];\n        }\n    };\n    return EventBridgeImpl;\n}());\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n    m = s && o[s],\n    i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n}\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nvar isEqual = function (obj1, obj2) {\n    var e_1, _a;\n    var primitive = ['string', 'number', 'boolean', 'undefined'];\n    var typeA = typeof obj1;\n    var typeB = typeof obj2;\n    if (typeA !== typeB) {\n        return false;\n    }\n    try {\n        for (var primitive_1 = __values(primitive), primitive_1_1 = primitive_1.next(); !primitive_1_1.done; primitive_1_1 = primitive_1.next()) {\n            var p = primitive_1_1.value;\n            if (p === typeA) {\n                return obj1 === obj2;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (primitive_1_1 && !primitive_1_1.done && (_a = primitive_1.return)) _a.call(primitive_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    // check null\n    if (obj1 == null && obj2 == null) {\n        return true;\n    }\n    else if (obj1 == null || obj2 == null) {\n        return false;\n    }\n    // if got here - objects\n    if (obj1.length !== obj2.length) {\n        return false;\n    }\n    //check if arrays\n    var isArrayA = Array.isArray(obj1);\n    var isArrayB = Array.isArray(obj2);\n    if (isArrayA !== isArrayB) {\n        return false;\n    }\n    if (isArrayA && isArrayB) {\n        //arrays\n        for (var i = 0; i < obj1.length; i++) {\n            if (!isEqual(obj1[i], obj2[i])) {\n                return false;\n            }\n        }\n    }\n    else {\n        //objects\n        var sorted1 = Object.keys(obj1).sort();\n        var sorted2 = Object.keys(obj2).sort();\n        if (!isEqual(sorted1, sorted2)) {\n            return false;\n        }\n        //compare object values\n        var result_1 = true;\n        Object.keys(obj1).forEach(function (key) {\n            if (!isEqual(obj1[key], obj2[key])) {\n                result_1 = false;\n            }\n        });\n        return result_1;\n    }\n    return true;\n};\n\nvar ID_OP_SET = '$set';\nvar ID_OP_UNSET = '$unset';\nvar ID_OP_CLEAR_ALL = '$clearAll';\n// Polyfill for Object.entries\nif (!Object.entries) {\n    Object.entries = function (obj) {\n        var ownProps = Object.keys(obj);\n        var i = ownProps.length;\n        var resArray = new Array(i);\n        while (i--) {\n            resArray[i] = [ownProps[i], obj[ownProps[i]]];\n        }\n        return resArray;\n    };\n}\nvar IdentityStoreImpl = /** @class */ (function () {\n    function IdentityStoreImpl() {\n        this.identity = { userProperties: {} };\n        this.listeners = new Set();\n    }\n    IdentityStoreImpl.prototype.editIdentity = function () {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var self = this;\n        var actingUserProperties = __assign({}, this.identity.userProperties);\n        var actingIdentity = __assign(__assign({}, this.identity), { userProperties: actingUserProperties });\n        return {\n            setUserId: function (userId) {\n                actingIdentity.userId = userId;\n                return this;\n            },\n            setDeviceId: function (deviceId) {\n                actingIdentity.deviceId = deviceId;\n                return this;\n            },\n            setUserProperties: function (userProperties) {\n                actingIdentity.userProperties = userProperties;\n                return this;\n            },\n            setOptOut: function (optOut) {\n                actingIdentity.optOut = optOut;\n                return this;\n            },\n            updateUserProperties: function (actions) {\n                var e_1, _a, e_2, _b, e_3, _c;\n                var actingProperties = actingIdentity.userProperties || {};\n                try {\n                    for (var _d = __values(Object.entries(actions)), _e = _d.next(); !_e.done; _e = _d.next()) {\n                        var _f = __read(_e.value, 2), action = _f[0], properties = _f[1];\n                        switch (action) {\n                            case ID_OP_SET:\n                                try {\n                                    for (var _g = (e_2 = void 0, __values(Object.entries(properties))), _h = _g.next(); !_h.done; _h = _g.next()) {\n                                        var _j = __read(_h.value, 2), key = _j[0], value = _j[1];\n                                        actingProperties[key] = value;\n                                    }\n                                }\n                                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                                finally {\n                                    try {\n                                        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);\n                                    }\n                                    finally { if (e_2) throw e_2.error; }\n                                }\n                                break;\n                            case ID_OP_UNSET:\n                                try {\n                                    for (var _k = (e_3 = void 0, __values(Object.keys(properties))), _l = _k.next(); !_l.done; _l = _k.next()) {\n                                        var key = _l.value;\n                                        delete actingProperties[key];\n                                    }\n                                }\n                                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                                finally {\n                                    try {\n                                        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);\n                                    }\n                                    finally { if (e_3) throw e_3.error; }\n                                }\n                                break;\n                            case ID_OP_CLEAR_ALL:\n                                actingProperties = {};\n                                break;\n                        }\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                actingIdentity.userProperties = actingProperties;\n                return this;\n            },\n            commit: function () {\n                self.setIdentity(actingIdentity);\n                return this;\n            },\n        };\n    };\n    IdentityStoreImpl.prototype.getIdentity = function () {\n        return __assign({}, this.identity);\n    };\n    IdentityStoreImpl.prototype.setIdentity = function (identity) {\n        var originalIdentity = __assign({}, this.identity);\n        this.identity = __assign({}, identity);\n        if (!isEqual(originalIdentity, this.identity)) {\n            this.listeners.forEach(function (listener) {\n                listener(identity);\n            });\n        }\n    };\n    IdentityStoreImpl.prototype.addIdentityListener = function (listener) {\n        this.listeners.add(listener);\n    };\n    IdentityStoreImpl.prototype.removeIdentityListener = function (listener) {\n        this.listeners.delete(listener);\n    };\n    return IdentityStoreImpl;\n}());\n\nvar safeGlobal = typeof globalThis !== 'undefined'\n    ? globalThis\n    : typeof global !== 'undefined'\n        ? global\n        : self;\n\nvar AnalyticsConnector = /** @class */ (function () {\n    function AnalyticsConnector() {\n        this.identityStore = new IdentityStoreImpl();\n        this.eventBridge = new EventBridgeImpl();\n        this.applicationContextProvider = new ApplicationContextProviderImpl();\n    }\n    AnalyticsConnector.getInstance = function (instanceName) {\n        if (!safeGlobal['analyticsConnectorInstances']) {\n            safeGlobal['analyticsConnectorInstances'] = {};\n        }\n        if (!safeGlobal['analyticsConnectorInstances'][instanceName]) {\n            safeGlobal['analyticsConnectorInstances'][instanceName] =\n                new AnalyticsConnector();\n        }\n        return safeGlobal['analyticsConnectorInstances'][instanceName];\n    };\n    return AnalyticsConnector;\n}());\n\nexport { AnalyticsConnector };\n", "import { AnalyticsConnector } from '@amplitude/analytics-connector';\n\nexport const getAnalyticsConnector = (instanceName = '$default_instance'): AnalyticsConnector => {\n  return AnalyticsConnector.getInstance(instanceName);\n};\n\nexport const setConnectorUserId = (userId: string | undefined, instanceName?: string): void => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  getAnalyticsConnector(instanceName).identityStore.editIdentity().setUserId(userId).commit();\n};\n\nexport const setConnectorDeviceId = (deviceId: string, instanceName?: string): void => {\n  getAnalyticsConnector(instanceName).identityStore.editIdentity().setDeviceId(deviceId).commit();\n};\n", "import { BeforePlugin } from '../types/plugin';\nimport { IConfig } from '../config';\nimport { Event } from '../types/event/event';\nimport { getAnalyticsConnector } from '../analytics-connector';\n\nexport class IdentityEventSender implements BeforePlugin {\n  name = 'identity';\n  type = 'before' as const;\n\n  identityStore = getAnalyticsConnector().identityStore;\n\n  async execute(context: Event): Promise<Event> {\n    const userProperties = context.user_properties as Record<string, any>;\n    if (userProperties) {\n      this.identityStore.editIdentity().updateUserProperties(userProperties).commit();\n    }\n    return context;\n  }\n\n  async setup(config: IConfig) {\n    if (config.instanceName) {\n      this.identityStore = getAnalyticsConnector(config.instanceName).identityStore;\n    }\n  }\n}\n", "export const isNewSession = (sessionTimeout: number, lastEventTime: number = Date.now()): boolean => {\n  const currentTime = Date.now();\n  const timeSinceLastEvent = currentTime - lastEventTime;\n\n  return timeSinceLastEvent > sessionTimeout;\n};\n", "import { AMPLITUDE_PREFIX } from './types/constants';\n\nexport const getCookieName = (apiKey: string, postKey = '', limit = 10) => {\n  return [AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');\n};\n\nexport const getOldCookieName = (apiKey: string) => {\n  return `${AMPLITUDE_PREFIX.toLowerCase()}_${apiKey.substring(0, 6)}`;\n};\n", "export const getLanguage = (): string => {\n  if (typeof navigator === 'undefined') return '';\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  const userLanguage = (navigator as any).userLanguage as string | undefined;\n\n  return navigator.languages?.[0] ?? navigator.language ?? userLanguage ?? '';\n};\n", "import { getGlobalScope } from './global-scope';\n\nexport const getQueryParams = (): Record<string, string | undefined> => {\n  const globalScope = getGlobalScope();\n  /* istanbul ignore if */\n  if (!globalScope?.location?.search) {\n    return {};\n  }\n  const pairs = globalScope.location.search.substring(1).split('&').filter(Boolean);\n  const params = pairs.reduce<Record<string, string | undefined>>((acc, curr) => {\n    const query = curr.split('=', 2);\n    const key = tryDecodeURIComponent(query[0]);\n    const value = tryDecodeURIComponent(query[1]);\n    if (!value) {\n      return acc;\n    }\n    acc[key] = value;\n    return acc;\n  }, {});\n  return params;\n};\n\nexport const tryDecodeURIComponent = (value = '') => {\n  try {\n    return decodeURIComponent(value);\n  } catch {\n    return '';\n  }\n};\n", "/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport { LogConfig, DebugContext } from '../logger';\nimport { LogLevel } from '../types/loglevel';\nimport { AmplitudeCore } from '../core-client';\n\nexport const getStacktrace = (ignoreDepth = 0): string[] => {\n  const trace = new Error().stack || '';\n  return trace\n    .split('\\n')\n    .slice(2 + ignoreDepth)\n    .map((text) => text.trim());\n};\n\n// This hook makes sure we always get the latest logger and logLevel.\nexport const getClientLogConfig = (client: AmplitudeCore) => (): LogConfig => {\n  const { loggerProvider: logger, logLevel } = { ...client.config };\n  return {\n    logger,\n    logLevel,\n  };\n};\n\n// This is a convenient function to get the attribute from object with string path, similar to lodash '#get'.\nexport const getValueByStringPath = (obj: any, path: string): any => {\n  path = path.replace(/\\[(\\w+)\\]/g, '.$1'); // convert indexes to properties\n  path = path.replace(/^\\./, ''); // strip a leading dot\n  for (const attr of path.split('.')) {\n    if (attr in obj) {\n      obj = obj[attr];\n    } else {\n      return;\n    }\n  }\n  return obj;\n};\n\nexport const getClientStates = (client: AmplitudeCore, paths: Array<string>) => (): { [key: string]: any } => {\n  const res: { [key: string]: any } = {};\n  for (const path of paths) {\n    res[path] = getValueByStringPath(client, path);\n  }\n  return res;\n};\n\nexport const debugWrapper =\n  <T extends Array<any>, R>(\n    fn: (...args: T) => R,\n    fnName: string,\n    getLogConfig: () => LogConfig,\n    getStates?: () => { [key: string]: any },\n    fnContext: any = null,\n  ) =>\n  (...args: T): R => {\n    const { logger, logLevel } = getLogConfig();\n    // return early if possible to reduce overhead\n    if ((logLevel && logLevel < LogLevel.Debug) || !logLevel || !logger) {\n      return fn.apply(fnContext, args);\n    }\n    const debugContext: DebugContext = {\n      type: 'invoke public method',\n      name: fnName,\n      args,\n      stacktrace: getStacktrace(1),\n      time: {\n        start: new Date().toISOString(),\n      },\n      states: {},\n    };\n    if (getStates && debugContext.states) {\n      debugContext.states.before = getStates();\n    }\n    const result = fn.apply(fnContext, args);\n    if (result && (result as any).promise) {\n      // if result is a promise, add the callback\n      (result as any).promise.then(() => {\n        if (getStates && debugContext.states) {\n          debugContext.states.after = getStates();\n        }\n        if (debugContext.time) {\n          debugContext.time.end = new Date().toISOString();\n        }\n        logger.debug(JSON.stringify(debugContext, null, 2));\n      });\n    } else {\n      if (getStates && debugContext.states) {\n        debugContext.states.after = getStates();\n      }\n      if (debugContext.time) {\n        debugContext.time.end = new Date().toISOString();\n      }\n      logger.debug(JSON.stringify(debugContext, null, 2));\n    }\n    return result;\n  };\n", "import { Storage } from '../types/storage';\n\nexport class MemoryStorage<T> implements Storage<T> {\n  memoryStorage: Map<string, T> = new Map();\n\n  async isEnabled(): Promise<boolean> {\n    return true;\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    return this.memoryStorage.get(key);\n  }\n\n  async getRaw(key: string): Promise<string | undefined> {\n    const value = await this.get(key);\n    return value ? JSON.stringify(value) : undefined;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    this.memoryStorage.set(key, value);\n  }\n\n  async remove(key: string): Promise<void> {\n    this.memoryStorage.delete(key);\n  }\n\n  async reset(): Promise<void> {\n    this.memoryStorage.clear();\n  }\n}\n", "import { Storage, CookieStorageOptions } from '../types/storage';\nimport { getGlobalScope } from '../global-scope';\n\nexport class CookieStorage<T> implements Storage<T> {\n  options: CookieStorageOptions;\n  private static testValue: undefined | string;\n\n  constructor(options?: CookieStorageOptions) {\n    this.options = { ...options };\n  }\n\n  async isEnabled(): Promise<boolean> {\n    /* istanbul ignore if */\n    if (!getGlobalScope()) {\n      return false;\n    }\n\n    CookieStorage.testValue = String(Date.now());\n    const testStorage = new CookieStorage<string>(this.options);\n    const testKey = 'AMP_TEST';\n    try {\n      await testStorage.set(testKey, CookieStorage.testValue);\n      const value = await testStorage.get(testKey);\n      return value === CookieStorage.testValue;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    } finally {\n      await testStorage.remove(testKey);\n    }\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    const value = await this.getRaw(key);\n    if (!value) {\n      return undefined;\n    }\n    try {\n      const decodedValue = decodeCookiesAsDefault(value) ?? decodeCookiesWithDoubleUrlEncoding(value);\n      if (decodedValue === undefined) {\n        console.error(`Amplitude Logger [Error]: Failed to decode cookie value for key: ${key}, value: ${value}`);\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(decodedValue);\n    } catch {\n      console.error(`Amplitude Logger [Error]: Failed to parse cookie value for key: ${key}, value: ${value}`);\n      return undefined;\n    }\n  }\n\n  async getRaw(key: string): Promise<string | undefined> {\n    const globalScope = getGlobalScope();\n    const cookie = globalScope?.document?.cookie.split('; ') ?? [];\n    const match = cookie.find((c) => c.indexOf(key + '=') === 0);\n    if (!match) {\n      return undefined;\n    }\n    return match.substring(key.length + 1);\n  }\n\n  async set(key: string, value: T | null): Promise<void> {\n    try {\n      const expirationDays = this.options.expirationDays ?? 0;\n      const expires = value !== null ? expirationDays : -1;\n      let expireDate: Date | undefined = undefined;\n      if (expires) {\n        const date = new Date();\n        date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);\n        expireDate = date;\n      }\n      let str = `${key}=${btoa(encodeURIComponent(JSON.stringify(value)))}`;\n      if (expireDate) {\n        str += `; expires=${expireDate.toUTCString()}`;\n      }\n      str += '; path=/';\n      if (this.options.domain) {\n        str += `; domain=${this.options.domain}`;\n      }\n      if (this.options.secure) {\n        str += '; Secure';\n      }\n      if (this.options.sameSite) {\n        str += `; SameSite=${this.options.sameSite}`;\n      }\n      const globalScope = getGlobalScope();\n      if (globalScope) {\n        globalScope.document.cookie = str;\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(`Amplitude Logger [Error]: Failed to set cookie for key: ${key}. Error: ${errorMessage}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.set(key, null);\n  }\n\n  async reset(): Promise<void> {\n    return;\n  }\n}\n\nconst decodeCookiesAsDefault = (value: string): string | undefined => {\n  try {\n    return decodeURIComponent(atob(value));\n  } catch {\n    return undefined;\n  }\n};\n\nconst decodeCookiesWithDoubleUrlEncoding = (value: string): string | undefined => {\n  // Modern Ruby (v7+) automatically encodes cookies with URL encoding by\n  // https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html\n  try {\n    return decodeURIComponent(atob(decodeURIComponent(value)));\n  } catch {\n    return undefined;\n  }\n};\n", "import { AMPLITUDE_PREFIX } from '../types/constants';\n\nexport const getStorageKey = (apiKey: string, postKey = '', limit = 10) => {\n  return [AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');\n};\n", "/* eslint-disable @typescript-eslint/no-unsafe-argument */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport { Transport } from '../types/transport';\nimport { Status } from '../types/status';\nimport { Payload } from '../types/payload';\nimport { Response } from '../types/response';\n\nexport class BaseTransport implements Transport {\n  send(_serverUrl: string, _payload: Payload): Promise<Response | null> {\n    return Promise.resolve(null);\n  }\n\n  buildResponse(responseJSON: Record<string, any>): Response | null {\n    if (typeof responseJSON !== 'object') {\n      return null;\n    }\n\n    const statusCode = responseJSON.code || 0;\n    const status = this.buildStatus(statusCode);\n\n    switch (status) {\n      case Status.Success:\n        return {\n          status,\n          statusCode,\n          body: {\n            eventsIngested: responseJSON.events_ingested ?? 0,\n            payloadSizeBytes: responseJSON.payload_size_bytes ?? 0,\n            serverUploadTime: responseJSON.server_upload_time ?? 0,\n          },\n        };\n\n      case Status.Invalid:\n        return {\n          status,\n          statusCode,\n          body: {\n            error: responseJSON.error ?? '',\n            missingField: responseJSON.missing_field ?? '',\n            eventsWithInvalidFields: responseJSON.events_with_invalid_fields ?? {},\n            eventsWithMissingFields: responseJSON.events_with_missing_fields ?? {},\n            eventsWithInvalidIdLengths: responseJSON.events_with_invalid_id_lengths ?? {},\n            epsThreshold: responseJSON.eps_threshold ?? 0,\n            exceededDailyQuotaDevices: responseJSON.exceeded_daily_quota_devices ?? {},\n            silencedDevices: responseJSON.silenced_devices ?? [],\n            silencedEvents: responseJSON.silenced_events ?? [],\n            throttledDevices: responseJSON.throttled_devices ?? {},\n            throttledEvents: responseJSON.throttled_events ?? [],\n          },\n        };\n      case Status.PayloadTooLarge:\n        return {\n          status,\n          statusCode,\n          body: {\n            error: responseJSON.error ?? '',\n          },\n        };\n      case Status.RateLimit:\n        return {\n          status,\n          statusCode,\n          body: {\n            error: responseJSON.error ?? '',\n            epsThreshold: responseJSON.eps_threshold ?? 0,\n            throttledDevices: responseJSON.throttled_devices ?? {},\n            throttledUsers: responseJSON.throttled_users ?? {},\n            exceededDailyQuotaDevices: responseJSON.exceeded_daily_quota_devices ?? {},\n            exceededDailyQuotaUsers: responseJSON.exceeded_daily_quota_users ?? {},\n            throttledEvents: responseJSON.throttled_events ?? [],\n          },\n        };\n      case Status.Timeout:\n      default:\n        return {\n          status,\n          statusCode,\n        };\n    }\n  }\n\n  buildStatus(code: number): Status {\n    if (code >= 200 && code < 300) {\n      return Status.Success;\n    }\n\n    if (code === 429) {\n      return Status.RateLimit;\n    }\n\n    if (code === 413) {\n      return Status.PayloadTooLarge;\n    }\n\n    if (code === 408) {\n      return Status.Timeout;\n    }\n\n    if (code >= 400 && code < 500) {\n      return Status.Invalid;\n    }\n\n    if (code >= 500) {\n      return Status.Failed;\n    }\n\n    return Status.Unknown;\n  }\n}\n", "import { BaseTransport } from './base';\nimport { Transport } from '../types/transport';\nimport { Payload } from '../types/payload';\nimport { Response } from '../types/response';\n\nexport class FetchTransport extends BaseTransport implements Transport {\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    /* istanbul ignore if */\n    if (typeof fetch === 'undefined') {\n      throw new Error('FetchTransport is not supported');\n    }\n    const options: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: '*/*',\n      },\n      body: JSON.stringify(payload),\n      method: 'POST',\n    };\n    const response = await fetch(serverUrl, options);\n    const responseText = await response.text();\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return this.buildResponse(JSON.parse(responseText));\n    } catch {\n      return this.buildResponse({ code: response.status });\n    }\n  }\n}\n", "/**\n * @deprecated use ServerZoneType instead\n */\nexport enum ServerZone {\n  US = 'US',\n  EU = 'EU',\n  /**\n   * Add for session-replay-browser migration from analytics-type v1.x.\n   */\n  STAGING = 'STAGING',\n}\n\nexport type ServerZoneType = 'US' | 'EU';\n", "export const OfflineDisabled = null;\n", "import { ILogger } from '../logger';\n\nexport type ActionType = 'click' | 'change';\n\n/**\n * Default CSS selectors to define which elements on the page to track.\n * Extend this list to include additional elements to track. For example:\n * ```\n * autocapturePlugin({\n *    cssSelectorAllowlist: [...DEFAULT_CSS_SELECTOR_ALLOWLIST, \".my-class\"],\n * })\n * ```\n */\nexport const DEFAULT_CSS_SELECTOR_ALLOWLIST = [\n  'a',\n  'button',\n  'input',\n  'select',\n  'textarea',\n  'label',\n  'video',\n  'audio',\n  '[contenteditable=\"true\" i]',\n  '[data-amp-default-track]',\n  '.amp-default-track',\n];\n\n/**\n * Default prefix to allow the plugin to capture data attributes as an event property.\n */\nexport const DEFAULT_DATA_ATTRIBUTE_PREFIX = 'data-amp-track-';\n\n/**\n * Default list of elements on the page should be tracked when the page changes.\n */\nexport const DEFAULT_ACTION_CLICK_ALLOWLIST = ['div', 'span', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n\nexport interface ElementInteractionsOptions {\n  /**\n   * List of CSS selectors to allow auto tracking on.\n   * When provided, allow elements matching any selector to be tracked.\n   * Default is ['a', 'button', 'input', 'select', 'textarea', 'label', '[data-amp-default-track]', '.amp-default-track'].\n   */\n  cssSelectorAllowlist?: string[];\n\n  /**\n   * List of page URLs to allow auto tracking on.\n   * When provided, only allow tracking on these URLs.\n   * Both full URLs and regex are supported.\n   */\n  pageUrlAllowlist?: (string | RegExp)[];\n\n  /**\n   * Function to determine whether an event should be tracked.\n   * When provided, this function overwrites all other allowlists and configurations.\n   * If the function returns true, the event will be tracked.\n   * If the function returns false, the event will not be tracked.\n   * @param actionType - The type of action that triggered the event.\n   * @param element - The [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) that triggered the event.\n   */\n  shouldTrackEventResolver?: (actionType: ActionType, element: DomElement) => boolean;\n\n  /**\n   * Prefix for data attributes to allow auto collecting.\n   * Default is 'data-amp-track-'.\n   */\n  dataAttributePrefix?: string;\n\n  /**\n   * Options for integrating visual tagging selector.\n   */\n  visualTaggingOptions?: {\n    enabled?: boolean;\n    messenger?: Messenger;\n  };\n\n  /**\n   * Debounce time in milliseconds for tracking events.\n   * This is used to detect rage clicks.\n   */\n  debounceTime?: number;\n\n  /**\n   * CSS selector allowlist for tracking clicks that result in a DOM change/navigation on elements not already allowed by the cssSelectorAllowlist\n   */\n  actionClickAllowlist?: string[];\n}\n\nexport interface Messenger {\n  logger?: ILogger;\n  setup: () => void;\n}\n\n// DomElement is [Element](https://developer.mozilla.org/en-US/docs/Web/API/Element) if the dom library is included in tsconfig.json\n// and never if it is not included\n// eslint-disable-next-line no-restricted-globals\ntype DomElement = typeof globalThis extends {\n  Element: new (...args: any) => infer T;\n}\n  ? T\n  : never;\n", "import { getGlobalScope } from './global-scope';\n\n/* SAFE TYPE DEFINITIONS\n  These type definitions expose limited properties of the original types\n  to prevent the consumer from mutating them or consuming them.\n*/\ntype BlobSafe = {\n  size: number;\n};\n\ntype ArrayBufferSafe = {\n  byteLength: number;\n};\n\ntype ArrayBufferViewSafe = {\n  byteLength: number;\n};\n\ntype URLSearchParamsSafe = {\n  toString(): string;\n};\n\n// no method on readablestream is safe to call\ntype ReadableStreamSafe = Record<string, never>;\n\ntype FormDataEntryValueSafe = string | BlobSafe | null;\n\ntype BodyInitSafe =\n  | string\n  | Blob\n  | ArrayBufferSafe\n  | FormDataSafe\n  | URLSearchParamsSafe\n  | ArrayBufferViewSafe\n  | null\n  | undefined;\n\ntype HeadersRequestSafe = {\n  entries(): IterableIterator<[string, string]>;\n  forEach(callbackfn: (value: string, key: string) => void): void;\n};\n\ntype HeadersResponseSafe = {\n  get(name: string): string | null;\n  forEach(callbackfn: (value: string, key: string) => void): void;\n};\n\ntype HeadersInitSafe = HeadersRequestSafe | Record<string, string> | string[][];\n\ntype ResponseSafe = {\n  status: number;\n  headers: HeadersResponseSafe | undefined;\n};\n\nexport type RequestInitSafe = {\n  method?: string;\n  headers?: HeadersInitSafe;\n  body?: BodyInitSafe;\n};\nexport interface FormDataSafe {\n  entries(): IterableIterator<[string, FormDataEntryValueSafe]>;\n}\nexport type XMLHttpRequestBodyInitSafe = BlobSafe | FormDataSafe | URLSearchParamsSafe | string;\n\nexport type FetchRequestBody =\n  | string\n  | BlobSafe\n  | ArrayBufferSafe\n  | FormDataSafe\n  | URLSearchParamsSafe\n  | ArrayBufferViewSafe\n  | null\n  | undefined;\n\nexport interface IRequestWrapper {\n  headers?: Record<string, string>;\n  bodySize?: number;\n  method?: string;\n  body?: FetchRequestBody | XMLHttpRequestBodyInitSafe | null;\n}\n\nexport const MAXIMUM_ENTRIES = 100;\n\n/**\n * This class encapsulates the RequestInit (https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n * object so that the consumer can only get access to the headers, method and body size.\n *\n * This is to prevent consumers from directly accessing the Request object\n * and mutating it or running costly operations on it.\n *\n * IMPORTANT:\n *    * Do not make changes to this class without careful consideration\n *      of performance implications, memory usage and potential to mutate the customer's\n *      request.\n *   * NEVER .clone() the RequestInit object. This will 2x's the memory overhead of the request\n *   * NEVER: call .arrayBuffer(), text(), json() or any other method on the body that\n *     consumes the body's stream. This will cause the response to be consumed\n *     meaning the body will be empty when the customer tries to access it.\n *     (ie: if the body is an instanceof https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n *      never call any of the methods on it)\n */\nexport class RequestWrapperFetch implements IRequestWrapper {\n  private _headers: Record<string, string> | undefined;\n  private _bodySize: number | undefined;\n  constructor(private request: RequestInitSafe) {}\n\n  get headers(): Record<string, string> | undefined {\n    if (this._headers) return this._headers;\n\n    const headersUnsafe = this.request.headers;\n    if (Array.isArray(headersUnsafe)) {\n      const headers = headersUnsafe;\n      this._headers = headers.reduce((acc, [key, value]) => {\n        acc[key] = value;\n        return acc;\n      }, {} as Record<string, string>);\n    } else if (headersUnsafe instanceof Headers) {\n      const headersSafe = headersUnsafe as HeadersRequestSafe;\n      const headersObj: Record<string, string> = {};\n      headersSafe.forEach((value, key) => {\n        headersObj[key] = value;\n      });\n      this._headers = headersObj;\n    } else if (typeof headersUnsafe === 'object') {\n      this._headers = headersUnsafe as Record<string, string>;\n    }\n\n    return this._headers;\n  }\n\n  get bodySize(): number | undefined {\n    if (typeof this._bodySize === 'number') return this._bodySize;\n    const global = getGlobalScope();\n\n    /* istanbul ignore if */\n    if (!global?.TextEncoder) {\n      return;\n    }\n    const body = this.request.body as FetchRequestBody;\n    this._bodySize = getBodySize(body, MAXIMUM_ENTRIES);\n    return this._bodySize;\n  }\n\n  get method(): string | undefined {\n    return this.request.method;\n  }\n}\n\nexport class RequestWrapperXhr implements IRequestWrapper {\n  constructor(readonly body: XMLHttpRequestBodyInitSafe | null) {}\n\n  get bodySize(): number | undefined {\n    return getBodySize(this.body as FetchRequestBody, MAXIMUM_ENTRIES);\n  }\n}\n\nfunction getBodySize(bodyUnsafe: FetchRequestBody, maxEntries: number): number | undefined {\n  let bodySize: number | undefined;\n  const global = getGlobalScope();\n  /* istanbul ignore next */\n  const TextEncoder = global?.TextEncoder;\n  /* istanbul ignore next */\n  if (!TextEncoder) {\n    return;\n  }\n  let bodySafe;\n  if (typeof bodyUnsafe === 'string') {\n    bodySafe = bodyUnsafe;\n    bodySize = new TextEncoder().encode(bodySafe).length;\n  } else if (bodyUnsafe instanceof Blob) {\n    bodySafe = bodyUnsafe as BlobSafe;\n    bodySize = bodySafe.size;\n  } else if (bodyUnsafe instanceof URLSearchParams) {\n    bodySafe = bodyUnsafe as URLSearchParamsSafe;\n    bodySize = new TextEncoder().encode(bodySafe.toString()).length;\n  } else if (ArrayBuffer.isView(bodyUnsafe)) {\n    bodySafe = bodyUnsafe as ArrayBufferViewSafe;\n    bodySize = bodySafe.byteLength;\n  } else if (bodyUnsafe instanceof ArrayBuffer) {\n    bodySafe = bodyUnsafe as ArrayBufferSafe;\n    bodySize = bodySafe.byteLength;\n  } else if (bodyUnsafe instanceof FormData) {\n    // Estimating only for text parts; not accurate for files\n    const formData = bodyUnsafe as unknown as FormDataSafe;\n\n    let total = 0;\n    let count = 0;\n    for (const [key, value] of formData.entries()) {\n      total += key.length;\n      if (typeof value === 'string') {\n        total += new TextEncoder().encode(value).length;\n      } else if (value instanceof Blob) {\n        total += value.size;\n      } else {\n        // encountered an unknown type\n        // we can't estimate the size of this entry\n        return;\n      }\n      // terminate if we reach the maximum number of entries\n      // to avoid performance issues in case of very large FormData\n      if (++count >= maxEntries) {\n        return;\n      }\n    }\n    bodySize = total;\n  } else if (bodyUnsafe instanceof ReadableStream) {\n    // If bodyUnsafe is an instanceof ReadableStream, we can't determine the size,\n    // without consuming it, so we return undefined.\n    // Never ever consume ReadableStream! DO NOT DO IT!!!\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bodySafe = bodyUnsafe as unknown as ReadableStreamSafe;\n    return;\n  }\n  return bodySize;\n}\n\nexport interface IResponseWrapper {\n  headers?: Record<string, string>;\n  bodySize?: number;\n  status?: number;\n  body?: string | Blob | ReadableStream | ArrayBuffer | FormDataSafe | URLSearchParams | ArrayBufferView | null;\n}\n\n/**\n * This class encapsulates the Fetch API Response object\n * (https://developer.mozilla.org/en-US/docs/Web/API/Response) so that the consumer can\n * only get access to the headers and body size.\n *\n * This is to prevent consumers from directly accessing the Response object\n * and mutating it or running costly operations on it.\n *\n * IMPORTANT:\n *   * Do not make changes to this class without careful consideration\n *     of performance implications, memory usage and potential to mutate the customer's\n *     response.\n *   * NEVER .clone() the Response object. This will 2x's the memory overhead of the response\n *   * NEVER consume the body's stream. This will cause the response to be consumed\n *     meaning the body will be empty when the customer tries to access it.\n *     (ie: if the body is an instanceof https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n *      never call any of the methods on it)\n */\nexport class ResponseWrapperFetch implements IResponseWrapper {\n  private _headers: Record<string, string> | undefined;\n  private _bodySize: number | undefined;\n  constructor(private response: ResponseSafe) {}\n\n  get headers(): Record<string, string> | undefined {\n    if (this._headers) return this._headers;\n\n    if (this.response.headers instanceof Headers) {\n      const headersSafe = this.response.headers as HeadersResponseSafe;\n      const headersOut: Record<string, string> = {};\n      /* istanbul ignore next */\n      headersSafe?.forEach?.((value, key) => {\n        headersOut[key] = value;\n      });\n      this._headers = headersOut;\n      return headersOut;\n    }\n\n    return;\n  }\n\n  get bodySize(): number | undefined {\n    if (this._bodySize !== undefined) return this._bodySize;\n    /* istanbul ignore next */\n    const contentLength = this.response.headers?.get?.('content-length');\n    const bodySize = contentLength ? parseInt(contentLength, 10) : undefined;\n    this._bodySize = bodySize;\n    return bodySize;\n  }\n\n  get status(): number {\n    return this.response.status;\n  }\n}\n\nexport class ResponseWrapperXhr implements IResponseWrapper {\n  constructor(readonly statusCode: number, readonly headersString: string, readonly size: number | undefined) {}\n\n  get bodySize(): number | undefined {\n    return this.size;\n  }\n\n  get status(): number {\n    return this.statusCode;\n  }\n\n  get headers(): Record<string, string> | undefined {\n    if (!this.headersString) {\n      return;\n    }\n    const headers: Record<string, string> = {};\n    const headerLines = this.headersString.split('\\r\\n');\n    for (const line of headerLines) {\n      const [key, value] = line.split(': ');\n      if (key && value) {\n        headers[key] = value;\n      }\n    }\n    return headers;\n  }\n}\n\nexport class NetworkRequestEvent {\n  constructor(\n    public readonly type: 'xhr' | 'fetch',\n    public readonly method: string,\n    public readonly timestamp: number,\n    public readonly startTime: number,\n    public readonly url?: string,\n    public readonly requestWrapper?: IRequestWrapper,\n    public readonly status: number = 0,\n    public readonly duration?: number,\n    public readonly responseWrapper?: IResponseWrapper,\n    public readonly error?: {\n      name: string;\n      message: string;\n    },\n    public readonly endTime?: number,\n  ) {}\n\n  toSerializable(): Record<string, any> {\n    const serialized: Record<string, any> = {\n      type: this.type,\n      method: this.method,\n      url: this.url,\n      timestamp: this.timestamp,\n      status: this.status,\n      duration: this.duration,\n      error: this.error,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      requestHeaders: this.requestWrapper?.headers,\n      requestBodySize: this.requestWrapper?.bodySize,\n      responseHeaders: this.responseWrapper?.headers,\n      responseBodySize: this.responseWrapper?.bodySize,\n    };\n\n    return Object.fromEntries(Object.entries(serialized).filter(([_, v]) => v !== undefined));\n  }\n}\n", "import { getGlobalScope } from './global-scope';\nimport { UUID } from './utils/uuid';\nimport { ILogger } from './logger';\nimport {\n  IRequestWrapper,\n  NetworkRequestEvent,\n  RequestWrapperFetch,\n  ResponseWrapperFetch,\n  RequestWrapperXhr,\n  ResponseWrapperXhr,\n  IResponseWrapper,\n  RequestInitSafe,\n  XMLHttpRequestBodyInitSafe,\n} from './network-request-event';\n\n// object that is added to each XHR instance so\n// that info can be set in xhr.open and retrieved in xhr.send\ntype AmplitudeAnalyticsEvent = {\n  method: string;\n  url: string | URL;\n  startTime: number;\n  durationStart: number;\n  status?: number;\n};\n\n/**\n * Typeguard function checks if an input is a Request object.\n */\nfunction isRequest(requestInfo: any): requestInfo is Request {\n  return typeof requestInfo === 'object' && requestInfo !== null && 'url' in requestInfo && 'method' in requestInfo;\n}\n\nexport type NetworkEventCallbackFn = (event: NetworkRequestEvent) => void;\n\nexport class NetworkEventCallback {\n  constructor(public readonly callback: (event: NetworkRequestEvent) => void, public readonly id: string = UUID()) {}\n}\n\ntype RequestUrlAndMethod = {\n  url: string | URL | undefined;\n  method: string | undefined;\n};\n\n// A narrowed down [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) type\n// that only includes the properties we need to access and adds the $$AmplitudeAnalyticsEvent property\n// Use great care when modifying this type, make sure you only use read-only properties and only add\n// what you need to access, nothing more.\ntype AmplitudeXMLHttpRequestSafe = {\n  $$AmplitudeAnalyticsEvent: AmplitudeAnalyticsEvent;\n  status: number;\n  getAllResponseHeaders: typeof XMLHttpRequest.prototype.getAllResponseHeaders;\n  getResponseHeader: typeof XMLHttpRequest.prototype.getResponseHeader;\n  addEventListener: (type: 'loadend', listener: () => void) => void;\n};\n\nexport class NetworkObserver {\n  private eventCallbacks: Map<string, NetworkEventCallback> = new Map();\n  // eslint-disable-next-line no-restricted-globals\n  private globalScope?: typeof globalThis;\n  private logger?: ILogger;\n  private isObserving = false;\n  constructor(logger?: ILogger) {\n    this.logger = logger;\n    const globalScope = getGlobalScope();\n    if (!NetworkObserver.isSupported()) {\n      /* istanbul ignore next */\n      return;\n    }\n    this.globalScope = globalScope;\n  }\n\n  static isSupported(): boolean {\n    const globalScope = getGlobalScope();\n    return !!globalScope && !!globalScope.fetch;\n  }\n\n  subscribe(eventCallback: NetworkEventCallback, logger?: ILogger) {\n    if (!this.logger) {\n      this.logger = logger;\n    }\n    this.eventCallbacks.set(eventCallback.id, eventCallback);\n    if (!this.isObserving) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalXhrOpen = this.globalScope?.XMLHttpRequest?.prototype?.open;\n      /* istanbul ignore next */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalXhrSend = this.globalScope?.XMLHttpRequest?.prototype?.send;\n      if (originalXhrOpen && originalXhrSend) {\n        this.observeXhr(originalXhrOpen, originalXhrSend);\n      }\n\n      /* istanbul ignore next */\n      const originalFetch = this.globalScope?.fetch;\n      /* istanbul ignore next */\n      if (originalFetch) {\n        this.observeFetch(originalFetch);\n      }\n\n      /* istanbul ignore next */\n      this.isObserving = true;\n    }\n  }\n\n  unsubscribe(eventCallback: NetworkEventCallback) {\n    this.eventCallbacks.delete(eventCallback.id);\n  }\n\n  protected triggerEventCallbacks(event: NetworkRequestEvent) {\n    this.eventCallbacks.forEach((callback) => {\n      try {\n        callback.callback(event);\n      } catch (err) {\n        // if the callback throws an error, we should catch it\n        // to avoid breaking the fetch promise chain\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while triggering event callbacks', err);\n      }\n    });\n  }\n\n  private handleNetworkRequestEvent(\n    requestType: 'fetch' | 'xhr',\n    requestInfo: RequestInfo | URL | RequestUrlAndMethod | undefined,\n    requestWrapper: IRequestWrapper | undefined,\n    responseWrapper: IResponseWrapper | undefined,\n    typedError: Error | undefined,\n    startTime?: number,\n    durationStart?: number,\n  ) {\n    /* istanbul ignore next */\n    if (startTime === undefined || durationStart === undefined) {\n      // if we reach this point, it means that the performance API is not supported\n      // so we can't construct a NetworkRequestEvent\n      return;\n    }\n\n    // parse the URL and Method\n    let url: string | undefined;\n    let method = 'GET';\n    if (isRequest(requestInfo)) {\n      url = requestInfo['url'];\n      method = requestInfo['method'];\n    } else {\n      url = requestInfo?.toString?.();\n    }\n    method = requestWrapper?.method || method;\n\n    let status, error;\n    if (responseWrapper) {\n      status = responseWrapper.status;\n    }\n\n    if (typedError) {\n      error = {\n        name: typedError.name || 'UnknownError',\n        message: typedError.message || 'An unknown error occurred',\n      };\n      status = 0;\n    }\n\n    const duration = Math.floor(performance.now() - durationStart);\n    const endTime = Math.floor(startTime + duration);\n\n    const requestEvent = new NetworkRequestEvent(\n      requestType,\n      method,\n      startTime, // timestamp and startTime are aliases\n      startTime,\n      url,\n      requestWrapper,\n      status,\n      duration,\n      responseWrapper,\n      error,\n      endTime,\n    );\n\n    this.triggerEventCallbacks(requestEvent);\n  }\n\n  private getTimestamps() {\n    /* istanbul ignore next */\n    return {\n      startTime: Date.now?.(),\n      durationStart: performance?.now?.(),\n    };\n  }\n\n  private observeFetch(\n    originalFetch: (requestInfo: RequestInfo | URL, requestInit?: RequestInit) => Promise<Response>,\n  ) {\n    /* istanbul ignore next */\n    if (!this.globalScope || !originalFetch) {\n      return;\n    }\n    /**\n     * IMPORTANT: This overrides window.fetch in browsers.\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of fetch\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    this.globalScope.fetch = async (requestInfo?: RequestInfo | URL, requestInit?: RequestInit) => {\n      // 1: capture the start time and duration start time before the fetch call\n      let timestamps;\n      try {\n        timestamps = this.getTimestamps();\n      } catch (error) {\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while retrieving timestamps', error);\n      }\n\n      // 2. make the call to the original fetch and preserve the response or error\n      let originalResponse, originalError;\n      try {\n        originalResponse = await originalFetch(requestInfo as RequestInfo | URL, requestInit);\n      } catch (err) {\n        // Capture error information\n        originalError = err;\n      }\n\n      // 3. call the handler after the fetch call is done\n      try {\n        this.handleNetworkRequestEvent(\n          'fetch',\n          requestInfo,\n          requestInit ? new RequestWrapperFetch(requestInit as RequestInitSafe) : undefined,\n          originalResponse ? new ResponseWrapperFetch(originalResponse) : undefined,\n          originalError as Error,\n          /* istanbul ignore next */\n          timestamps?.startTime,\n          /* istanbul ignore next */\n          timestamps?.durationStart,\n        );\n      } catch (err) {\n        // this catch shouldn't be reachable, but keep it here for safety\n        // because we're overriding the fetch function and better to be safe than sorry\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while handling fetch', err);\n      }\n\n      // 4. return the original response or throw the original error\n      if (originalResponse) {\n        // if the response is not undefined, return it\n        return originalResponse;\n      } else {\n        throw originalError;\n      }\n    };\n  }\n\n  private observeXhr(\n    originalXhrOpen:\n      | ((\n          method: string,\n          url: string | URL,\n          async?: boolean,\n          username?: string | null,\n          password?: string | null,\n        ) => void)\n      | undefined,\n    originalXhrSend: ((body?: Document | XMLHttpRequestBodyInit | null) => void) | undefined,\n  ) {\n    /* istanbul ignore next */\n    if (!this.globalScope || !originalXhrOpen || !originalXhrSend) {\n      return;\n    }\n\n    const xhrProto = this.globalScope.XMLHttpRequest.prototype;\n\n    const networkObserverContext = this as NetworkObserver;\n\n    /**\n     * IMPORTANT: This overrides window.XMLHttpRequest.prototype.open\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of xhr.open\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    xhrProto.open = function (...args: any[]) {\n      const xhrSafe = this as unknown as AmplitudeXMLHttpRequestSafe;\n      const [method, url] = args as [string, string | URL];\n      try {\n        /* istanbul ignore next */\n        xhrSafe.$$AmplitudeAnalyticsEvent = {\n          method,\n          url: url?.toString?.(),\n          ...networkObserverContext.getTimestamps(),\n        } as AmplitudeAnalyticsEvent;\n      } catch (err) {\n        /* istanbul ignore next */\n        networkObserverContext.logger?.debug('an unexpected error occurred while calling xhr open', err);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return originalXhrOpen.apply(xhrSafe, args as any);\n    };\n\n    /**\n     * IMPORTANT: This overrides window.XMLHttpRequest.prototype.send\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of xhr.send\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    // allow \"any\" type for args to reflect how it's used in the browser\n    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */\n    xhrProto.send = function (...args: any[]) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhrSafe = this as unknown as AmplitudeXMLHttpRequestSafe;\n      const body = args[0] as XMLHttpRequestBodyInitSafe;\n      const requestEvent = xhrSafe.$$AmplitudeAnalyticsEvent;\n\n      xhrSafe.addEventListener('loadend', function () {\n        try {\n          const responseHeaders = xhrSafe.getAllResponseHeaders();\n          const responseBodySize = xhrSafe.getResponseHeader('content-length');\n          const responseWrapper = new ResponseWrapperXhr(\n            xhrSafe.status,\n            responseHeaders,\n            /* istanbul ignore next */\n            responseBodySize ? parseInt(responseBodySize, 10) : undefined,\n          );\n          const requestWrapper = new RequestWrapperXhr(body);\n          requestEvent.status = xhrSafe.status;\n          networkObserverContext.handleNetworkRequestEvent(\n            'xhr',\n            { url: requestEvent.url, method: requestEvent.method },\n            requestWrapper,\n            responseWrapper,\n            undefined,\n            requestEvent.startTime,\n            requestEvent.durationStart,\n          );\n        } catch (err) {\n          /* istanbul ignore next */\n          networkObserverContext.logger?.debug('an unexpected error occurred while handling xhr send', err);\n        }\n      });\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */\n      return originalXhrSend.apply(xhrSafe, args as any);\n    };\n  }\n}\n\n// singleton instance of NetworkObserver\nexport const networkObserver = new NetworkObserver();\n", "import {\n  PageTrackingHistoryChanges,\n  PageTrackingOptions,\n  PageTrackingTrackOn,\n  ElementInteractionsOptions,\n  BrowserOptions,\n  AutocaptureOptions,\n  AttributionOptions,\n  NetworkTrackingOptions,\n} from '@amplitude/analytics-core';\n\n/**\n * A subset of AutocaptureOptions that includes the autocapture features that\n * are made available to users by default (even if \"config.autocapture === undefined\")\n */\ntype AutocaptureOptionsDefaultAvailable = Pick<\n  AutocaptureOptions,\n  'pageViews' | 'sessions' | 'fileDownloads' | 'formInteractions' | 'attribution'\n>;\n\n/**\n * Returns false if autocapture === false or if autocapture[event],\n * otherwise returns true (even if \"config.autocapture === undefined\")\n */\nconst isTrackingEnabled = (\n  autocapture: AutocaptureOptionsDefaultAvailable | boolean | undefined,\n  event: keyof AutocaptureOptionsDefaultAvailable,\n) => {\n  if (typeof autocapture === 'boolean') {\n    return autocapture;\n  }\n\n  if (autocapture?.[event] === false) {\n    return false;\n  }\n\n  return true;\n};\n\nexport const isAttributionTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) =>\n  isTrackingEnabled(autocapture, 'attribution');\n\nexport const isFileDownloadTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) =>\n  isTrackingEnabled(autocapture, 'fileDownloads');\n\nexport const isFormInteractionTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) =>\n  isTrackingEnabled(autocapture, 'formInteractions');\n\nexport const isPageViewTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) =>\n  isTrackingEnabled(autocapture, 'pageViews');\n\nexport const isSessionTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) =>\n  isTrackingEnabled(autocapture, 'sessions');\n\n/**\n * Returns true if\n * 1. if autocapture.networkTracking === true\n * 2. if autocapture.networkTracking === object\n * otherwise returns false\n */\nexport const isNetworkTrackingEnabled = (autocapture: AutocaptureOptions | boolean | undefined) => {\n  if (\n    typeof autocapture === 'object' &&\n    (autocapture.networkTracking === true || typeof autocapture.networkTracking === 'object')\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Returns true if\n * 1. autocapture === true\n * 2. if autocapture.elementInteractions === true\n * 3. if autocapture.elementInteractions === object\n * otherwise returns false\n */\nexport const isElementInteractionsEnabled = (autocapture: AutocaptureOptions | boolean | undefined): boolean => {\n  if (typeof autocapture === 'boolean') {\n    return autocapture;\n  }\n\n  if (\n    typeof autocapture === 'object' &&\n    (autocapture.elementInteractions === true || typeof autocapture.elementInteractions === 'object')\n  ) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const getElementInteractionsConfig = (config: BrowserOptions): ElementInteractionsOptions | undefined => {\n  if (\n    isElementInteractionsEnabled(config.autocapture) &&\n    typeof config.autocapture === 'object' &&\n    typeof config.autocapture.elementInteractions === 'object'\n  ) {\n    return config.autocapture.elementInteractions;\n  }\n  return undefined;\n};\n\nexport const getNetworkTrackingConfig = (config: BrowserOptions): NetworkTrackingOptions | undefined => {\n  if (isNetworkTrackingEnabled(config.autocapture)) {\n    if (typeof config.autocapture === 'object' && typeof config.autocapture.networkTracking === 'object') {\n      return config.autocapture.networkTracking;\n    } else if (config.networkTrackingOptions) {\n      return config.networkTrackingOptions;\n    }\n  }\n  return;\n};\n\nexport const getPageViewTrackingConfig = (config: BrowserOptions): PageTrackingOptions => {\n  let trackOn: PageTrackingTrackOn | undefined = () => false;\n  let trackHistoryChanges: PageTrackingHistoryChanges | undefined = undefined;\n  let eventType: string | undefined;\n  const pageCounter = config.pageCounter;\n\n  const isDefaultPageViewTrackingEnabled = isPageViewTrackingEnabled(config.defaultTracking);\n  if (isDefaultPageViewTrackingEnabled) {\n    trackOn = undefined;\n    eventType = undefined;\n\n    if (\n      config.defaultTracking &&\n      typeof config.defaultTracking === 'object' &&\n      config.defaultTracking.pageViews &&\n      typeof config.defaultTracking.pageViews === 'object'\n    ) {\n      if ('trackOn' in config.defaultTracking.pageViews) {\n        trackOn = config.defaultTracking.pageViews.trackOn;\n      }\n\n      if ('trackHistoryChanges' in config.defaultTracking.pageViews) {\n        trackHistoryChanges = config.defaultTracking.pageViews.trackHistoryChanges;\n      }\n\n      if ('eventType' in config.defaultTracking.pageViews && config.defaultTracking.pageViews.eventType) {\n        eventType = config.defaultTracking.pageViews.eventType;\n      }\n    }\n  }\n\n  return {\n    trackOn,\n    trackHistoryChanges,\n    eventType,\n    pageCounter,\n  };\n};\n\nexport const getAttributionTrackingConfig = (config: BrowserOptions): AttributionOptions => {\n  if (\n    isAttributionTrackingEnabled(config.defaultTracking) &&\n    config.defaultTracking &&\n    typeof config.defaultTracking === 'object' &&\n    config.defaultTracking.attribution &&\n    typeof config.defaultTracking.attribution === 'object'\n  ) {\n    return {\n      ...config.defaultTracking.attribution,\n    };\n  }\n\n  return {};\n};\n", "import { Result, AmplitudeReturn } from '@amplitude/analytics-core';\n\ninterface ProxyItem {\n  name: string;\n  args: any[];\n  resolve?: (promise: Promise<Result>) => void;\n}\n\ntype QueueProxy = Array<ProxyItem>;\n\ninterface InstanceProxy {\n  _q: QueueProxy;\n  _iq: Record<string, InstanceProxy>;\n}\n\n/**\n * Applies the proxied functions on the proxied amplitude snippet to an instance of the real object.\n * @ignore\n */\nexport const runQueuedFunctions = (instance: object, queue: QueueProxy) => {\n  convertProxyObjectToRealObject(instance, queue);\n};\n\n/**\n * Applies the proxied functions on the proxied object to an instance of the real object.\n * Used to convert proxied Identify and Revenue objects.\n */\nexport const convertProxyObjectToRealObject = <T>(instance: T, queue: QueueProxy): T => {\n  for (let i = 0; i < queue.length; i++) {\n    const { name, args, resolve } = queue[i];\n    const fn = instance && instance[name as keyof T];\n    if (typeof fn === 'function') {\n      const result = fn.apply(instance, args) as AmplitudeReturn<Result>;\n      if (typeof resolve === 'function') {\n        resolve(result?.promise);\n      }\n    }\n  }\n  return instance;\n};\n\n/**\n * Check if the param is snippet proxy\n */\nexport const isInstanceProxy = (instance: unknown): instance is InstanceProxy => {\n  const instanceProxy = instance as InstanceProxy;\n  return instanceProxy && instanceProxy._q !== undefined;\n};\n", "export const VERSION = '2.17.10';\n", "export const LIBPREFIX = 'amplitude-ts';\n", "import { UUID, getLanguage, Event, BeforePlugin, BrowserConfig } from '@amplitude/analytics-core';\nimport { VERSION } from '../version';\nimport { LIBPREFIX } from '../lib-prefix';\n\nconst BROWSER_PLATFORM = 'Web';\nconst IP_ADDRESS = '$remote';\nexport class Context implements BeforePlugin {\n  name = '@amplitude/plugin-context-browser';\n  type = 'before' as const;\n\n  // this.config is defined in setup() which will always be called first\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: BrowserConfig;\n  userAgent: string | undefined;\n  library = `${LIBPREFIX}/${VERSION}`;\n\n  constructor() {\n    /* istanbul ignore else */\n    if (typeof navigator !== 'undefined') {\n      this.userAgent = navigator.userAgent;\n    }\n  }\n\n  setup(config: BrowserConfig): Promise<undefined> {\n    this.config = config;\n\n    return Promise.resolve(undefined);\n  }\n\n  async execute(context: Event): Promise<Event> {\n    const time = new Date().getTime();\n    const lastEventId = this.config.lastEventId ?? -1;\n    const nextEventId = context.event_id ?? lastEventId + 1;\n    this.config.lastEventId = nextEventId;\n    if (!context.time) {\n      this.config.lastEventTime = time;\n    }\n\n    const event: Event = {\n      user_id: this.config.userId,\n      device_id: this.config.deviceId,\n      session_id: this.config.sessionId,\n      time,\n      ...(this.config.appVersion && { app_version: this.config.appVersion }),\n      ...(this.config.trackingOptions.platform && { platform: BROWSER_PLATFORM }),\n      ...(this.config.trackingOptions.language && { language: getLanguage() }),\n      ...(this.config.trackingOptions.ipAddress && { ip: IP_ADDRESS }),\n      insert_id: UUID(),\n      partner_id: this.config.partnerId,\n      plan: this.config.plan,\n      ...(this.config.ingestionMetadata && {\n        ingestion_metadata: {\n          source_name: this.config.ingestionMetadata.sourceName,\n          source_version: this.config.ingestionMetadata.sourceVersion,\n        },\n      }),\n      ...context,\n      event_id: nextEventId,\n      library: this.library,\n      user_agent: this.userAgent,\n    };\n    return event;\n  }\n}\n", "import { Storage as AmplitudeStorage } from '@amplitude/analytics-core';\n\nexport class BrowserStorage<T> implements AmplitudeStorage<T> {\n  constructor(private storage?: Storage) {}\n\n  async isEnabled(): Promise<boolean> {\n    /* istanbul ignore if */\n    if (!this.storage) {\n      return false;\n    }\n\n    const random = String(Date.now());\n    const testStorage = new BrowserStorage<string>(this.storage);\n    const testKey = 'AMP_TEST';\n    try {\n      await testStorage.set(testKey, random);\n      const value = await testStorage.get(testKey);\n      return value === random;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    } finally {\n      await testStorage.remove(testKey);\n    }\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    try {\n      const value = await this.getRaw(key);\n      if (!value) {\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(value);\n    } catch {\n      console.error(`[Amplitude] Error: Could not get value from storage`);\n      return undefined;\n    }\n  }\n\n  async getRaw(key: string): Promise<string | undefined> {\n    return this.storage?.getItem(key) || undefined;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    try {\n      this.storage?.setItem(key, JSON.stringify(value));\n    } catch {\n      //\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    try {\n      this.storage?.removeItem(key);\n    } catch {\n      //\n    }\n  }\n\n  async reset(): Promise<void> {\n    try {\n      this.storage?.clear();\n    } catch {\n      //\n    }\n  }\n}\n", "import { getGlobalScope, ILogger } from '@amplitude/analytics-core';\nimport { BrowserStorage } from './browser-storage';\n\nconst MAX_ARRAY_LENGTH = 1000;\n\ninterface LocalStorageOptions {\n  loggerProvider?: ILogger;\n}\nexport class LocalStorage<T> extends BrowserStorage<T> {\n  loggerProvider?: ILogger;\n\n  constructor(config?: LocalStorageOptions) {\n    let localStorage;\n\n    try {\n      localStorage = getGlobalScope()?.localStorage;\n    } catch (e) {\n      config?.loggerProvider?.debug(`Failed to access localStorage. error=${JSON.stringify(e)}`);\n      localStorage = undefined;\n    }\n    super(localStorage);\n    this.loggerProvider = config?.loggerProvider;\n  }\n\n  async set(key: string, value: T): Promise<void> {\n    if (Array.isArray(value) && value.length > MAX_ARRAY_LENGTH) {\n      const droppedEventsCount = value.length - MAX_ARRAY_LENGTH;\n      await super.set(key, value.slice(0, MAX_ARRAY_LENGTH) as T);\n      this.loggerProvider?.error(\n        `Failed to save ${droppedEventsCount} events because the queue length exceeded ${MAX_ARRAY_LENGTH}.`,\n      );\n    } else {\n      await super.set(key, value);\n    }\n  }\n}\n", "import { getGlobalScope } from '@amplitude/analytics-core';\nimport { BrowserStorage } from './browser-storage';\n\nexport class SessionStorage<T> extends BrowserStorage<T> {\n  constructor() {\n    super(getGlobalScope()?.sessionStorage);\n  }\n}\n", "import { BaseTransport, Payload, Response, Transport } from '@amplitude/analytics-core';\n\nexport class XHRTransport extends BaseTransport implements Transport {\n  private state = {\n    done: 4,\n  };\n\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    return new Promise((resolve, reject) => {\n      /* istanbul ignore if */\n      if (typeof XMLHttpRequest === 'undefined') {\n        reject(new Error('XHRTransport is not supported.'));\n      }\n\n      const xhr = new XMLHttpRequest();\n      xhr.open('POST', serverUrl, true);\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === this.state.done) {\n          const responseText = xhr.responseText;\n          try {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            resolve(this.buildResponse(JSON.parse(responseText)));\n          } catch {\n            resolve(this.buildResponse({ code: xhr.status }));\n          }\n        }\n      };\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.setRequestHeader('Accept', '*/*');\n      xhr.send(JSON.stringify(payload));\n    });\n  }\n}\n", "import { BaseTransport, getGlobalScope, Payload, Response, Transport } from '@amplitude/analytics-core';\n\nexport class SendBeaconTransport extends BaseTransport implements Transport {\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    return new Promise((resolve, reject) => {\n      const globalScope = getGlobalScope();\n      /* istanbul ignore if */\n      if (!globalScope?.navigator.sendBeacon) {\n        throw new Error('SendBeaconTransport is not supported');\n      }\n      try {\n        const data = JSON.stringify(payload);\n        const success = globalScope.navigator.sendBeacon(serverUrl, JSON.stringify(payload));\n        if (success) {\n          return resolve(\n            this.buildResponse({\n              code: 200,\n              events_ingested: payload.events.length,\n              payload_size_bytes: data.length,\n              server_upload_time: Date.now(),\n            }),\n          );\n        }\n        return resolve(this.buildResponse({ code: 500 }));\n      } catch (e) {\n        reject(e);\n      }\n    });\n  }\n}\n", "import { getOldCookieName, Storage, UserSession } from '@amplitude/analytics-core';\n\nexport const parseLegacyCookies = async (\n  apiKey: string,\n  cookieStorage: Storage<UserSession>,\n  deleteLegacyCookies = true,\n): Promise<UserSession> => {\n  const cookieName = getOldCookieName(apiKey);\n  const cookies = await cookieStorage.getRaw(cookieName);\n  if (!cookies) {\n    return {\n      optOut: false,\n    };\n  }\n  if (deleteLegacyCookies) {\n    await cookieStorage.remove(cookieName);\n  }\n  const [deviceId, userId, optOut, sessionId, lastEventTime, lastEventId] = cookies.split('.');\n  return {\n    deviceId,\n    userId: decode(userId),\n    sessionId: parseTime(sessionId),\n    lastEventId: parseTime(lastEventId),\n    lastEventTime: parseTime(lastEventTime),\n    optOut: Boolean(optOut),\n  };\n};\n\nexport const parseTime = (num: string) => {\n  const integer = parseInt(num, 32);\n  if (isNaN(integer)) {\n    return undefined;\n  }\n  return integer;\n};\n\nexport const decode = (value?: string): string | undefined => {\n  if (!atob || !escape || !value) {\n    return undefined;\n  }\n  try {\n    return decodeURIComponent(escape(atob(value)));\n  } catch {\n    return undefined;\n  }\n};\n", "import { IdentityStorageType, ServerZoneType } from '@amplitude/analytics-core';\n\nexport const DEFAULT_EVENT_PREFIX = '[Amplitude]';\n\nexport const DEFAULT_PAGE_VIEW_EVENT = `${DEFAULT_EVENT_PREFIX} Page Viewed`;\nexport const DEFAULT_FORM_START_EVENT = `${DEFAULT_EVENT_PREFIX} Form Started`;\nexport const DEFAULT_FORM_SUBMIT_EVENT = `${DEFAULT_EVENT_PREFIX} Form Submitted`;\nexport const DEFAULT_FILE_DOWNLOAD_EVENT = `${DEFAULT_EVENT_PREFIX} File Downloaded`;\nexport const DEFAULT_SESSION_START_EVENT = 'session_start';\nexport const DEFAULT_SESSION_END_EVENT = 'session_end';\n\nexport const FILE_EXTENSION = `${DEFAULT_EVENT_PREFIX} File Extension`;\nexport const FILE_NAME = `${DEFAULT_EVENT_PREFIX} File Name`;\nexport const LINK_ID = `${DEFAULT_EVENT_PREFIX} Link ID`;\nexport const LINK_TEXT = `${DEFAULT_EVENT_PREFIX} Link Text`;\nexport const LINK_URL = `${DEFAULT_EVENT_PREFIX} Link URL`;\n\nexport const FORM_ID = `${DEFAULT_EVENT_PREFIX} Form ID`;\nexport const FORM_NAME = `${DEFAULT_EVENT_PREFIX} Form Name`;\nexport const FORM_DESTINATION = `${DEFAULT_EVENT_PREFIX} Form Destination`;\n\nexport const DEFAULT_IDENTITY_STORAGE: IdentityStorageType = 'cookie';\nexport const DEFAULT_SERVER_ZONE: ServerZoneType = 'US';\n", "import {\n  Config,\n  Logger,\n  ILogger,\n  LogLevel,\n  Event,\n  Storage,\n  IngestionMetadata,\n  ServerZoneType,\n  OfflineDisabled,\n  Plan,\n  IdentityStorageType,\n  TransportType,\n  MemoryStorage,\n  UUID,\n  CookieStorage,\n  getCookieName,\n  FetchTransport,\n  getQueryParams,\n  UserSession,\n  BrowserOptions,\n  BrowserConfig as IBrowserConfig,\n  DefaultTrackingOptions,\n  TrackingOptions,\n  AutocaptureOptions,\n  CookieOptions,\n  NetworkTrackingOptions,\n} from '@amplitude/analytics-core';\n\nimport { LocalStorage } from './storage/local-storage';\nimport { SessionStorage } from './storage/session-storage';\nimport { XHRTransport } from './transports/xhr';\nimport { SendBeaconTransport } from './transports/send-beacon';\nimport { parseLegacyCookies } from './cookie-migration';\nimport { DEFAULT_IDENTITY_STORAGE, DEFAULT_SERVER_ZONE } from './constants';\nimport { AmplitudeBrowser } from './browser-client';\nimport { VERSION } from './version';\n\n// Exported for testing purposes only. Do not expose to public interface.\nexport class BrowserConfig extends Config implements IBrowserConfig {\n  public readonly version = VERSION;\n  protected _cookieStorage: Storage<UserSession>;\n  protected _deviceId?: string;\n  protected _lastEventId?: number;\n  protected _lastEventTime?: number;\n  protected _optOut = false;\n  protected _sessionId?: number;\n  protected _userId?: string;\n  protected _pageCounter?: number;\n  protected _debugLogsEnabled?: boolean;\n  constructor(\n    public apiKey: string,\n    public appVersion?: string,\n    cookieStorage: Storage<UserSession> = new MemoryStorage(),\n    public cookieOptions: CookieOptions = {\n      domain: '',\n      expiration: 365,\n      sameSite: 'Lax' as const,\n      secure: false,\n      upgrade: true,\n    },\n    public defaultTracking?: boolean | DefaultTrackingOptions,\n    public autocapture?: boolean | AutocaptureOptions,\n    deviceId?: string,\n    public flushIntervalMillis: number = 1000,\n    public flushMaxRetries: number = 5,\n    public flushQueueSize: number = 30,\n    public identityStorage: IdentityStorageType = DEFAULT_IDENTITY_STORAGE,\n    public ingestionMetadata?: IngestionMetadata,\n    public instanceName?: string,\n    lastEventId?: number,\n    lastEventTime?: number,\n    public loggerProvider: ILogger = new Logger(),\n    public logLevel: LogLevel = LogLevel.Warn,\n    public minIdLength?: number,\n    public offline: boolean | typeof OfflineDisabled = false,\n    optOut = false,\n    public partnerId?: string,\n    public plan?: Plan,\n    public serverUrl: string = '',\n    public serverZone: ServerZoneType = DEFAULT_SERVER_ZONE,\n    sessionId?: number,\n    public sessionTimeout: number = 30 * 60 * 1000,\n    public storageProvider: Storage<Event[]> = new LocalStorage({ loggerProvider }),\n    public trackingOptions: Required<TrackingOptions> = {\n      ipAddress: true,\n      language: true,\n      platform: true,\n    },\n    public transport: 'fetch' | 'xhr' | 'beacon' = 'fetch',\n    public useBatch: boolean = false,\n    public fetchRemoteConfig: boolean = true,\n    userId?: string,\n    pageCounter?: number,\n    debugLogsEnabled?: boolean,\n    public networkTrackingOptions?: NetworkTrackingOptions,\n  ) {\n    super({ apiKey, storageProvider, transportProvider: createTransport(transport) });\n    this._cookieStorage = cookieStorage;\n    this.deviceId = deviceId;\n    this.lastEventId = lastEventId;\n    this.lastEventTime = lastEventTime;\n    this.optOut = optOut;\n    this.sessionId = sessionId;\n    this.pageCounter = pageCounter;\n    this.userId = userId;\n    this.debugLogsEnabled = debugLogsEnabled;\n    this.loggerProvider.enable(debugLogsEnabled ? LogLevel.Debug : this.logLevel);\n    this.networkTrackingOptions = networkTrackingOptions;\n  }\n\n  get cookieStorage() {\n    return this._cookieStorage;\n  }\n\n  set cookieStorage(cookieStorage: Storage<UserSession>) {\n    if (this._cookieStorage !== cookieStorage) {\n      this._cookieStorage = cookieStorage;\n      this.updateStorage();\n    }\n  }\n\n  get deviceId() {\n    return this._deviceId;\n  }\n\n  set deviceId(deviceId: string | undefined) {\n    if (this._deviceId !== deviceId) {\n      this._deviceId = deviceId;\n      this.updateStorage();\n    }\n  }\n\n  get userId() {\n    return this._userId;\n  }\n\n  set userId(userId: string | undefined) {\n    if (this._userId !== userId) {\n      this._userId = userId;\n      this.updateStorage();\n    }\n  }\n\n  get sessionId() {\n    return this._sessionId;\n  }\n\n  set sessionId(sessionId: number | undefined) {\n    if (this._sessionId !== sessionId) {\n      this._sessionId = sessionId;\n      this.updateStorage();\n    }\n  }\n\n  get optOut() {\n    return this._optOut;\n  }\n\n  set optOut(optOut: boolean) {\n    if (this._optOut !== optOut) {\n      this._optOut = optOut;\n      this.updateStorage();\n    }\n  }\n\n  get lastEventTime() {\n    return this._lastEventTime;\n  }\n\n  set lastEventTime(lastEventTime: number | undefined) {\n    if (this._lastEventTime !== lastEventTime) {\n      this._lastEventTime = lastEventTime;\n      this.updateStorage();\n    }\n  }\n\n  get lastEventId() {\n    return this._lastEventId;\n  }\n\n  set lastEventId(lastEventId: number | undefined) {\n    if (this._lastEventId !== lastEventId) {\n      this._lastEventId = lastEventId;\n      this.updateStorage();\n    }\n  }\n\n  get pageCounter() {\n    return this._pageCounter;\n  }\n\n  set pageCounter(pageCounter: number | undefined) {\n    if (this._pageCounter !== pageCounter) {\n      this._pageCounter = pageCounter;\n      this.updateStorage();\n    }\n  }\n\n  set debugLogsEnabled(debugLogsEnabled: boolean | undefined) {\n    if (this._debugLogsEnabled !== debugLogsEnabled) {\n      this._debugLogsEnabled = debugLogsEnabled;\n      this.updateStorage();\n    }\n  }\n\n  private updateStorage() {\n    const cache = {\n      deviceId: this._deviceId,\n      userId: this._userId,\n      sessionId: this._sessionId,\n      optOut: this._optOut,\n      lastEventTime: this._lastEventTime,\n      lastEventId: this._lastEventId,\n      pageCounter: this._pageCounter,\n      debugLogsEnabled: this._debugLogsEnabled,\n    };\n    void this.cookieStorage.set(getCookieName(this.apiKey), cache);\n  }\n}\n\nexport const useBrowserConfig = async (\n  apiKey: string,\n  options: BrowserOptions = {},\n  amplitudeInstance: AmplitudeBrowser,\n): Promise<IBrowserConfig> => {\n  // Step 1: Create identity storage instance\n  const identityStorage = options.identityStorage || DEFAULT_IDENTITY_STORAGE;\n  const cookieOptions = {\n    domain:\n      identityStorage !== DEFAULT_IDENTITY_STORAGE ? '' : options.cookieOptions?.domain ?? (await getTopLevelDomain()),\n    expiration: 365,\n    sameSite: 'Lax' as const,\n    secure: false,\n    upgrade: true,\n    ...options.cookieOptions,\n  };\n  const cookieStorage = createCookieStorage<UserSession>(options.identityStorage, cookieOptions);\n\n  // Step 1: Parse cookies using identity storage instance\n  const legacyCookies = await parseLegacyCookies(apiKey, cookieStorage, options.cookieOptions?.upgrade ?? true);\n  const previousCookies = await cookieStorage.get(getCookieName(apiKey));\n  const queryParams = getQueryParams();\n\n  // Step 3: Reconcile user identity\n  const deviceId =\n    options.deviceId ??\n    queryParams.ampDeviceId ??\n    queryParams.deviceId ??\n    previousCookies?.deviceId ??\n    legacyCookies.deviceId ??\n    UUID();\n  const lastEventId = previousCookies?.lastEventId ?? legacyCookies.lastEventId;\n  const lastEventTime = previousCookies?.lastEventTime ?? legacyCookies.lastEventTime;\n  const optOut = options.optOut ?? previousCookies?.optOut ?? legacyCookies.optOut;\n  const sessionId = previousCookies?.sessionId ?? legacyCookies.sessionId;\n  const userId = options.userId ?? previousCookies?.userId ?? legacyCookies.userId;\n  amplitudeInstance.previousSessionDeviceId = previousCookies?.deviceId ?? legacyCookies.deviceId;\n  amplitudeInstance.previousSessionUserId = previousCookies?.userId ?? legacyCookies.userId;\n\n  const trackingOptions = {\n    ipAddress: options.trackingOptions?.ipAddress ?? true,\n    language: options.trackingOptions?.language ?? true,\n    platform: options.trackingOptions?.platform ?? true,\n  };\n  const pageCounter = previousCookies?.pageCounter;\n  const debugLogsEnabled = previousCookies?.debugLogsEnabled;\n\n  // Override default tracking options if autocapture is set\n  if (options.autocapture !== undefined) {\n    options.defaultTracking = options.autocapture;\n  }\n\n  const browserConfig = new BrowserConfig(\n    apiKey,\n    options.appVersion,\n    cookieStorage,\n    cookieOptions,\n    options.defaultTracking,\n    options.autocapture,\n    deviceId,\n    options.flushIntervalMillis,\n    options.flushMaxRetries,\n    options.flushQueueSize,\n    identityStorage,\n    options.ingestionMetadata,\n    options.instanceName,\n    lastEventId,\n    lastEventTime,\n    options.loggerProvider,\n    options.logLevel,\n    options.minIdLength,\n    options.offline,\n    optOut,\n    options.partnerId,\n    options.plan,\n    options.serverUrl,\n    options.serverZone,\n    sessionId,\n    options.sessionTimeout,\n    options.storageProvider,\n    trackingOptions,\n    options.transport,\n    options.useBatch,\n    options.fetchRemoteConfig,\n    userId,\n    pageCounter,\n    debugLogsEnabled,\n    options.networkTrackingOptions,\n  );\n\n  if (!(await browserConfig.storageProvider.isEnabled())) {\n    browserConfig.loggerProvider.warn(\n      `Storage provider ${browserConfig.storageProvider.constructor.name} is not enabled. Falling back to MemoryStorage.`,\n    );\n    browserConfig.storageProvider = new MemoryStorage();\n  }\n\n  return browserConfig;\n};\n\nexport const createCookieStorage = <T>(\n  identityStorage: IdentityStorageType = DEFAULT_IDENTITY_STORAGE,\n  cookieOptions: CookieOptions = {},\n) => {\n  switch (identityStorage) {\n    case 'localStorage':\n      return new LocalStorage<T>();\n    case 'sessionStorage':\n      return new SessionStorage<T>();\n    case 'none':\n      return new MemoryStorage<T>();\n    case 'cookie':\n    default:\n      return new CookieStorage<T>({\n        ...cookieOptions,\n        expirationDays: cookieOptions.expiration,\n      });\n  }\n};\n\nexport const createTransport = (transport?: TransportType) => {\n  if (transport === 'xhr') {\n    return new XHRTransport();\n  }\n  if (transport === 'beacon') {\n    return new SendBeaconTransport();\n  }\n  return new FetchTransport();\n};\n\nexport const getTopLevelDomain = async (url?: string) => {\n  if (\n    !(await new CookieStorage<number>().isEnabled()) ||\n    (!url && (typeof location === 'undefined' || !location.hostname))\n  ) {\n    return '';\n  }\n\n  const host = url ?? location.hostname;\n  const parts = host.split('.');\n  const levels = [];\n  const storageKey = 'AMP_TLDTEST';\n\n  for (let i = parts.length - 2; i >= 0; --i) {\n    levels.push(parts.slice(i).join('.'));\n  }\n  for (let i = 0; i < levels.length; i++) {\n    const domain = levels[i];\n    const options = { domain: '.' + domain };\n    const storage = new CookieStorage<number>(options);\n    await storage.set(storageKey, 1);\n    const value = await storage.get(storageKey);\n    if (value) {\n      await storage.remove(storageKey);\n      return '.' + domain;\n    }\n  }\n\n  return '';\n};\n", "/* eslint-disable no-restricted-globals */\n/* Only file allowed to access to globalThis, window, self */\n\nexport const getGlobalScope = (): typeof globalThis | undefined => {\n  // This should only be used for integrations with Amplitude that are not running in a browser environment\n  //   We need to specify the name of the global variable as a string to prevent it from being minified\n  const ampIntegrationContextName = 'ampIntegrationContext' as keyof typeof globalThis;\n  if (typeof globalThis !== 'undefined' && typeof globalThis[ampIntegrationContextName] !== 'undefined') {\n    return globalThis[ampIntegrationContextName] as typeof globalThis;\n  }\n  if (typeof globalThis !== 'undefined') {\n    return globalThis;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n  return undefined;\n};\n", "import { getGlobalScope } from './global-scope';\n\nexport const getQueryParams = (): Record<string, string | undefined> => {\n  const globalScope = getGlobalScope();\n  /* istanbul ignore if */\n  if (!globalScope?.location?.search) {\n    return {};\n  }\n  const pairs = globalScope.location.search.substring(1).split('&').filter(Boolean);\n  const params = pairs.reduce<Record<string, string | undefined>>((acc, curr) => {\n    const query = curr.split('=', 2);\n    const key = tryDecodeURIComponent(query[0]);\n    const value = tryDecodeURIComponent(query[1]);\n    if (!value) {\n      return acc;\n    }\n    acc[key] = value;\n    return acc;\n  }, {});\n  return params;\n};\n\nexport const tryDecodeURIComponent = (value = '') => {\n  try {\n    return decodeURIComponent(value);\n  } catch {\n    return '';\n  }\n};\n", "import { Campaign } from '@amplitude/analytics-types';\n\nexport const UTM_CAMPAIGN = 'utm_campaign';\nexport const UTM_CONTENT = 'utm_content';\nexport const UTM_ID = 'utm_id';\nexport const UTM_MEDIUM = 'utm_medium';\nexport const UTM_SOURCE = 'utm_source';\nexport const UTM_TERM = 'utm_term';\n\nexport const DCLID = 'dclid';\nexport const FBCLID = 'fbclid';\nexport const GBRAID = 'gbraid';\nexport const GCLID = 'gclid';\nexport const KO_CLICK_ID = 'ko_click_id';\nexport const LI_FAT_ID = 'li_fat_id';\nexport const MSCLKID = 'msclkid';\nexport const RDT_CID = 'rtd_cid';\nexport const TTCLID = 'ttclid';\nexport const TWCLID = 'twclid';\nexport const WBRAID = 'wbraid';\n\nexport const EMPTY_VALUE = 'EMPTY';\n\nexport const BASE_CAMPAIGN: Campaign = {\n  utm_campaign: undefined,\n  utm_content: undefined,\n  utm_id: undefined,\n  utm_medium: undefined,\n  utm_source: undefined,\n  utm_term: undefined,\n  referrer: undefined,\n  referring_domain: undefined,\n  dclid: undefined,\n  gbraid: undefined,\n  gclid: undefined,\n  fbclid: undefined,\n  ko_click_id: undefined,\n  li_fat_id: undefined,\n  msclkid: undefined,\n  rtd_cid: undefined,\n  ttclid: undefined,\n  twclid: undefined,\n  wbraid: undefined,\n};\n\nexport const MKTG = 'MKTG';\n", "import { getQueryParams } from '../query-params';\nimport {\n  UTM_CAMPAIGN,\n  UTM_CONTENT,\n  UTM_MEDIUM,\n  UTM_SOURCE,\n  UTM_TERM,\n  GCLID,\n  FBCLID,\n  BASE_CAMPAIGN,\n  DCLID,\n  MSCLKID,\n  RDT_CID,\n  TWCLID,\n  TTCLID,\n  KO_CLICK_ID,\n  LI_FAT_ID,\n  GBRAID,\n  WBRAID,\n  UTM_ID,\n} from './constants';\nimport {\n  Campaign,\n  CampaignParser as ICampaignParser,\n  ClickIdParameters,\n  ReferrerParameters,\n  UTMParameters,\n} from '@amplitude/analytics-types';\n\nexport class CampaignParser implements ICampaignParser {\n  async parse(): Promise<Campaign> {\n    return {\n      ...BASE_CAMPAIGN,\n      ...this.getUtmParam(),\n      ...this.getReferrer(),\n      ...this.getClickIds(),\n    } as Campaign;\n  }\n\n  getUtmParam(): UTMParameters {\n    const params = getQueryParams();\n\n    const utmCampaign = params[UTM_CAMPAIGN];\n    const utmContent = params[UTM_CONTENT];\n    const utmId = params[UTM_ID];\n    const utmMedium = params[UTM_MEDIUM];\n    const utmSource = params[UTM_SOURCE];\n    const utmTerm = params[UTM_TERM];\n\n    return {\n      utm_campaign: utmCampaign,\n      utm_content: utmContent,\n      utm_id: utmId,\n      utm_medium: utmMedium,\n      utm_source: utmSource,\n      utm_term: utmTerm,\n    };\n  }\n\n  getReferrer(): ReferrerParameters {\n    const data: ReferrerParameters = {\n      referrer: undefined,\n      referring_domain: undefined,\n    };\n    try {\n      data.referrer = document.referrer || undefined;\n      data.referring_domain = data.referrer?.split('/')[2] ?? undefined;\n    } catch {\n      // nothing to track\n    }\n    return data;\n  }\n\n  getClickIds(): ClickIdParameters {\n    const params = getQueryParams();\n    return {\n      [DCLID]: params[DCLID],\n      [FBCLID]: params[FBCLID],\n      [GBRAID]: params[GBRAID],\n      [GCLID]: params[GCLID],\n      [KO_CLICK_ID]: params[KO_CLICK_ID],\n      [LI_FAT_ID]: params[LI_FAT_ID],\n      [MSCLKID]: params[MSCLKID],\n      [RDT_CID]: params[RDT_CID],\n      [TTCLID]: params[TTCLID],\n      [TWCLID]: params[TWCLID],\n      [WBRAID]: params[WBRAID],\n    };\n  }\n}\n", "import { AMPLITUDE_PREFIX } from '@amplitude/analytics-core';\n\nexport const getCookieName = (apiKey: string, postKey = '', limit = 10) => {\n  return [AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');\n};\n\nexport const getOldCookieName = (apiKey: string) => {\n  return `${AMPLITUDE_PREFIX.toLowerCase()}_${apiKey.substring(0, 6)}`;\n};\n", "import { createIdentifyEvent, Identify } from '@amplitude/analytics-core';\nimport {\n  Storage,\n  Campaign,\n  CampaignParser as ICampaignParser,\n  CampaignTracker as ICampaignTracker,\n  CampaignTrackFunction,\n  CampaignTrackerOptions,\n  BaseEvent,\n} from '@amplitude/analytics-types';\nimport { getCookieName as getStorageKey } from '../cookie-name';\nimport { CampaignParser } from './campaign-parser';\nimport { BASE_CAMPAIGN, EMPTY_VALUE, MKTG } from './constants';\n\n/**\n * @deprecated\n * Campaign tracker has mixed logic from built-in and plugin web attribution\n * features. Do not add more features here. The plan moving foward is to consolidate\n * logic in @amplitude/plugin-web-attribution-browser with backward compatibility.\n */\nexport class CampaignTracker implements ICampaignTracker {\n  storage: Storage<Campaign>;\n  storageKey: string;\n  parser: ICampaignParser;\n  track: CampaignTrackFunction;\n  onNewCampaign: (campaign: Campaign) => unknown;\n\n  disabled: boolean;\n  trackNewCampaigns: boolean;\n  trackPageViews: boolean;\n  excludeReferrers: string[];\n  initialEmptyValue: string;\n\n  constructor(apiKey: string, options: CampaignTrackerOptions) {\n    this.storage = options.storage;\n    this.storageKey = getStorageKey(apiKey, MKTG);\n    this.parser = new CampaignParser();\n    this.track = options.track;\n    this.onNewCampaign = options.onNewCampaign;\n\n    this.disabled = Boolean(options.disabled);\n    this.trackNewCampaigns = Boolean(options.trackNewCampaigns);\n    this.trackPageViews = Boolean(options.trackPageViews);\n    this.excludeReferrers = options.excludeReferrers ?? [];\n    if (typeof location !== 'undefined') {\n      this.excludeReferrers.unshift(location.hostname);\n    }\n    this.initialEmptyValue = options.initialEmptyValue ?? EMPTY_VALUE;\n  }\n\n  isNewCampaign(current: Campaign, previous: Campaign | undefined, ignoreSubdomainInReferrer = false) {\n    const { referrer, referring_domain, ...currentCampaign } = current;\n    const { referrer: _previous_referrer, referring_domain: prevReferringDomain, ...previousCampaign } = previous || {};\n\n    if (current.referring_domain && this.excludeReferrers.includes(current.referring_domain)) {\n      return false;\n    }\n\n    const hasNewCampaign = JSON.stringify(currentCampaign) !== JSON.stringify(previousCampaign);\n    const hasNewDomain = ignoreSubdomainInReferrer\n      ? domainWithoutSubdomain(referring_domain || '') !== domainWithoutSubdomain(prevReferringDomain || '')\n      : referring_domain !== prevReferringDomain;\n\n    return !previous || hasNewCampaign || hasNewDomain;\n  }\n\n  async saveCampaignToStorage(campaign: Campaign): Promise<void> {\n    await this.storage.set(this.storageKey, campaign);\n  }\n\n  async getCampaignFromStorage(): Promise<Campaign | undefined> {\n    return await this.storage.get(this.storageKey);\n  }\n\n  createCampaignEvent(campaign: Campaign) {\n    const campaignParameters: Campaign = {\n      // This object definition allows undefined keys to be iterated on\n      // in .reduce() to build indentify object\n      ...BASE_CAMPAIGN,\n      ...campaign,\n    };\n    const identifyEvent = Object.entries(campaignParameters).reduce((identify, [key, value]) => {\n      identify.setOnce(`initial_${key}`, value || this.initialEmptyValue);\n      if (value) {\n        return identify.set(key, value);\n      }\n      return identify.unset(key);\n    }, new Identify());\n\n    const pageViewEvent: BaseEvent = {\n      event_type: 'Page View',\n      event_properties: {\n        page_title: /* istanbul ignore next */ (typeof document !== 'undefined' && document.title) || '',\n        page_location: /* istanbul ignore next */ (typeof location !== 'undefined' && location.href) || '',\n        page_path: /* istanbul ignore next */ (typeof location !== 'undefined' && location.pathname) || '',\n      },\n    };\n    return {\n      ...createIdentifyEvent(identifyEvent),\n      ...(this.trackPageViews && pageViewEvent),\n    };\n  }\n\n  async send(isNewSession: boolean) {\n    if (this.disabled) {\n      return;\n    }\n    const currentCampaign = await this.parser.parse();\n    const previousCampaign = await this.getCampaignFromStorage();\n    if (!isNewSession) {\n      if (!this.trackNewCampaigns || !this.isNewCampaign(currentCampaign, previousCampaign)) {\n        return;\n      }\n      this.onNewCampaign(currentCampaign);\n    }\n    await this.track(this.createCampaignEvent(currentCampaign));\n    await this.saveCampaignToStorage(currentCampaign);\n  }\n}\n\nconst domainWithoutSubdomain = (domain: string) => {\n  const parts = domain.split('.');\n\n  if (parts.length <= 2) {\n    return domain;\n  }\n\n  return parts.slice(parts.length - 2, parts.length).join('.');\n};\n", "import { createIdentifyEvent, Identify } from '@amplitude/analytics-core';\nimport { Campaign, Logger } from '@amplitude/analytics-types';\nimport { BASE_CAMPAIGN } from './constants';\n\nexport interface Options {\n  excludeReferrers?: (string | RegExp)[];\n  initialEmptyValue?: string;\n  resetSessionOnNewCampaign?: boolean;\n}\n\nconst domainWithoutSubdomain = (domain: string) => {\n  const parts = domain.split('.');\n\n  if (parts.length <= 2) {\n    return domain;\n  }\n\n  return parts.slice(parts.length - 2, parts.length).join('.');\n};\n\n//Direct traffic mean no external referral, no UTMs, no click-ids, and no other customer identified marketing campaign url params.\nconst isDirectTraffic = (current: Campaign) => {\n  return Object.values(current).every((value) => !value);\n};\n\nexport const isNewCampaign = (\n  current: Campaign,\n  previous: Campaign | undefined,\n  options: Options,\n  logger: Logger,\n  isNewSession = true,\n) => {\n  const { referrer, referring_domain, ...currentCampaign } = current;\n  const { referrer: _previous_referrer, referring_domain: prevReferringDomain, ...previousCampaign } = previous || {};\n\n  if (isExcludedReferrer(options.excludeReferrers, current.referring_domain)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    logger.debug(`This is not a new campaign because ${current.referring_domain} is in the exclude referrer list.`);\n    return false;\n  }\n\n  //In the same session, direct traffic should not override or unset any persisting query params\n  if (!isNewSession && isDirectTraffic(current) && previous) {\n    logger.debug('This is not a new campaign because this is a direct traffic in the same session.');\n    return false;\n  }\n\n  const hasNewCampaign = JSON.stringify(currentCampaign) !== JSON.stringify(previousCampaign);\n  const hasNewDomain =\n    domainWithoutSubdomain(referring_domain || '') !== domainWithoutSubdomain(prevReferringDomain || '');\n\n  const result = !previous || hasNewCampaign || hasNewDomain;\n\n  if (!result) {\n    logger.debug(\"This is not a new campaign because it's the same as the previous one.\");\n  } else {\n    logger.debug(`This is a new campaign. An $identify event will be sent.`);\n  }\n\n  return result;\n};\n\nexport const isExcludedReferrer = (excludeReferrers: (string | RegExp)[] = [], referringDomain = '') => {\n  return excludeReferrers.some((value) =>\n    value instanceof RegExp ? value.test(referringDomain) : value === referringDomain,\n  );\n};\n\nexport const createCampaignEvent = (campaign: Campaign, options: Options) => {\n  const campaignParameters: Campaign = {\n    // This object definition allows undefined keys to be iterated on\n    // in .reduce() to build indentify object\n    ...BASE_CAMPAIGN,\n    ...campaign,\n  };\n  const identifyEvent = Object.entries(campaignParameters).reduce((identify, [key, value]) => {\n    identify.setOnce(`initial_${key}`, value ?? options.initialEmptyValue ?? 'EMPTY');\n    if (value) {\n      return identify.set(key, value);\n    }\n    return identify.unset(key);\n  }, new Identify());\n\n  return createIdentifyEvent(identifyEvent);\n};\n\nexport const getDefaultExcludedReferrers = (cookieDomain: string | undefined) => {\n  let domain = cookieDomain;\n  if (domain) {\n    if (domain.startsWith('.')) {\n      domain = domain.substring(1);\n    }\n    return [new RegExp(`${domain.replace('.', '\\\\.')}$`)];\n  }\n  return [];\n};\n", "import { AMPLITUDE_PREFIX } from '@amplitude/analytics-core';\n\nexport const getStorageKey = (apiKey: string, postKey = '', limit = 10) => {\n  return [AMPLITUDE_PREFIX, postKey, apiKey.substring(0, limit)].filter(Boolean).join('_');\n};\n", "export const isNewSession = (sessionTimeout: number, lastEventTime: number = Date.now()): boolean => {\n  const currentTime = Date.now();\n  const timeSinceLastEvent = currentTime - lastEventTime;\n\n  return timeSinceLastEvent > sessionTimeout;\n};\n", "import { BrowserConfig, Logger } from '@amplitude/analytics-types';\nimport { Campaign, Storage } from '@amplitude/analytics-types';\nimport { Options, getDefaultExcludedReferrers, createCampaignEvent, isNewCampaign } from './helpers';\nimport { getStorageKey } from '../storage/helpers';\nimport { CampaignParser } from './campaign-parser';\nimport { BASE_CAMPAIGN } from './constants';\nimport { isNewSession } from '../session';\n\nexport class WebAttribution {\n  options: Options;\n  storage: Storage<Campaign>;\n  storageKey: string;\n  previousCampaign?: Campaign;\n  currentCampaign: Campaign;\n  shouldTrackNewCampaign = false;\n  sessionTimeout: number;\n  lastEventTime?: number;\n  logger: Logger;\n\n  constructor(options: Options, config: BrowserConfig) {\n    this.options = {\n      initialEmptyValue: 'EMPTY',\n      resetSessionOnNewCampaign: false,\n      excludeReferrers: getDefaultExcludedReferrers(config.cookieOptions?.domain),\n      ...options,\n    };\n    this.storage = config.cookieStorage as unknown as Storage<Campaign>;\n    this.storageKey = getStorageKey(config.apiKey, 'MKTG');\n    this.currentCampaign = BASE_CAMPAIGN;\n    this.sessionTimeout = config.sessionTimeout;\n    this.lastEventTime = config.lastEventTime;\n    this.logger = config.loggerProvider;\n    config.loggerProvider.log('Installing web attribution tracking.');\n  }\n\n  async init() {\n    [this.currentCampaign, this.previousCampaign] = await this.fetchCampaign();\n    const isEventInNewSession = !this.lastEventTime ? true : isNewSession(this.sessionTimeout, this.lastEventTime);\n\n    if (isNewCampaign(this.currentCampaign, this.previousCampaign, this.options, this.logger, isEventInNewSession)) {\n      this.shouldTrackNewCampaign = true;\n      await this.storage.set(this.storageKey, this.currentCampaign);\n    }\n  }\n\n  async fetchCampaign() {\n    return await Promise.all([new CampaignParser().parse(), this.storage.get(this.storageKey)]);\n  }\n\n  /**\n   * This can be called when enable web attribution and either\n   * 1. set a new session\n   * 2. has new campaign and enable resetSessionOnNewCampaign\n   */\n  generateCampaignEvent(event_id?: number) {\n    // Mark this campaign has been tracked\n    this.shouldTrackNewCampaign = false;\n    const campaignEvent = createCampaignEvent(this.currentCampaign, this.options);\n    if (event_id) {\n      campaignEvent.event_id = event_id;\n    }\n    return campaignEvent;\n  }\n\n  shouldSetSessionIdOnNewCampaign() {\n    return this.shouldTrackNewCampaign && !!this.options.resetSessionOnNewCampaign;\n  }\n}\n", "import { Storage, CookieStorageOptions } from '@amplitude/analytics-types';\nimport { getGlobalScope } from '../global-scope';\n\nexport class CookieStorage<T> implements Storage<T> {\n  options: CookieStorageOptions;\n  private static testValue: undefined | string;\n\n  constructor(options?: CookieStorageOptions) {\n    this.options = { ...options };\n  }\n\n  async isEnabled(): Promise<boolean> {\n    /* istanbul ignore if */\n    if (!getGlobalScope()) {\n      return false;\n    }\n\n    CookieStorage.testValue = String(Date.now());\n    const testStrorage = new CookieStorage<string>(this.options);\n    const testKey = 'AMP_TEST';\n    try {\n      await testStrorage.set(testKey, CookieStorage.testValue);\n      const value = await testStrorage.get(testKey);\n      return value === CookieStorage.testValue;\n    } catch {\n      /* istanbul ignore next */\n      return false;\n    } finally {\n      await testStrorage.remove(testKey);\n    }\n  }\n\n  async get(key: string): Promise<T | undefined> {\n    const value = await this.getRaw(key);\n    if (!value) {\n      return undefined;\n    }\n    try {\n      const decodedValue = decodeCookiesAsDefault(value) ?? decodeCookiesWithDoubleUrlEncoding(value);\n      if (decodedValue === undefined) {\n        console.error(`Amplitude Logger [Error]: Failed to decode cookie value for key: ${key}, value: ${value}`);\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return JSON.parse(decodedValue);\n    } catch {\n      console.error(`Amplitude Logger [Error]: Failed to parse cookie value for key: ${key}, value: ${value}`);\n      return undefined;\n    }\n  }\n\n  async getRaw(key: string): Promise<string | undefined> {\n    const globalScope = getGlobalScope();\n    const cookie = globalScope?.document?.cookie.split('; ') ?? [];\n    const match = cookie.find((c) => c.indexOf(key + '=') === 0);\n    if (!match) {\n      return undefined;\n    }\n    return match.substring(key.length + 1);\n  }\n\n  async set(key: string, value: T | null): Promise<void> {\n    try {\n      const expirationDays = this.options.expirationDays ?? 0;\n      const expires = value !== null ? expirationDays : -1;\n      let expireDate: Date | undefined = undefined;\n      if (expires) {\n        const date = new Date();\n        date.setTime(date.getTime() + expires * 24 * 60 * 60 * 1000);\n        expireDate = date;\n      }\n      let str = `${key}=${btoa(encodeURIComponent(JSON.stringify(value)))}`;\n      if (expireDate) {\n        str += `; expires=${expireDate.toUTCString()}`;\n      }\n      str += '; path=/';\n      if (this.options.domain) {\n        str += `; domain=${this.options.domain}`;\n      }\n      if (this.options.secure) {\n        str += '; Secure';\n      }\n      if (this.options.sameSite) {\n        str += `; SameSite=${this.options.sameSite}`;\n      }\n      const globalScope = getGlobalScope();\n      if (globalScope) {\n        globalScope.document.cookie = str;\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : String(error);\n      console.error(`Amplitude Logger [Error]: Failed to set cookie for key: ${key}. Error: ${errorMessage}`);\n    }\n  }\n\n  async remove(key: string): Promise<void> {\n    await this.set(key, null);\n  }\n\n  async reset(): Promise<void> {\n    return;\n  }\n}\n\nconst decodeCookiesAsDefault = (value: string): string | undefined => {\n  try {\n    return decodeURIComponent(atob(value));\n  } catch {\n    return undefined;\n  }\n};\n\nconst decodeCookiesWithDoubleUrlEncoding = (value: string): string | undefined => {\n  // Modern Ruby (v7+) automatically encodes cookies with URL encoding by\n  // https://api.rubyonrails.org/classes/ActionDispatch/Cookies.html\n  try {\n    return decodeURIComponent(atob(decodeURIComponent(value)));\n  } catch {\n    return undefined;\n  }\n};\n", "import { BaseTransport } from '@amplitude/analytics-core';\nimport { Payload, Response, Transport } from '@amplitude/analytics-types';\n\nexport class FetchTransport extends BaseTransport implements Transport {\n  async send(serverUrl: string, payload: Payload): Promise<Response | null> {\n    /* istanbul ignore if */\n    if (typeof fetch === 'undefined') {\n      throw new Error('FetchTransport is not supported');\n    }\n    const options: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: '*/*',\n      },\n      body: JSON.stringify(payload),\n      method: 'POST',\n    };\n    const response = await fetch(serverUrl, options);\n    const responseText = await response.text();\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return this.buildResponse(JSON.parse(responseText));\n    } catch {\n      return this.buildResponse({ code: response.status });\n    }\n  }\n}\n", "import { AnalyticsConnector } from '@amplitude/analytics-connector';\n\nexport const getAnalyticsConnector = (instanceName = '$default_instance'): AnalyticsConnector => {\n  return AnalyticsConnector.getInstance(instanceName);\n};\n\nexport const setConnectorUserId = (userId: string | undefined, instanceName?: string): void => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  getAnalyticsConnector(instanceName).identityStore.editIdentity().setUserId(userId).commit();\n};\n\nexport const setConnectorDeviceId = (deviceId: string, instanceName?: string): void => {\n  getAnalyticsConnector(instanceName).identityStore.editIdentity().setDeviceId(deviceId).commit();\n};\n", "import { BeforePlugin, Config, Event } from '@amplitude/analytics-types';\nimport { getAnalyticsConnector } from '../analytics-connector';\n\nexport class IdentityEventSender implements BeforePlugin {\n  name = 'identity';\n  type = 'before' as const;\n\n  identityStore = getAnalyticsConnector().identityStore;\n\n  async execute(context: Event): Promise<Event> {\n    const userProperties = context.user_properties as Record<string, any>;\n    if (userProperties) {\n      this.identityStore.editIdentity().updateUserProperties(userProperties).commit();\n    }\n    return context;\n  }\n\n  async setup(config: Config) {\n    if (config.instanceName) {\n      this.identityStore = getAnalyticsConnector(config.instanceName).identityStore;\n    }\n  }\n}\n", "import { BaseEvent } from './base-event';\n\nexport interface Identify {\n  getUserProperties(): IdentifyUserProperties;\n  set(property: string, value: ValidPropertyType): Identify;\n  setOnce(property: string, value: ValidPropertyType): Identify;\n  append(property: string, value: ValidPropertyType): Identify;\n  prepend(property: string, value: ValidPropertyType): Identify;\n  postInsert(property: string, value: ValidPropertyType): Identify;\n  preInsert(property: string, value: ValidPropertyType): Identify;\n  remove(property: string, value: ValidPropertyType): Identify;\n  add(property: string, value: number): Identify;\n  unset(property: string): Identify;\n  clearAll(): Identify;\n}\n\nexport enum IdentifyOperation {\n  // Base Operations to set values\n  SET = '$set',\n  SET_ONCE = '$setOnce',\n\n  // Operations around modifying existing values\n  ADD = '$add',\n  APPEND = '$append',\n  PREPEND = '$prepend',\n  REMOVE = '$remove',\n\n  // Operations around appending values *if* they aren't present\n  PREINSERT = '$preInsert',\n  POSTINSERT = '$postInsert',\n\n  // Operations around removing properties/values\n  UNSET = '$unset',\n  CLEAR_ALL = '$clearAll',\n}\n\nexport type ValidPropertyType =\n  | number\n  | string\n  | boolean\n  | Array<string | number>\n  | { [key: string]: ValidPropertyType }\n  | Array<{ [key: string]: ValidPropertyType }>;\n\ninterface BaseOperationConfig {\n  [key: string]: ValidPropertyType;\n}\n\nexport interface IdentifyUserProperties {\n  // Add operations can only take numbers\n  [IdentifyOperation.ADD]?: { [key: string]: number };\n\n  // This reads the keys of the passed object, but the values are not used\n  [IdentifyOperation.UNSET]?: BaseOperationConfig;\n  // This option does not read the key as it unsets all user properties\n  [IdentifyOperation.CLEAR_ALL]?: any;\n\n  // These operations can take numbers, strings, or arrays of both.\n  [IdentifyOperation.SET]?: BaseOperationConfig;\n  [IdentifyOperation.SET_ONCE]?: BaseOperationConfig;\n  [IdentifyOperation.APPEND]?: BaseOperationConfig;\n  [IdentifyOperation.PREPEND]?: BaseOperationConfig;\n  [IdentifyOperation.POSTINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.PREINSERT]?: BaseOperationConfig;\n  [IdentifyOperation.REMOVE]?: BaseOperationConfig;\n}\n\nexport type UserProperties =\n  | IdentifyUserProperties\n  | {\n      [key in Exclude<string, IdentifyOperation>]: any;\n    };\n\nexport interface Revenue {\n  getEventProperties(): RevenueEventProperties;\n  setProductId(productId: string): Revenue;\n  setQuantity(quantity: number): Revenue;\n  setPrice(price: number): Revenue;\n  setRevenueType(revenueType: string): Revenue;\n  setCurrency(currency: string): Revenue;\n  setEventProperties(properties: { [key: string]: any }): Revenue;\n  setRevenue(revenue: number): Revenue;\n}\n\nexport enum RevenueProperty {\n  REVENUE_PRODUCT_ID = '$productId',\n  REVENUE_QUANTITY = '$quantity',\n  REVENUE_PRICE = '$price',\n  REVENUE_TYPE = '$revenueType',\n  REVENUE_CURRENCY = '$currency',\n  REVENUE = '$revenue',\n}\n\nexport interface RevenueEventProperties {\n  [RevenueProperty.REVENUE_PRODUCT_ID]?: string;\n  [RevenueProperty.REVENUE_QUANTITY]?: number;\n  [RevenueProperty.REVENUE_PRICE]?: number;\n  [RevenueProperty.REVENUE_TYPE]?: string;\n  [RevenueProperty.REVENUE_CURRENCY]?: string;\n  [RevenueProperty.REVENUE]?: number;\n}\n\n/**\n * Strings that have special meaning when used as an event's type\n * and have different specifications.\n */\nexport enum SpecialEventType {\n  IDENTIFY = '$identify',\n  GROUP_IDENTIFY = '$groupidentify',\n  REVENUE = 'revenue_amount',\n}\n\nexport interface TrackEvent extends BaseEvent {\n  event_type: Exclude<string, SpecialEventType>;\n}\n\nexport interface IdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.IDENTIFY;\n  user_properties: UserProperties;\n}\n\nexport interface GroupIdentifyEvent extends BaseEvent {\n  event_type: SpecialEventType.GROUP_IDENTIFY;\n  group_properties: UserProperties;\n}\n\nexport interface RevenueEvent extends BaseEvent {\n  event_type: SpecialEventType.REVENUE;\n  event_properties:\n    | RevenueEventProperties\n    | {\n        [key: string]: any;\n      };\n}\n\nexport type Event = TrackEvent | IdentifyEvent | GroupIdentifyEvent | RevenueEvent;\n", "export interface Logger {\n  disable(): void;\n  enable(logLevel: LogLevel): void;\n  log(...args: any[]): void;\n  warn(...args: any[]): void;\n  error(...args: any[]): void;\n  debug(...args: any[]): void;\n}\n\nexport enum LogLevel {\n  None = 0,\n  Error = 1,\n  Warn = 2,\n  Verbose = 3,\n  Debug = 4,\n}\n\nexport interface LogConfig {\n  logger: Logger;\n  logLevel: LogLevel;\n}\n\ntype TimeKey = 'start' | 'end';\n\nexport interface DebugContext {\n  type: string;\n  name: string;\n  args: string[] | string;\n  stacktrace?: string[] | string;\n  time?: { [key in TimeKey]?: string };\n  states?: { [key: string]: any };\n}\n", "/**\n * @deprecated use ServerZoneType instead\n */\nexport enum ServerZone {\n  US = 'US',\n  EU = 'EU',\n}\n\nexport type ServerZoneType = 'US' | 'EU';\n", "/** The status of an event. */\nexport enum Status {\n  /** The status could not be determined. */\n  Unknown = 'unknown',\n  /** The event was skipped due to configuration or callbacks. */\n  Skipped = 'skipped',\n  /** The event was sent successfully. */\n  Success = 'success',\n  /** A user or device in the payload is currently rate limited and should try again later. */\n  RateLimit = 'rate_limit',\n  /** The sent payload was too large to be processed. */\n  PayloadTooLarge = 'payload_too_large',\n  /** The event could not be processed. */\n  Invalid = 'invalid',\n  /** A server-side error ocurred during submission. */\n  Failed = 'failed',\n  /** a server or client side error occuring when a request takes too long and is cancelled */\n  Timeout = 'Timeout',\n  /** NodeJS runtime environment error.. E.g. disconnected from network */\n  SystemError = 'SystemError',\n}\n", "export const omitUndefined = (input: Record<string, string | undefined>) => {\n  const obj: Record<string, string> = {};\n  for (const key in input) {\n    const val = input[key];\n    if (val) {\n      obj[key] = val;\n    }\n  }\n  return obj;\n};\n", "import { CampaignParser, getGlobalScope } from '@amplitude/analytics-client-common';\nimport {\n  BrowserClient,\n  BrowserConfig,\n  EnrichmentPlugin,\n  Event,\n  IdentifyOperation,\n  IdentifyUserProperties,\n  Logger,\n} from '@amplitude/analytics-types';\nimport { BASE_CAMPAIGN } from '@amplitude/analytics-client-common';\nimport { CreatePageViewTrackingPlugin, Options } from './typings/page-view-tracking';\nimport { omitUndefined } from './utils';\n\nexport const defaultPageViewEvent = '[Amplitude] Page Viewed';\n\nexport const pageViewTrackingPlugin: CreatePageViewTrackingPlugin = (options: Options = {}) => {\n  let amplitude: BrowserClient | undefined;\n  const globalScope = getGlobalScope();\n  let loggerProvider: Logger | undefined = undefined;\n  let isTracking = false;\n  let localConfig: BrowserConfig;\n  const { trackOn, trackHistoryChanges, eventType = defaultPageViewEvent } = options;\n\n  const getDecodeURI = (locationStr: string): string => {\n    let decodedLocationStr = locationStr;\n    try {\n      decodedLocationStr = decodeURI(locationStr);\n    } catch (e) {\n      /* istanbul ignore next */\n      loggerProvider?.error('Malformed URI sequence: ', e);\n    }\n\n    return decodedLocationStr;\n  };\n\n  const createPageViewEvent = async (): Promise<Event> => {\n    /* istanbul ignore next */\n    const locationHREF = getDecodeURI((typeof location !== 'undefined' && location.href) || '');\n    return {\n      event_type: eventType,\n      event_properties: {\n        ...(await getCampaignParams()),\n        '[Amplitude] Page Domain':\n          /* istanbul ignore next */ (typeof location !== 'undefined' && location.hostname) || '',\n        '[Amplitude] Page Location': locationHREF,\n        '[Amplitude] Page Path':\n          /* istanbul ignore next */ (typeof location !== 'undefined' && getDecodeURI(location.pathname)) || '',\n        '[Amplitude] Page Title': /* istanbul ignore next */ (typeof document !== 'undefined' && document.title) || '',\n        '[Amplitude] Page URL': locationHREF.split('?')[0],\n      },\n    };\n  };\n\n  const shouldTrackOnPageLoad = () => typeof trackOn === 'undefined' || (typeof trackOn === 'function' && trackOn());\n\n  /* istanbul ignore next */\n  let previousURL: string | null = typeof location !== 'undefined' ? location.href : null;\n\n  const trackHistoryPageView = async (): Promise<void> => {\n    const newURL = location.href;\n    const shouldTrackPageView =\n      shouldTrackHistoryPageView(trackHistoryChanges, newURL, previousURL || '') && shouldTrackOnPageLoad();\n    // Note: Update `previousURL` in the same clock tick as `shouldTrackHistoryPageView()`\n    // This was previously done after `amplitude?.track(await createPageViewEvent());` and\n    // causes a concurrency issue where app triggers `pushState` twice with the same URL target\n    // but `previousURL` is only updated after the second `pushState` producing two page viewed events\n    previousURL = newURL;\n\n    if (shouldTrackPageView) {\n      /* istanbul ignore next */\n      loggerProvider?.log('Tracking page view event');\n      amplitude?.track(await createPageViewEvent());\n    }\n  };\n\n  /* istanbul ignore next */\n  const trackHistoryPageViewWrapper = () => {\n    void trackHistoryPageView();\n  };\n\n  const plugin: EnrichmentPlugin = {\n    name: '@amplitude/plugin-page-view-tracking-browser',\n    type: 'enrichment',\n\n    setup: async (config: BrowserConfig, client: BrowserClient) => {\n      amplitude = client;\n      localConfig = config;\n\n      loggerProvider = config.loggerProvider;\n      loggerProvider.log('Installing @amplitude/plugin-page-view-tracking-browser');\n\n      isTracking = true;\n\n      if (globalScope) {\n        globalScope.addEventListener('popstate', trackHistoryPageViewWrapper);\n\n        /* istanbul ignore next */\n        // There is no global browser listener for changes to history, so we have\n        // to modify pushState directly.\n        // https://stackoverflow.com/a/64927639\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        globalScope.history.pushState = new Proxy(globalScope.history.pushState, {\n          apply: (target, thisArg, [state, unused, url]) => {\n            target.apply(thisArg, [state, unused, url]);\n            if (isTracking) {\n              void trackHistoryPageView();\n            }\n          },\n        });\n      }\n\n      if (shouldTrackOnPageLoad()) {\n        loggerProvider.log('Tracking page view event');\n\n        amplitude.track(await createPageViewEvent());\n      }\n    },\n\n    execute: async (event: Event) => {\n      if (trackOn === 'attribution' && isCampaignEvent(event)) {\n        /* istanbul ignore next */ // loggerProvider should be defined by the time execute is invoked\n        loggerProvider?.log('Enriching campaign event to page view event with campaign parameters');\n        const pageViewEvent = await createPageViewEvent();\n        event.event_type = pageViewEvent.event_type;\n        event.event_properties = {\n          ...event.event_properties,\n          ...pageViewEvent.event_properties,\n        };\n      }\n\n      // Update the pageCounter for the page view event\n      if (localConfig && event.event_type === eventType) {\n        localConfig.pageCounter = !localConfig.pageCounter ? 1 : localConfig.pageCounter + 1;\n        event.event_properties = {\n          ...event.event_properties,\n          '[Amplitude] Page Counter': localConfig.pageCounter,\n        };\n      }\n      return event;\n    },\n\n    teardown: async () => {\n      if (globalScope) {\n        globalScope.removeEventListener('popstate', trackHistoryPageViewWrapper);\n        isTracking = false;\n      }\n    },\n  };\n  return plugin;\n};\n\nconst getCampaignParams = async () => omitUndefined(await new CampaignParser().parse());\n\nconst isCampaignEvent = (event: Event) => {\n  if (event.event_type === '$identify' && event.user_properties) {\n    const properties = event.user_properties as IdentifyUserProperties;\n    const $set = properties[IdentifyOperation.SET] || {};\n    const $unset = properties[IdentifyOperation.UNSET] || {};\n    const userProperties = [...Object.keys($set), ...Object.keys($unset)];\n    return Object.keys(BASE_CAMPAIGN).every((value) => userProperties.includes(value));\n  }\n  return false;\n};\n\nexport const shouldTrackHistoryPageView = (\n  trackingOption: Options['trackHistoryChanges'],\n  newURLStr: string,\n  oldURLStr: string,\n): boolean => {\n  switch (trackingOption) {\n    case 'pathOnly': {\n      if (oldURLStr == '') return true;\n      const newURL = new URL(newURLStr);\n      const oldURL = new URL(oldURLStr);\n      const newBaseStr = newURL.origin + newURL.pathname;\n      const oldBaseStr = oldURL.origin + oldURL.pathname;\n      return newBaseStr !== oldBaseStr;\n    }\n    default:\n      return newURLStr !== oldURLStr;\n  }\n};\n", "import {\n  DEFAULT_FORM_START_EVENT,\n  DEFAULT_FORM_SUBMIT_EVENT,\n  FORM_ID,\n  FORM_NAME,\n  FORM_DESTINATION,\n} from '../constants';\nimport { BrowserConfig } from '../config';\nimport { getGlobalScope, Event, EnrichmentPlugin, BrowserClient } from '@amplitude/analytics-core';\n\ninterface EventListener {\n  element: Element;\n  type: 'change' | 'submit';\n  handler: () => void;\n}\n\nexport const formInteractionTracking = (): EnrichmentPlugin => {\n  let observer: MutationObserver | undefined;\n  let eventListeners: EventListener[] = [];\n\n  const addEventListener = (element: Element, type: 'change' | 'submit', handler: () => void) => {\n    element.addEventListener(type, handler);\n    eventListeners.push({\n      element,\n      type,\n      handler,\n    });\n  };\n\n  const removeClickListeners = () => {\n    eventListeners.forEach(({ element, type, handler }) => {\n      /* istanbul ignore next */\n      element?.removeEventListener(type, handler);\n    });\n    eventListeners = [];\n  };\n\n  const name = '@amplitude/plugin-form-interaction-tracking-browser';\n  const type = 'enrichment';\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    const initializeFormTracking = () => {\n      /* istanbul ignore if */\n      if (!amplitude) {\n        // TODO: Add required minimum version of @amplitude/analytics-browser\n        config.loggerProvider.warn(\n          'Form interaction tracking requires a later version of @amplitude/analytics-browser. Form interaction events are not tracked.',\n        );\n        return;\n      }\n\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') {\n        return;\n      }\n\n      const addFormInteractionListener = (form: HTMLFormElement) => {\n        let hasFormChanged = false;\n\n        addEventListener(form, 'change', () => {\n          const formDestination = extractFormAction(form);\n          if (!hasFormChanged) {\n            amplitude.track(DEFAULT_FORM_START_EVENT, {\n              [FORM_ID]: stringOrUndefined(form.id),\n              [FORM_NAME]: stringOrUndefined(form.name),\n              [FORM_DESTINATION]: formDestination,\n            });\n          }\n          hasFormChanged = true;\n        });\n\n        addEventListener(form, 'submit', () => {\n          const formDestination = extractFormAction(form);\n          if (!hasFormChanged) {\n            amplitude.track(DEFAULT_FORM_START_EVENT, {\n              [FORM_ID]: stringOrUndefined(form.id),\n              [FORM_NAME]: stringOrUndefined(form.name),\n              [FORM_DESTINATION]: formDestination,\n            });\n          }\n\n          amplitude.track(DEFAULT_FORM_SUBMIT_EVENT, {\n            [FORM_ID]: stringOrUndefined(form.id),\n            [FORM_NAME]: stringOrUndefined(form.name),\n            [FORM_DESTINATION]: formDestination,\n          });\n          hasFormChanged = false;\n        });\n      };\n\n      // Adds listener to existing anchor tags\n      const forms = Array.from(document.getElementsByTagName('form'));\n      forms.forEach(addFormInteractionListener);\n\n      // Adds listener to anchor tags added after initial load\n      /* istanbul ignore else */\n      if (typeof MutationObserver !== 'undefined') {\n        observer = new MutationObserver((mutations) => {\n          mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n              if (node.nodeName === 'FORM') {\n                addFormInteractionListener(node as HTMLFormElement);\n              }\n              if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {\n                Array.from(node.querySelectorAll('form') as HTMLFormElement[]).map(addFormInteractionListener);\n              }\n            });\n          });\n        });\n\n        observer.observe(document.body, {\n          subtree: true,\n          childList: true,\n        });\n      }\n    };\n\n    // If the document is already loaded, initialize immediately.\n    if (document.readyState === 'complete') {\n      initializeFormTracking();\n    } else {\n      // Otherwise, wait for the load event.\n      // The form interaction plugin observes changes in the dom. For this to work correctly, the observer can only be setup\n      // after the body is built. When Amplitude gets initialized in a script tag, the body tag is still unavailable. So register this\n      // only after the window is loaded\n      const window = getGlobalScope();\n      /* istanbul ignore else*/\n      if (window) {\n        window.addEventListener('load', initializeFormTracking);\n      } else {\n        config.loggerProvider.debug('Form interaction tracking is not installed because global is undefined.');\n      }\n    }\n  };\n  const execute = async (event: Event) => event;\n  const teardown = async () => {\n    observer?.disconnect();\n    removeClickListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n\nexport const stringOrUndefined = <T>(name: T): T extends string ? string : undefined => {\n  /* istanbul ignore if */\n  if (typeof name !== 'string') {\n    // We found instances where the value of `name` is an Element and not a string.\n    // Elements may have circular references and would throw an error when passed to `JSON.stringify(...)`.\n    // If a non-string value is seen, assume there is no value.\n    return undefined as T extends string ? string : undefined;\n  }\n\n  return name as T extends string ? string : undefined;\n};\n\n// Extracts the form action attribute, and normalizes it to a valid URL to preserve the previous behavior of accessing the action property directly.\nexport const extractFormAction = (form: HTMLFormElement): string | null => {\n  let formDestination = form.getAttribute('action');\n  try {\n    // eslint-disable-next-line no-restricted-globals\n    formDestination = new URL(encodeURI(formDestination ?? ''), window.location.href).href;\n  } catch {\n    //\n  }\n  return formDestination;\n};\n", "import { DEFAULT_FILE_DOWNLOAD_EVENT, FILE_EXTENSION, FILE_NAME, LINK_ID, LINK_TEXT, LINK_URL } from '../constants';\nimport { BrowserConfig } from '../config';\nimport { getGlobalScope, Event, EnrichmentPlugin, BrowserClient } from '@amplitude/analytics-core';\n\ninterface EventListener {\n  element: Element;\n  type: 'click';\n  handler: () => void;\n}\n\nexport const fileDownloadTracking = (): EnrichmentPlugin => {\n  let observer: MutationObserver | undefined;\n  let eventListeners: EventListener[] = [];\n  const addEventListener = (element: Element, type: 'click', handler: () => void) => {\n    element.addEventListener(type, handler);\n    eventListeners.push({\n      element,\n      type,\n      handler,\n    });\n  };\n  const removeClickListeners = () => {\n    eventListeners.forEach(({ element, type, handler }) => {\n      /* istanbul ignore next */\n      element?.removeEventListener(type, handler);\n    });\n    eventListeners = [];\n  };\n\n  const name = '@amplitude/plugin-file-download-tracking-browser';\n  const type = 'enrichment';\n\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    const initializeFileDownloadTracking = () => {\n      /* istanbul ignore if */\n      if (!amplitude) {\n        // TODO: Add required minimum version of @amplitude/analytics-browser\n        config.loggerProvider.warn(\n          'File download tracking requires a later version of @amplitude/analytics-browser. File download events are not tracked.',\n        );\n        return;\n      }\n\n      /* istanbul ignore if */\n      if (typeof document === 'undefined') {\n        return;\n      }\n\n      const addFileDownloadListener = (a: HTMLAnchorElement) => {\n        let url: URL;\n        try {\n          // eslint-disable-next-line no-restricted-globals\n          url = new URL(a.href, window.location.href);\n        } catch {\n          /* istanbul ignore next */\n          return;\n        }\n        const result = ext.exec(url.href);\n        const fileExtension = result?.[1];\n\n        if (fileExtension) {\n          addEventListener(a, 'click', () => {\n            if (fileExtension) {\n              amplitude.track(DEFAULT_FILE_DOWNLOAD_EVENT, {\n                [FILE_EXTENSION]: fileExtension,\n                [FILE_NAME]: url.pathname,\n                [LINK_ID]: a.id,\n                [LINK_TEXT]: a.text,\n                [LINK_URL]: a.href,\n              });\n            }\n          });\n        }\n      };\n\n      const ext =\n        /\\.(pdf|xlsx?|docx?|txt|rtf|csv|exe|key|pp(s|t|tx)|7z|pkg|rar|gz|zip|avi|mov|mp4|mpe?g|wmv|midi?|mp3|wav|wma)(\\?.+)?$/;\n\n      // Adds listener to existing anchor tags\n      const links = Array.from(document.getElementsByTagName('a'));\n      links.forEach(addFileDownloadListener);\n\n      // Adds listener to anchor tags added after initial load\n      /* istanbul ignore else */\n      if (typeof MutationObserver !== 'undefined') {\n        observer = new MutationObserver((mutations) => {\n          mutations.forEach((mutation) => {\n            mutation.addedNodes.forEach((node) => {\n              if (node.nodeName === 'A') {\n                addFileDownloadListener(node as HTMLAnchorElement);\n              }\n              if ('querySelectorAll' in node && typeof node.querySelectorAll === 'function') {\n                Array.from(node.querySelectorAll('a') as HTMLAnchorElement[]).map(addFileDownloadListener);\n              }\n            });\n          });\n        });\n\n        observer.observe(document.body, {\n          subtree: true,\n          childList: true,\n        });\n      }\n    };\n\n    // If the document is already loaded, initialize immediately.\n    /* istanbul ignore else*/\n    if (document.readyState === 'complete') {\n      initializeFileDownloadTracking();\n    } else {\n      // Otherwise, wait for the load event.\n      const window = getGlobalScope();\n      /* istanbul ignore else*/\n      if (window) {\n        window.addEventListener('load', initializeFileDownloadTracking);\n      } else {\n        config.loggerProvider.debug('File download tracking is not installed because global is undefined.');\n      }\n    }\n  };\n\n  const execute = async (event: Event) => event;\n  const teardown = async () => {\n    observer?.disconnect();\n    removeClickListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n", "import { BrowserConfig } from '@amplitude/analytics-core';\n\nlet notified = false;\n\nexport const detNotify = (config: BrowserConfig): void => {\n  if (notified || config.defaultTracking !== undefined) {\n    return;\n  }\n\n  const message = `\\`options.defaultTracking\\` is set to undefined. This implicitly configures your Amplitude instance to track Page Views, Sessions, File Downloads, and Form Interactions. You can suppress this warning by explicitly setting a value to \\`options.defaultTracking\\`. The value must either be a boolean, to enable and disable all default events, or an object, for advanced configuration. For example:\n\namplitude.init(<YOUR_API_KEY>, {\n  defaultTracking: true,\n});\n\nVisit https://www.docs.developers.amplitude.com/data/sdks/browser-2/#tracking-default-events for more details.`;\n  config.loggerProvider.warn(message);\n  notified = true;\n};\n\n/**\n * @private\n * This function is meant for testing purposes only\n */\nexport const resetNotify = () => {\n  notified = false;\n};\n", "import { getGlobalScope, BeforePlugin, BrowserClient, BrowserConfig } from '@amplitude/analytics-core';\n\ninterface EventListener {\n  type: 'online' | 'offline';\n  handler: () => void;\n}\n\nexport const networkConnectivityCheckerPlugin = (): BeforePlugin => {\n  const name = '@amplitude/plugin-network-checker-browser';\n  const type = 'before' as const;\n  const globalScope = getGlobalScope();\n  let eventListeners: EventListener[] = [];\n\n  const addNetworkListener = (type: 'online' | 'offline', handler: () => void) => {\n    /* istanbul ignore next */\n    if (globalScope?.addEventListener) {\n      globalScope?.addEventListener(type, handler);\n      eventListeners.push({\n        type,\n        handler,\n      });\n    }\n  };\n\n  const removeNetworkListeners = () => {\n    eventListeners.forEach(({ type, handler }) => {\n      /* istanbul ignore next */\n      globalScope?.removeEventListener(type, handler);\n    });\n    eventListeners = [];\n  };\n\n  const setup = async (config: BrowserConfig, amplitude: BrowserClient) => {\n    if (typeof navigator === 'undefined') {\n      config.loggerProvider.debug(\n        'Network connectivity checker plugin is disabled because navigator is not available.',\n      );\n      config.offline = false;\n      return;\n    }\n\n    config.offline = !navigator.onLine;\n\n    addNetworkListener('online', () => {\n      config.loggerProvider.debug('Network connectivity changed to online.');\n      config.offline = false;\n      // Flush immediately will cause ERR_NETWORK_CHANGED\n      setTimeout(() => {\n        amplitude.flush();\n      }, config.flushIntervalMillis);\n    });\n\n    addNetworkListener('offline', () => {\n      config.loggerProvider.debug('Network connectivity changed to offline.');\n      config.offline = true;\n    });\n  };\n\n  const teardown = async () => {\n    removeNetworkListeners();\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    teardown,\n  };\n};\n", "import { BaseTransport } from '@amplitude/analytics-core';\nimport { Config, ServerZone, Status } from '@amplitude/analytics-types';\nimport {\n  CreateRemoteConfigFetch,\n  RemoteConfigFetch as IRemoteConfigFetch,\n  RemoteConfigAPIResponse,\n  RemoteConfigMetric,\n} from './types';\n\nconst UNEXPECTED_NETWORK_ERROR_MESSAGE = 'Network error occurred, remote config fetch failed';\nconst SUCCESS_REMOTE_CONFIG = 'Remote config successfully fetched';\nconst MAX_RETRIES_EXCEEDED_MESSAGE = 'Remote config fetch rejected due to exceeded retry count';\nconst TIMEOUT_MESSAGE = 'Remote config fetch rejected due to timeout after 5 seconds';\nconst UNEXPECTED_ERROR_MESSAGE = 'Unexpected error occurred';\n\nexport const REMOTE_CONFIG_SERVER_URL = 'https://sr-client-cfg.amplitude.com/config';\nexport const REMOTE_CONFIG_SERVER_URL_STAGING = 'https://sr-client-cfg.stag2.amplitude.com/config';\nexport const REMOTE_CONFIG_SERVER_URL_EU = 'https://sr-client-cfg.eu.amplitude.com/config';\n\nexport class RemoteConfigFetch<RemoteConfig extends { [key: string]: object }>\n  implements IRemoteConfigFetch<RemoteConfig>\n{\n  localConfig: Config;\n  retryTimeout = 1000;\n  attempts = 0;\n  lastFetchedSessionId: number | undefined;\n  sessionTargetingMatch = false;\n  configKeys: string[];\n  metrics: RemoteConfigMetric = {};\n\n  constructor({ localConfig, configKeys }: { localConfig: Config; configKeys: string[] }) {\n    this.localConfig = localConfig;\n    this.configKeys = configKeys;\n  }\n\n  getRemoteConfig = async <K extends keyof RemoteConfig>(\n    configNamespace: string,\n    key: K,\n    sessionId?: number,\n  ): Promise<RemoteConfig[K] | undefined> => {\n    const fetchStartTime = Date.now();\n    // Finally fetch via API\n    const configAPIResponse = await this.fetchWithTimeout(sessionId);\n    if (configAPIResponse) {\n      const remoteConfig = configAPIResponse.configs && configAPIResponse.configs[configNamespace];\n      if (remoteConfig) {\n        this.metrics.fetchTimeAPISuccess = Date.now() - fetchStartTime;\n        return remoteConfig[key];\n      }\n    }\n    this.metrics.fetchTimeAPIFail = Date.now() - fetchStartTime;\n    return undefined;\n  };\n\n  getServerUrl() {\n    if (this.localConfig.serverZone === ServerZone.STAGING) {\n      return REMOTE_CONFIG_SERVER_URL_STAGING;\n    }\n\n    if (this.localConfig.serverZone === ServerZone.EU) {\n      return REMOTE_CONFIG_SERVER_URL_EU;\n    }\n\n    return REMOTE_CONFIG_SERVER_URL;\n  }\n\n  fetchWithTimeout = async (sessionId?: number): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), 5000);\n    const remoteConfig = await this.fetchRemoteConfig(controller.signal, sessionId);\n    clearTimeout(timeoutId);\n    return remoteConfig;\n  };\n\n  fetchRemoteConfig = async (\n    signal: AbortController['signal'],\n    sessionId?: number,\n  ): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    if (sessionId === this.lastFetchedSessionId && this.attempts >= this.localConfig.flushMaxRetries) {\n      return this.completeRequest({ err: MAX_RETRIES_EXCEEDED_MESSAGE });\n    } else if (signal.aborted) {\n      return this.completeRequest({ err: TIMEOUT_MESSAGE });\n    } else if (sessionId !== this.lastFetchedSessionId) {\n      this.lastFetchedSessionId = sessionId;\n      this.attempts = 0;\n    }\n\n    try {\n      const urlParams = new URLSearchParams({\n        api_key: this.localConfig.apiKey,\n      });\n      for (const configKey of this.configKeys) {\n        urlParams.append('config_keys', configKey);\n      }\n      if (sessionId) {\n        urlParams.set('session_id', String(sessionId));\n      }\n      const options: RequestInit = {\n        headers: {\n          Accept: '*/*',\n        },\n        method: 'GET',\n      };\n      const serverUrl = `${this.getServerUrl()}?${urlParams.toString()}`;\n      this.attempts += 1;\n      const res = await fetch(serverUrl, { ...options, signal: signal });\n      if (res === null) {\n        return this.completeRequest({ err: UNEXPECTED_ERROR_MESSAGE });\n      }\n      const parsedStatus = new BaseTransport().buildStatus(res.status);\n      switch (parsedStatus) {\n        case Status.Success:\n          this.attempts = 0;\n          return this.parseAndStoreConfig(res);\n        case Status.Failed:\n          return this.retryFetch(signal, sessionId);\n        default:\n          return this.completeRequest({ err: UNEXPECTED_NETWORK_ERROR_MESSAGE });\n      }\n    } catch (e) {\n      const knownError = e as Partial<Error>;\n      if (signal.aborted) {\n        return this.completeRequest({ err: TIMEOUT_MESSAGE });\n      }\n      return this.completeRequest({ err: knownError.message ?? UNEXPECTED_ERROR_MESSAGE });\n    }\n  };\n\n  retryFetch = async (\n    signal: AbortController['signal'],\n    sessionId?: number,\n  ): Promise<RemoteConfigAPIResponse<RemoteConfig> | void> => {\n    await new Promise((resolve) => setTimeout(resolve, this.attempts * this.retryTimeout));\n    return this.fetchRemoteConfig(signal, sessionId);\n  };\n\n  parseAndStoreConfig = async (res: Response): Promise<RemoteConfigAPIResponse<RemoteConfig>> => {\n    const remoteConfig: RemoteConfigAPIResponse<RemoteConfig> =\n      (await res.json()) as RemoteConfigAPIResponse<RemoteConfig>;\n    this.completeRequest({ success: SUCCESS_REMOTE_CONFIG });\n    return remoteConfig;\n  };\n\n  completeRequest({ err, success }: { err?: string; success?: string }) {\n    if (err) {\n      throw new Error(err);\n    } else if (success) {\n      this.localConfig.loggerProvider.log(success);\n    }\n  }\n}\n\nexport const createRemoteConfigFetch: CreateRemoteConfigFetch = async <\n  RemoteConfig extends { [Property in keyof RemoteConfig]: RemoteConfig[Property] },\n>({\n  localConfig,\n  configKeys,\n}: {\n  localConfig: Config;\n  configKeys: string[];\n}) => {\n  return new RemoteConfigFetch<RemoteConfig>({ localConfig, configKeys });\n};\n", "import * as remoteConfigFetch from './remote-config';\nexport { RemoteConfigFetch } from './types';\nexport const { createRemoteConfigFetch } = remoteConfigFetch;\n", "import { createRemoteConfigFetch, RemoteConfigFetch } from '@amplitude/analytics-remote-config';\nimport {\n  RequestMetadata,\n  BrowserConfig as IBrowserConfig,\n  AutocaptureOptions,\n  type ElementInteractionsOptions,\n} from '@amplitude/analytics-core';\n\nexport interface AutocaptureOptionsRemoteConfig extends AutocaptureOptions {\n  elementInteractions?: boolean | ElementInteractionsOptionsRemoteConfig;\n}\nexport interface ElementInteractionsOptionsRemoteConfig extends ElementInteractionsOptions {\n  /**\n   * Related to pageUrlAllowlist but holds regex strings which will be initialized and appended to pageUrlAllowlist\n   */\n  pageUrlAllowlistRegex?: string[];\n}\n\nexport type BrowserRemoteConfig = {\n  browserSDK: {\n    autocapture?: AutocaptureOptionsRemoteConfig | boolean;\n  };\n};\n\nexport class BrowserJoinedConfigGenerator {\n  // Local config before generateJoinedConfig is called\n  // Joined config after generateJoinedConfig is called\n  config: IBrowserConfig;\n  remoteConfigFetch: RemoteConfigFetch<BrowserRemoteConfig> | undefined;\n\n  constructor(localConfig: IBrowserConfig) {\n    this.config = localConfig;\n    this.config.loggerProvider.debug(\n      'Local configuration before merging with remote config',\n      JSON.stringify(this.config, null, 2),\n    );\n  }\n\n  async initialize() {\n    this.remoteConfigFetch = await createRemoteConfigFetch<BrowserRemoteConfig>({\n      localConfig: this.config,\n      configKeys: ['analyticsSDK'],\n    });\n  }\n\n  async generateJoinedConfig(): Promise<IBrowserConfig> {\n    try {\n      const remoteConfig =\n        this.remoteConfigFetch &&\n        (await this.remoteConfigFetch.getRemoteConfig('analyticsSDK', 'browserSDK', this.config.sessionId));\n      this.config.loggerProvider.debug('Remote configuration:', JSON.stringify(remoteConfig, null, 2));\n\n      // merge remoteConfig.autocapture and this.config.autocapture\n      // if a field is in remoteConfig.autocapture, use that value\n      // if a field is not in remoteConfig.autocapture, use the value from this.config.autocapture\n      if (remoteConfig && 'autocapture' in remoteConfig) {\n        if (typeof remoteConfig.autocapture === 'boolean') {\n          this.config.autocapture = remoteConfig.autocapture;\n        }\n\n        if (typeof remoteConfig.autocapture === 'object') {\n          const transformedAutocaptureRemoteConfig = { ...remoteConfig.autocapture };\n\n          if (this.config.autocapture === undefined) {\n            this.config.autocapture = remoteConfig.autocapture;\n          }\n\n          // Handle Element Interactions config initialization\n          if (\n            typeof remoteConfig.autocapture.elementInteractions === 'object' &&\n            remoteConfig.autocapture.elementInteractions.pageUrlAllowlistRegex?.length\n          ) {\n            transformedAutocaptureRemoteConfig.elementInteractions = {\n              ...remoteConfig.autocapture.elementInteractions,\n            };\n            const transformedRcElementInteractions = transformedAutocaptureRemoteConfig.elementInteractions;\n\n            const exactAllowList = transformedRcElementInteractions.pageUrlAllowlist ?? [];\n            // Convert string patterns to RegExp objects, warn on invalid patterns and skip them\n            const regexList = [];\n            for (const pattern of remoteConfig.autocapture.elementInteractions.pageUrlAllowlistRegex) {\n              try {\n                regexList.push(new RegExp(pattern));\n              } catch (regexError) {\n                this.config.loggerProvider.warn(`Invalid regex pattern: ${pattern}`, regexError);\n              }\n            }\n\n            const combinedPageUrlAllowlist = exactAllowList.concat(regexList);\n\n            transformedRcElementInteractions.pageUrlAllowlist = combinedPageUrlAllowlist;\n            delete transformedRcElementInteractions.pageUrlAllowlistRegex;\n          }\n\n          if (typeof this.config.autocapture === 'boolean') {\n            this.config.autocapture = {\n              attribution: this.config.autocapture,\n              fileDownloads: this.config.autocapture,\n              formInteractions: this.config.autocapture,\n              pageViews: this.config.autocapture,\n              sessions: this.config.autocapture,\n              elementInteractions: this.config.autocapture,\n              ...transformedAutocaptureRemoteConfig,\n            };\n          }\n\n          if (typeof this.config.autocapture === 'object') {\n            this.config.autocapture = {\n              ...this.config.autocapture,\n              ...transformedAutocaptureRemoteConfig,\n            };\n          }\n        }\n\n        // Override default tracking options if autocapture is updated by remote config\n        this.config.defaultTracking = this.config.autocapture;\n      }\n\n      this.config.loggerProvider.debug('Joined configuration: ', JSON.stringify(this.config, null, 2));\n      this.config.requestMetadata ??= new RequestMetadata();\n      if (this.remoteConfigFetch?.metrics.fetchTimeAPISuccess) {\n        this.config.requestMetadata.recordHistogram(\n          'remote_config_fetch_time_API_success',\n          this.remoteConfigFetch.metrics.fetchTimeAPISuccess,\n        );\n      }\n      if (this.remoteConfigFetch?.metrics.fetchTimeAPIFail) {\n        this.config.requestMetadata.recordHistogram(\n          'remote_config_fetch_time_API_fail',\n          this.remoteConfigFetch.metrics.fetchTimeAPIFail,\n        );\n      }\n    } catch (e) {\n      this.config.loggerProvider.error('Failed to fetch remote configuration because of error: ', e);\n    }\n\n    return this.config;\n  }\n}\n\nexport const createBrowserJoinedConfigGenerator = async (localConfig: IBrowserConfig) => {\n  const joinedConfigGenerator = new BrowserJoinedConfigGenerator(localConfig);\n  await joinedConfigGenerator.initialize();\n  return joinedConfigGenerator;\n};\n", "export const PLUGIN_NAME = '@amplitude/plugin-autocapture-browser';\n\nexport const AMPLITUDE_ELEMENT_CLICKED_EVENT = '[Amplitude] Element Clicked';\nexport const AMPLITUDE_ELEMENT_CHANGED_EVENT = '[Amplitude] Element Changed';\n\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_ID = '[Amplitude] Element ID';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_CLASS = '[Amplitude] Element Class';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_TAG = '[Amplitude] Element Tag';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_TEXT = '[Amplitude] Element Text';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_HIERARCHY = '[Amplitude] Element Hierarchy';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_HREF = '[Amplitude] Element Href';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_LEFT = '[Amplitude] Element Position Left';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_TOP = '[Amplitude] Element Position Top';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_ARIA_LABEL = '[Amplitude] Element Aria Label';\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_ATTRIBUTES = '[Amplitude] Element Attributes';\n\nexport const AMPLITUDE_EVENT_PROP_ELEMENT_PARENT_LABEL = '[Amplitude] Element Parent Label';\nexport const AMPLITUDE_EVENT_PROP_PAGE_URL = '[Amplitude] Page URL';\nexport const AMPLITUDE_EVENT_PROP_PAGE_TITLE = '[Amplitude] Page Title';\nexport const AMPLITUDE_EVENT_PROP_VIEWPORT_HEIGHT = '[Amplitude] Viewport Height';\nexport const AMPLITUDE_EVENT_PROP_VIEWPORT_WIDTH = '[Amplitude] Viewport Width';\n\n// Visual Tagging related constants\nexport const AMPLITUDE_ORIGIN = 'https://app.amplitude.com';\nexport const AMPLITUDE_ORIGIN_EU = 'https://app.eu.amplitude.com';\nexport const AMPLITUDE_ORIGIN_STAGING = 'https://apps.stag2.amplitude.com';\nexport const AMPLITUDE_ORIGINS_MAP = {\n  US: AMPLITUDE_ORIGIN,\n  EU: AMPLITUDE_ORIGIN_EU,\n  STAGING: AMPLITUDE_ORIGIN_STAGING,\n};\n\nexport const AMPLITUDE_VISUAL_TAGGING_SELECTOR_SCRIPT_URL =\n  'https://cdn.amplitude.com/libs/visual-tagging-selector-1.0.0-alpha.js.gz';\n// This is the class name used by the visual tagging selector to highlight the selected element.\n// Should not use this class in the selector.\nexport const AMPLITUDE_VISUAL_TAGGING_HIGHLIGHT_CLASS = 'amp-visual-tagging-selector-highlight';\n", "/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n", "/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n", "/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n */\nexport class Subscription implements SubscriptionLike {\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered finalizers to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _finalizers: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the finalization\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown: initialFinalizer } = this;\n      if (isFunction(initialFinalizer)) {\n        try {\n          initialFinalizer();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _finalizers } = this;\n      if (_finalizers) {\n        this._finalizers = null;\n        for (const finalizer of _finalizers) {\n          try {\n            execFinalizer(finalizer);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a finalizer to this subscription, so that finalization will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever finalizer is passed to it\n   * will automatically be executed (unless the finalizer itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as finalizers to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The finalization logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the finalizer if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever finalizer is handed to it automatically.\n        execFinalizer(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._finalizers = this._finalizers ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a finalizer from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same finalizer instance of a function or an unsubscribable object to a `Subscription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All finalizer instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The finalizer to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _finalizers } = this;\n    _finalizers && arrRemove(_finalizers, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execFinalizer(finalizer: Unsubscribable | (() => void)) {\n  if (isFunction(finalizer)) {\n    finalizer();\n  } else {\n    finalizer.unsubscribe();\n  }\n}\n", "import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n", "import type { TimerHandle } from './timerHandle';\ntype SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearTimeoutFunction = (handle: TimerHandle) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = timeoutProvider;\n    if (delegate?.setTimeout) {\n      return delegate.setTimeout(handler, timeout, ...args);\n    }\n    return setTimeout(handler, timeout, ...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle as any);\n  },\n  delegate: undefined,\n};\n", "import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n", "/* tslint:disable:no-empty */\nexport function noop() { }\n", "import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n", "import { config } from '../config';\n\nlet context: { errorThrown: boolean; error: any } | null = null;\n\n/**\n * Handles dealing with errors for super-gross mode. Creates a context, in which\n * any synchronously thrown errors will be passed to {@link captureError}. Which\n * will record the error such that it will be rethrown after the call back is complete.\n * TODO: Remove in v8\n * @param cb An immediately executed function.\n */\nexport function errorContext(cb: () => void) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    const isRoot = !context;\n    if (isRoot) {\n      context = { errorThrown: false, error: null };\n    }\n    cb();\n    if (isRoot) {\n      const { errorThrown, error } = context!;\n      context = null;\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    // This is the general non-deprecated path for everyone that\n    // isn't crazy enough to use super-gross mode (useDeprecatedSynchronousErrorHandling)\n    cb();\n  }\n}\n\n/**\n * Captures errors only in super-gross mode.\n * @param err the error to capture\n */\nexport function captureError(err: any) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n", "import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\nimport { captureError } from './util/errorContext';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param value The `next` value.\n   */\n  next(value: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param err The `error` exception.\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\n/**\n * This bind is captured here because we want to be able to have\n * compatibility with monoid libraries that tend to use a method named\n * `bind`. In particular, a library called Monio requires this.\n */\nconst _bind = Function.prototype.bind;\n\nfunction bind<Fn extends (...args: any[]) => any>(fn: Fn, thisArg: any): Fn {\n  return _bind.call(fn, thisArg);\n}\n\n/**\n * Internal optimization only, DO NOT EXPOSE.\n * @internal\n */\nclass ConsumerObserver<T> implements Observer<T> {\n  constructor(private partialObserver: Partial<Observer<T>>) {}\n\n  next(value: T): void {\n    const { partialObserver } = this;\n    if (partialObserver.next) {\n      try {\n        partialObserver.next(value);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n\n  error(err: any): void {\n    const { partialObserver } = this;\n    if (partialObserver.error) {\n      try {\n        partialObserver.error(err);\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    } else {\n      handleUnhandledError(err);\n    }\n  }\n\n  complete(): void {\n    const { partialObserver } = this;\n    if (partialObserver.complete) {\n      try {\n        partialObserver.complete();\n      } catch (error) {\n        handleUnhandledError(error);\n      }\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let partialObserver: Partial<Observer<T>>;\n    if (isFunction(observerOrNext) || !observerOrNext) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      partialObserver = {\n        next: (observerOrNext ?? undefined) as ((value: T) => void) | undefined,\n        error: error ?? undefined,\n        complete: complete ?? undefined,\n      };\n    } else {\n      // The first argument is a partial observer.\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n        partialObserver = {\n          next: observerOrNext.next && bind(observerOrNext.next, context),\n          error: observerOrNext.error && bind(observerOrNext.error, context),\n          complete: observerOrNext.complete && bind(observerOrNext.complete, context),\n        };\n      } else {\n        // The \"normal\" path. Just use the partial observer directly.\n        partialObserver = observerOrNext;\n      }\n    }\n\n    // Wrap the partial observer to ensure it's a full observer, and\n    // make sure proper error handling is accounted for.\n    this.destination = new ConsumerObserver(partialObserver);\n  }\n}\n\nfunction handleUnhandledError(error: any) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    captureError(error);\n  } else {\n    // Ideal path, we report this as an unhandled error,\n    // which is thrown on a new call stack.\n    reportUnhandledError(error);\n  }\n}\n\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent.\n * @param subscriber The stopped subscriber.\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n", "/**\n * Symbol.observable or a string \"@@observable\". Used for interop\n *\n * @deprecated We will no longer be exporting this symbol in upcoming versions of RxJS.\n * Instead polyfill and use Symbol.observable directly *or* use https://www.npmjs.com/package/symbol-observable\n */\nexport const observable: string | symbol = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n", "/**\n * This function takes one parameter and just returns it. Simply put,\n * this is like `<T>(x: T): T => x`.\n *\n * ## Examples\n *\n * This is useful in some cases when using things like `mergeMap`\n *\n * ```ts\n * import { interval, take, map, range, mergeMap, identity } from 'rxjs';\n *\n * const source$ = interval(1000).pipe(take(5));\n *\n * const result$ = source$.pipe(\n *   map(i => range(i)),\n *   mergeMap(identity) // same as mergeMap(x => x)\n * );\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * Or when you want to selectively apply an operator\n *\n * ```ts\n * import { interval, take, identity } from 'rxjs';\n *\n * const shouldLimit = () => Math.random() < 0.5;\n *\n * const source$ = interval(1000);\n *\n * const result$ = source$.pipe(shouldLimit() ? take(5) : identity);\n *\n * result$.subscribe({\n *   next: console.log\n * });\n * ```\n *\n * @param x Any value that is returned by this function\n * @returns The value passed as the first parameter to this function\n */\nexport function identity<T>(x: T): T {\n  return x;\n}\n", "import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\n/**\n * pipe() can be called on one or more functions, each of which can take one argument (\"UnaryFunction\")\n * and uses it to return a value.\n * It returns a function that takes one argument, passes it to the first UnaryFunction, and then\n * passes the result to the next one, passes that result to the next one, and so on.  \n */\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n", "import { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @param subscribe The function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @param subscribe the subscriber function to be passed to the Observable constructor\n   * @return A new observable.\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @param operator the operator defining the operation to take on the observable\n   * @return A new observable with the Operator applied.\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext?: Partial<Observer<T>> | ((value: T) => void)): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * #### Examples\n   *\n   * Subscribe with an {@link guide/observer Observer}\n   *\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Subscribe with functions ({@link deprecations/subscribe-arguments deprecated})\n   *\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // 'Adding: 1'\n   * // 'Adding: 2'\n   * // 'Adding: 3'\n   * // 'Sum equals: 6'\n   * ```\n   *\n   * Cancel a subscription\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // 'unsubscribed!' after 2.5s\n   * ```\n   *\n   * @param observerOrNext Either an {@link Observer} with some or all callback methods,\n   * or the `next` handler that is called for each value emitted from the subscribed Observable.\n   * @param error A handler for a terminal event resulting from an error. If no error handler is provided,\n   * the error will be thrown asynchronously as unhandled.\n   * @param complete A handler for a terminal event resulting from successful completion.\n   * @return A subscription reference to the registered handlers.\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    errorContext(() => {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    });\n\n    return subscriber;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * #### Example\n   *\n   * ```ts\n   * import { interval, take } from 'rxjs';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *   let total = 0;\n   *\n   *   await source$.forEach(value => {\n   *     total += value;\n   *     console.log('observable -> ' + value);\n   *   });\n   *\n   *   return total;\n   * }\n   *\n   * getTotal().then(\n   *   total => console.log('Total: ' + total)\n   * );\n   *\n   * // Expected:\n   * // 'observable -> 0'\n   * // 'observable -> 1'\n   * // 'observable -> 2'\n   * // 'observable -> 3'\n   * // 'Total: 6'\n   * ```\n   *\n   * @param next A handler for each value emitted by the observable.\n   * @return A promise that either resolves on observable completion or\n   * rejects with the handled error.\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      const subscriber = new SafeSubscriber<T>({\n        next: (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscriber.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve,\n      });\n      this.subscribe(subscriber);\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @return This instance of the observable.\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   *\n   * ## Example\n   *\n   * ```ts\n   * import { interval, filter, map, scan } from 'rxjs';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x));\n   * ```\n   *\n   * @return The Observable result of all the operators having been called\n   * in the order they were passed in.\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n", "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n", "import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n", "import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval, tap, publish, refCount } from 'rxjs';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap(num => console.log(`refCount ${ num }`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap(num => console.log(`publish ${ num }`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the `publish` operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = createOperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n", "import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n", "import { TimestampProvider } from '../types';\n\ninterface PerformanceTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const performanceTimestampProvider: PerformanceTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (performanceTimestampProvider.delegate || performance).now();\n  },\n  delegate: undefined,\n};\n", "import { Subscription } from '../Subscription';\n\ninterface AnimationFrameProvider {\n  schedule(callback: FrameRequestCallback): Subscription;\n  requestAnimationFrame: typeof requestAnimationFrame;\n  cancelAnimationFrame: typeof cancelAnimationFrame;\n  delegate:\n    | {\n        requestAnimationFrame: typeof requestAnimationFrame;\n        cancelAnimationFrame: typeof cancelAnimationFrame;\n      }\n    | undefined;\n}\n\nexport const animationFrameProvider: AnimationFrameProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  schedule(callback) {\n    let request = requestAnimationFrame;\n    let cancel: typeof cancelAnimationFrame | undefined = cancelAnimationFrame;\n    const { delegate } = animationFrameProvider;\n    if (delegate) {\n      request = delegate.requestAnimationFrame;\n      cancel = delegate.cancelAnimationFrame;\n    }\n    const handle = request((timestamp) => {\n      // Clear the cancel function. The request has been fulfilled, so\n      // attempting to cancel the request upon unsubscription would be\n      // pointless.\n      cancel = undefined;\n      callback(timestamp);\n    });\n    return new Subscription(() => cancel?.(handle));\n  },\n  requestAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.requestAnimationFrame || requestAnimationFrame)(...args);\n  },\n  cancelAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.cancelAnimationFrame || cancelAnimationFrame)(...args);\n  },\n  delegate: undefined,\n};\n", "import { Observable } from '../../Observable';\nimport { TimestampProvider } from '../../types';\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\n\n/**\n * An observable of animation frames\n *\n * Emits the amount of time elapsed since subscription and the timestamp on each animation frame.\n * Defaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\n *\n * Every subscription will start a separate animation loop. Since animation frames are always scheduled\n * by the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\n * should not be much different or have more overhead than looping over an array of events during\n * a single animation frame. However, if for some reason the developer would like to ensure the\n * execution of animation-related handlers are all executed during the same task by the engine,\n * the `share` operator can be used.\n *\n * This is useful for setting up animations with RxJS.\n *\n * ## Examples\n *\n * Tweening a div to move it on the screen\n *\n * ```ts\n * import { animationFrames, map, takeWhile, endWith } from 'rxjs';\n *\n * function tween(start: number, end: number, duration: number) {\n *   const diff = end - start;\n *   return animationFrames().pipe(\n *     // Figure out what percentage of time has passed\n *     map(({ elapsed }) => elapsed / duration),\n *     // Take the vector while less than 100%\n *     takeWhile(v => v < 1),\n *     // Finish with 100%\n *     endWith(1),\n *     // Calculate the distance traveled between start and end\n *     map(v => v * diff + start)\n *   );\n * }\n *\n * // Setup a div for us to move around\n * const div = document.createElement('div');\n * document.body.appendChild(div);\n * div.style.position = 'absolute';\n * div.style.width = '40px';\n * div.style.height = '40px';\n * div.style.backgroundColor = 'lime';\n * div.style.transform = 'translate3d(10px, 0, 0)';\n *\n * tween(10, 200, 4000).subscribe(x => {\n *   div.style.transform = `translate3d(${ x }px, 0, 0)`;\n * });\n * ```\n *\n * Providing a custom timestamp provider\n *\n * ```ts\n * import { animationFrames, TimestampProvider } from 'rxjs';\n *\n * // A custom timestamp provider\n * let now = 0;\n * const customTSProvider: TimestampProvider = {\n *   now() { return now++; }\n * };\n *\n * const source$ = animationFrames(customTSProvider);\n *\n * // Log increasing numbers 0...1...2... on every animation frame.\n * source$.subscribe(({ elapsed }) => console.log(elapsed));\n * ```\n *\n * @param timestampProvider An object with a `now` method that provides a numeric timestamp\n */\nexport function animationFrames(timestampProvider?: TimestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\n/**\n * Does the work of creating the observable for `animationFrames`.\n * @param timestampProvider The timestamp provider to use to create the observable\n */\nfunction animationFramesFactory(timestampProvider?: TimestampProvider) {\n  return new Observable<{ timestamp: number; elapsed: number }>((subscriber) => {\n    // If no timestamp provider is specified, use performance.now() - as it\n    // will return timestamps 'compatible' with those passed to the run\n    // callback and won't be affected by NTP adjustments, etc.\n    const provider = timestampProvider || performanceTimestampProvider;\n\n    // Capture the start time upon subscription, as the run callback can remain\n    // queued for a considerable period of time and the elapsed time should\n    // represent the time elapsed since subscription - not the time since the\n    // first rendered animation frame.\n    const start = provider.now();\n\n    let id = 0;\n    const run = () => {\n      if (!subscriber.closed) {\n        id = animationFrameProvider.requestAnimationFrame((timestamp: DOMHighResTimeStamp | number) => {\n          id = 0;\n          // Use the provider's timestamp to calculate the elapsed time. Note that\n          // this means - if the caller hasn't passed a provider - that\n          // performance.now() will be used instead of the timestamp that was\n          // passed to the run callback. The reason for this is that the timestamp\n          // passed to the callback can be earlier than the start time, as it\n          // represents the time at which the browser decided it would render any\n          // queued frames - and that time can be earlier the captured start time.\n          const now = provider.now();\n          subscriber.next({\n            timestamp: timestampProvider ? now : timestamp,\n            elapsed: now - start,\n          });\n          run();\n        });\n      }\n    };\n\n    run();\n\n    return () => {\n      if (id) {\n        animationFrameProvider.cancelAnimationFrame(id);\n      }\n    };\n  });\n}\n\n/**\n * In the common case, where the timestamp provided by the rAF API is used,\n * we use this shared observable to reduce overhead.\n */\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n", "import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\nimport { errorContext } from './util/errorContext';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n\n  private currentObservers: Observer<T>[] | null = null;\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        if (!this.currentObservers) {\n          this.currentObservers = Array.from(this.observers);\n        }\n        for (const observer of this.currentObservers) {\n          observer.next(value);\n        }\n      }\n    });\n  }\n\n  error(err: any) {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.hasError = this.isStopped = true;\n        this.thrownError = err;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.error(err);\n        }\n      }\n    });\n  }\n\n  complete() {\n    errorContext(() => {\n      this._throwIfClosed();\n      if (!this.isStopped) {\n        this.isStopped = true;\n        const { observers } = this;\n        while (observers.length) {\n          observers.shift()!.complete();\n        }\n      }\n    });\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = this.currentObservers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    if (hasError || isStopped) {\n      return EMPTY_SUBSCRIPTION;\n    }\n    this.currentObservers = null;\n    observers.push(subscriber);\n    return new Subscription(() => {\n      this.currentObservers = null;\n      arrRemove(observers, subscriber);\n    });\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create custom Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return Observable that this Subject casts to.\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n", "import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n", "import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple of exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param _bufferSize The size of the buffer to replay on subscription\n   * @param _windowTime The amount of time the buffered items will stay buffered\n   * @param _timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n", "import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param state Some contextual data that the `work` function uses when called by the\n   * Scheduler.\n   * @param delay Time to wait before executing the work, where the time unit is implicit\n   * and defined by the Scheduler.\n   * @return A subscription in order to be able to unsubscribe the scheduled work.\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n", "import type { TimerHandle } from './timerHandle';\ntype SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => TimerHandle;\ntype ClearIntervalFunction = (handle: TimerHandle) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(handler: () => void, timeout?: number, ...args) {\n    const { delegate } = intervalProvider;\n    if (delegate?.setInterval) {\n      return delegate.setInterval(handler, timeout, ...args);\n    }\n    return setInterval(handler, timeout, ...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle as any);\n  },\n  delegate: undefined,\n};\n", "import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: TimerHandle | undefined;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id ?? this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: TimerHandle, delay: number = 0): TimerHandle {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id?: TimerHandle, delay: number | null = 0): TimerHandle | undefined {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    if (id != null) {\n      intervalProvider.clearInterval(id);\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      // HACK: Since code elsewhere is relying on the \"truthiness\" of the\n      // return here, we can't have it return \"\" or 0 or false.\n      // TODO: Clean this up when we refactor schedulers mid-version-8 or so.\n      errorValue = e ? e : new Error('Scheduled action threw falsy error');\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n", "let nextHandle = 1;\n// The promise needs to be created lazily otherwise it won't be patched by Zones\nlet resolved: Promise<any>;\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n    resolved.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n", "import { Immediate } from '../util/Immediate';\nimport type { TimerHandle } from './timerHandle';\nconst { setImmediate, clearImmediate } = Immediate;\n\ntype SetImmediateFunction = (handler: () => void, ...args: any[]) => TimerHandle;\ntype ClearImmediateFunction = (handle: TimerHandle) => void;\n\ninterface ImmediateProvider {\n  setImmediate: SetImmediateFunction;\n  clearImmediate: ClearImmediateFunction;\n  delegate:\n    | {\n        setImmediate: SetImmediateFunction;\n        clearImmediate: ClearImmediateFunction;\n      }\n    | undefined;\n}\n\nexport const immediateProvider: ImmediateProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setImmediate(...args) {\n    const { delegate } = immediateProvider;\n    return (delegate?.setImmediate || setImmediate)(...args);\n  },\n  clearImmediate(handle) {\n    const { delegate } = immediateProvider;\n    return (delegate?.clearImmediate || clearImmediate)(handle as any);\n  },\n  delegate: undefined,\n};\n", "import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: TimerHandle, delay: number = 0): TimerHandle | undefined {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested microtask and set the scheduled flag to undefined\n    // so the next AsapAction will request its own.\n    const { actions } = scheduler;\n    if (id != null && actions[actions.length - 1]?.id !== id) {\n      immediateProvider.clearImmediate(id);\n      if (scheduler._scheduled === id) {\n        scheduler._scheduled = undefined;\n      }\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param work A function representing a task, or some unit of work to be\n   * executed by the Scheduler.\n   * @param delay Time to wait before executing the work, where the time unit is\n   * implicit and defined by the Scheduler itself.\n   * @param state Some contextual data that the `work` function uses when called\n   * by the Scheduler.\n   * @return A subscription in order to be able to unsubscribe the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n", "import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { TimerHandle } from './timerHandle';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @internal\n   */\n  public _scheduled: TimerHandle | undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```ts\n * import { asapScheduler, asyncScheduler } from 'rxjs';\n *\n * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n * asapScheduler.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n */\n\nexport const asapScheduler = new AsapScheduler(AsapAction);\n\n/**\n * @deprecated Renamed to {@link asapScheduler}. Will be removed in v8.\n */\nexport const asap = asapScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\nimport { TimerHandle } from './timerHandle';\n\nexport class QueueAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: QueueScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return delay > 0 || this.closed ? super.execute(state, delay) : this._execute(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n\n    // Otherwise flush the scheduler starting with this action.\n    scheduler.flush(this);\n\n    // HACK: In the past, this was returning `void`. However, `void` isn't a valid\n    // `TimerHandle`, and generally the return value here isn't really used. So the\n    // compromise is to return `0` which is both \"falsy\" and a valid `TimerHandle`,\n    // as opposed to refactoring every other instanceo of `requestAsyncId`.\n    return 0;\n  }\n}\n", "import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n", "import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\n\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated Renamed to {@link queueScheduler}. Will be removed in v8.\n */\nexport const queue = queueScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\nimport { animationFrameProvider } from './animationFrameProvider';\nimport { TimerHandle } from './timerHandle';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n  }\n\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: TimerHandle, delay: number = 0): TimerHandle | undefined {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if (delay != null ? delay > 0 : this.delay > 0) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested animation frame and set the scheduled flag to\n    // undefined so the next AnimationFrameAction will request its own.\n    const { actions } = scheduler;\n    if (id != null && id === scheduler._scheduled && actions[actions.length - 1]?.id !== id) {\n      animationFrameProvider.cancelAnimationFrame(id as number);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n", "import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    let flushId;\n    if (action) {\n      flushId = action.id;\n    } else {\n      flushId = this._scheduled;\n      this._scheduled = undefined;\n    }\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n", "import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```ts\n * // html: <div style=\"background: #0ff;\"></div>\n * import { animationFrameScheduler } from 'rxjs';\n *\n * const div = document.querySelector('div');\n *\n * animationFrameScheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see a div element growing in height\n * ```\n */\n\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\n\n/**\n * @deprecated Renamed to {@link animationFrameScheduler}. Will be removed in v8.\n */\nexport const animationFrame = animationFrameScheduler;\n", "import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\nimport { TimerHandle } from './timerHandle';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n  /** @deprecated Not used in VirtualTimeScheduler directly. Will be removed in v8. */\n  static frameTimeFactor = 10;\n\n  /**\n   * The current frame for the state of the virtual scheduler instance. The difference\n   * between two \"frames\" is synonymous with the passage of \"virtual time units\". So if\n   * you record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\n   * that means `10` virtual time units have passed.\n   */\n  public frame: number = 0;\n\n  /**\n   * Used internally to examine the current virtual action index being processed.\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  public index: number = -1;\n\n  /**\n   * This creates an instance of a `VirtualTimeScheduler`. Experts only. The signature of\n   * this constructor is likely to change in the long run.\n   *\n   * @param schedulerActionCtor The type of Action to initialize when initializing actions during scheduling.\n   * @param maxFrames The maximum number of frames to process before stopping. Used to prevent endless flush cycles.\n   */\n  constructor(schedulerActionCtor: typeof AsyncAction = VirtualAction as any, public maxFrames: number = Infinity) {\n    super(schedulerActionCtor, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   */\n  public flush(): void {\n    const { actions, maxFrames } = this;\n    let error: any;\n    let action: AsyncAction<any> | undefined;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    }\n\n    if (error) {\n      while ((action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\nexport class VirtualAction<T> extends AsyncAction<T> {\n  protected active: boolean = true;\n\n  constructor(\n    protected scheduler: VirtualTimeScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void,\n    protected index: number = (scheduler.index += 1)\n  ) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return super.schedule(state, delay);\n      }\n      this.active = false;\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      const action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      // If someone schedules something with Infinity, it'll never happen. So we\n      // don't even schedule it.\n      return Subscription.EMPTY;\n    }\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): TimerHandle {\n    this.delay = scheduler.frame + delay;\n    const { actions } = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return 1;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): TimerHandle | undefined {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  private static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * A simple Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * A simple Observable that only emits the complete notification. It can be used\n * for composing with other Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n *\n * Emit the number 7, then complete\n *\n * ```ts\n * import { EMPTY, startWith } from 'rxjs';\n *\n * const result = EMPTY.pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * Map and flatten only odd numbers to the sequence `'a'`, `'b'`, `'c'`\n *\n * ```ts\n * import { interval, mergeMap, of, EMPTY } from 'rxjs';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : EMPTY),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link NEVER}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n", "import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n", "export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');", "import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n", "import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n", "import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n", "/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n", "export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n", "import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n", "import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n", "import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n", "import { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay: number,\n  repeat: true\n): void;\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay?: number,\n  repeat?: false\n): Subscription;\n\nexport function executeSchedule(\n  parentSubscription: Subscription,\n  scheduler: SchedulerLike,\n  work: () => void,\n  delay = 0,\n  repeat = false\n): Subscription | void {\n  const scheduleSubscription = scheduler.schedule(function (this: SchedulerAction<any>) {\n    work();\n    if (repeat) {\n      parentSubscription.add(this.schedule(null, delay));\n    } else {\n      this.unsubscribe();\n    }\n  }, delay);\n\n  parentSubscription.add(scheduleSubscription);\n\n  if (!repeat) {\n    // Because user-land scheduler implementations are unlikely to properly reuse\n    // Actions for repeat scheduling, we can't trust that the returned subscription\n    // will control repeat subscription scenarios. So we're trying to avoid using them\n    // incorrectly within this library.\n    return scheduleSubscription;\n  }\n}\n", "/** @prettier */\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint\n *\n * ```ts\n * import { interval, observeOn, animationFrameScheduler } from 'rxjs';\n *\n * const someDiv = document.createElement('div');\n * someDiv.style.cssText = 'width: 200px;background: #09c';\n * document.body.appendChild(someDiv);\n * const intervals = interval(10);      // Intervals are scheduled\n *                                      // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler) // ...but we will observe on animationFrame\n * )                                    // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param delay Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay),\n        () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay),\n        (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)\n      )\n    );\n  });\n}\n", "import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emitted by Observable `a`:\n *\n * ```ts\n * import { of, subscribeOn, asyncScheduler, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { InteropObservable, SchedulerLike } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { observeOn } from '../operators/observeOn';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    executeSchedule(subscriber, scheduler, () => {\n      // Create the iterator.\n      iterator = (input as any)[Symbol_iterator]();\n\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          let value: T;\n          let done: boolean | undefined;\n          try {\n            // Pull the value out of the iterator\n            ({ value, done } = iterator.next());\n          } catch (err) {\n            // We got an error while pulling from the iterator\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n          }\n        },\n        0,\n        true\n      );\n    });\n\n    // During finalization, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n", "import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n", "import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n", "import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { innerFrom } from './innerFrom';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike | undefined): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from, take } from 'rxjs';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * With `asyncScheduler`\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // 'start'\n * // 'end'\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param input A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param scheduler An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return An Observable converted from {@link ObservableInput}.\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n", "import { SchedulerLike, ValueFromArray } from '../types';\nimport { Observable } from '../Observable';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n *   .subscribe({\n *     next: value => console.log('next:', value),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param args A comma separated list of arguments you want to be emitted.\n * @return An Observable that synchronously emits the arguments described\n * above and then immediately completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return from(args as T[], scheduler);\n}\n", "import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *   const error: any = new Error(`This is error number ${ ++errorCount }`);\n *   error.timestamp = Date.now();\n *   return error;\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimestamp$.subscribe({\n *   error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message for each subscription\n * ```\n *\n * ### Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary\n *\n * ```ts\n * import { of, concatMap, timer, throwError } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // This is probably overkill.\n *       return throwError(() => new Error(`Invalid time ${ ms }`));\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * You can just throw the error instead\n *\n * ```ts\n * import { of, concatMap, timer } from 'rxjs';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *   concatMap(ms => {\n *     if (ms < 10000) {\n *       return timer(ms);\n *     } else {\n *       // Cleaner and easier to read for most folks.\n *       throw new Error(`Invalid time ${ ms }`);\n *     }\n *   })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n", "import { PartialObserver, ObservableNotification, CompleteNotification, NextNotification, ErrorNotification } from './types';\nimport { Observable } from './Observable';\nimport { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\n * It will not be replaced with a const enum as those are not compatible with isolated modules.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n * @deprecated It is NOT recommended to create instances of `Notification` directly.\n * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n * Will be removed in v8.\n */\nexport class Notification<T> {\n  /**\n   * A value signifying that the notification will \"next\" if observed. In truth,\n   * This is really synonymous with just checking `kind === \"N\"`.\n   * @deprecated Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\n   */\n  readonly hasValue: boolean;\n\n  /**\n   * Creates a \"Next\" notification object.\n   * @param kind Always `'N'`\n   * @param value The value to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createNext createNext} instead.\n   */\n  constructor(kind: 'N', value?: T);\n  /**\n   * Creates an \"Error\" notification object.\n   * @param kind Always `'E'`\n   * @param value Always `undefined`\n   * @param error The error to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createError createError} instead.\n   */\n  constructor(kind: 'E', value: undefined, error: any);\n  /**\n   * Creates a \"completion\" notification object.\n   * @param kind Always `'C'`\n   * @deprecated Internal implementation detail. Use {@link Notification#createComplete createComplete} instead.\n   */\n  constructor(kind: 'C');\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   */\n  observe(observer: PartialObserver<T>): void {\n    return observeNotification(this as ObservableNotification<T>, observer);\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void): void;\n  do(nextHandler: (value: T) => void, errorHandler?: (err: any) => void, completeHandler?: () => void): void {\n    const { kind, value, error } = this;\n    return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void): void;\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(observer: PartialObserver<T>): void;\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    return isFunction((nextOrObserver as any)?.next)\n      ? this.observe(nextOrObserver as PartialObserver<T>)\n      : this.do(nextOrObserver as (value: T) => void, error as any, complete as any);\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   *\n   * @deprecated Will be removed in v8. To convert a `Notification` to an {@link Observable},\n   * use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`.\n   */\n  toObservable(): Observable<T> {\n    const { kind, value, error } = this;\n    // Select the observable to return by `kind`\n    const result =\n      kind === 'N'\n        ? // Next kind. Return an observable of that value.\n          of(value!)\n        : //\n        kind === 'E'\n        ? // Error kind. Return an observable that emits the error.\n          throwError(() => error)\n        : //\n        kind === 'C'\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\n          EMPTY\n        : // Unknown kind, return falsy, so we error below.\n          0;\n    if (!result) {\n      // TODO: consider removing this check. The only way to cause this would be to\n      // use the Notification constructor directly in a way that is not type-safe.\n      // and direct use of the Notification constructor is deprecated.\n      throw new TypeError(`Unexpected notification kind ${kind}`);\n    }\n    return result;\n  }\n\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param value The `next` value.\n   * @return The \"next\" Notification representing the argument.\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createNext<T>(value: T) {\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param err The `error` error.\n   * @return The \"error\" Notification representing the argument.\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createError(err?: any) {\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return The valueless \"complete\" Notification.\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createComplete(): Notification<never> & CompleteNotification {\n    return Notification.completeNotification;\n  }\n}\n\n/**\n * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n * If the handler is missing it will do nothing. Even if the notification is an error, if\n * there is no error handler on the observer, an error will not be thrown, it will noop.\n * @param notification The notification object to observe.\n * @param observer The observer to notify.\n */\nexport function observeNotification<T>(notification: ObservableNotification<T>, observer: PartialObserver<T>) {\n  const { kind, value, error } = notification as any;\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n  kind === 'N' ? observer.next?.(value!) : kind === 'E' ? observer.error?.(error) : observer.complete?.();\n}\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass(\n  (_super) =>\n    function EmptyErrorImpl(this: any) {\n      _super(this);\n      this.name = 'EmptyError';\n      this.message = 'no elements in sequence';\n    }\n);\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface ArgumentOutOfRangeError extends Error {}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ArgumentOutOfRangeError;\n}\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = createErrorClass(\n  (_super) =>\n    function ArgumentOutOfRangeErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ArgumentOutOfRangeError';\n      this.message = 'argument out of range';\n    }\n);\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface NotFoundError extends Error {}\n\nexport interface NotFoundErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): NotFoundError;\n}\n\n/**\n * An error thrown when a value or values are missing from an\n * observable sequence.\n *\n * @see {@link operators/single}\n */\nexport const NotFoundError: NotFoundErrorCtor = createErrorClass(\n  (_super) =>\n    function NotFoundErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'NotFoundError';\n      this.message = message;\n    }\n);\n", "import { createErrorClass } from './createErrorClass';\n\nexport interface SequenceError extends Error {}\n\nexport interface SequenceErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): SequenceError;\n}\n\n/**\n * An error thrown when something is wrong with the sequence of\n * values arriving on the observable.\n *\n * @see {@link operators/single}\n */\nexport const SequenceError: SequenceErrorCtor = createErrorClass(\n  (_super) =>\n    function SequenceErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'SequenceError';\n      this.message = message;\n    }\n);\n", "/**\n * Checks to see if a value is not only a `Date` object,\n * but a *valid* `Date` object that can be converted to a\n * number. For example, `new Date('blah')` is indeed an\n * `instanceof Date`, however it cannot be converted to a\n * number.\n */\nexport function isValidDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value as any);\n}\n", "import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { isValidDate } from '../util/isDate';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport interface TimeoutConfig<T, O extends ObservableInput<unknown> = ObservableInput<T>, M = unknown> {\n  /**\n   * The time allowed between values from the source before timeout is triggered.\n   */\n  each?: number;\n\n  /**\n   * The relative time as a `number` in milliseconds, or a specific time as a `Date` object,\n   * by which the first value must arrive from the source before timeout is triggered.\n   */\n  first?: number | Date;\n\n  /**\n   * The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n   */\n  scheduler?: SchedulerLike;\n\n  /**\n   * A factory used to create observable to switch to when timeout occurs. Provides\n   * a {@link TimeoutInfo} about the source observable's emissions and what delay or\n   * exact time triggered the timeout.\n   */\n  with?: (info: TimeoutInfo<T, M>) => O;\n\n  /**\n   * Optional additional metadata you can provide to code that handles\n   * the timeout, will be provided through the {@link TimeoutError}.\n   * This can be used to help identify the source of a timeout or pass along\n   * other information related to the timeout.\n   */\n  meta?: M;\n}\n\nexport interface TimeoutInfo<T, M = unknown> {\n  /** Optional metadata that was provided to the timeout configuration. */\n  readonly meta: M;\n  /** The number of messages seen before the timeout */\n  readonly seen: number;\n  /** The last message seen */\n  readonly lastValue: T | null;\n}\n\n/**\n * An error emitted when a timeout occurs.\n */\nexport interface TimeoutError<T = unknown, M = unknown> extends Error {\n  /**\n   * The information provided to the error by the timeout\n   * operation that created the error. Will be `null` if\n   * used directly in non-RxJS code with an empty constructor.\n   * (Note that using this constructor directly is not recommended,\n   * you should create your own errors)\n   */\n  info: TimeoutInfo<T, M> | null;\n}\n\nexport interface TimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new <T = unknown, M = unknown>(info?: TimeoutInfo<T, M>): TimeoutError<T, M>;\n}\n\n/**\n * An error thrown by the {@link timeout} operator.\n *\n * Provided so users can use as a type and do quality comparisons.\n * We recommend you do not subclass this or create instances of this class directly.\n * If you have need of a error representing a timeout, you should\n * create your own error class and use that.\n *\n * @see {@link timeout}\n */\nexport const TimeoutError: TimeoutErrorCtor = createErrorClass(\n  (_super) =>\n    function TimeoutErrorImpl(this: any, info: TimeoutInfo<any> | null = null) {\n      _super(this);\n      this.message = 'Timeout has occurred';\n      this.name = 'TimeoutError';\n      this.info = info;\n    }\n);\n\n/**\n * If `with` is provided, this will return an observable that will switch to a different observable if the source\n * does not push values within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ## Examples\n *\n * Emit a custom error if there is too much time between values\n *\n * ```ts\n * import { interval, timeout, throwError } from 'rxjs';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *     super('It was too slow');\n *     this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow$ = interval(900);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => throwError(() => new CustomTimeoutError())\n *   })\n * )\n * .subscribe({\n *   error: console.error\n * });\n * ```\n *\n * Switch to a faster observable if your source is slow.\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * const slow$ = interval(900);\n * const fast$ = interval(500);\n *\n * slow$.pipe(\n *   timeout({\n *     each: 1000,\n *     with: () => fast$,\n *   })\n * )\n * .subscribe(console.log);\n * ```\n * @param config The configuration for the timeout.\n */\nexport function timeout<T, O extends ObservableInput<unknown>, M = unknown>(\n  config: TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n\n/**\n * Returns an observable that will error or switch to a different observable if the source does not push values\n * within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Handling TimeoutErrors\n *\n * If no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\n * The timeout error provides useful information you can examine when you're handling the error. The most common way to handle\n * the error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\n * directly, if your error handling is only a side effect (such as notifying the user, or logging).\n *\n * In this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\n * not from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n *\n * ## Examples\n *\n * Emit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n *\n * ```ts\n * import { interval, timeout } from 'rxjs';\n *\n * // A random interval that lasts between 0 and 10 seconds per tick\n * const source$ = interval(Math.round(Math.random() * 10_000));\n *\n * source$.pipe(\n *   timeout({ first: 5_000 })\n * )\n * .subscribe({\n *   next: console.log,\n *   error: console.error\n * });\n * ```\n *\n * Emit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\n * and subscription.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n *\n * Emit a {@link TimeoutError} if the source does not emit before 7 seconds, _or_ if the source waits longer than\n * 5 seconds between any two values after the first.\n *\n * ```ts\n * import { timer, timeout, expand } from 'rxjs';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10_000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime())\n *   .pipe(expand(() => timer(getRandomTime())));\n *\n * source$\n *   .pipe(timeout({ first: 7_000, each: 5_000 }))\n *   .subscribe({\n *     next: console.log,\n *     error: console.error\n *   });\n * ```\n */\nexport function timeout<T, M = unknown>(config: Omit<TimeoutConfig<T, any, M>, 'with'>): OperatorFunction<T, T>;\n\n/**\n * Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\n * This is functionally the same as `timeout({ first: someDate })`.\n *\n * <span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n *\n * ![](timeout.png)\n *\n * @param first The date to at which the resulting observable will timeout if the source observable\n * does not emit at least one value.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(first: Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\n * This is functionally the same as `timeout({ each: milliseconds })`.\n *\n * <span class=\"informal\">Errors if it waits too long between any value</span>\n *\n * ![](timeout.png)\n *\n * @param each The time allowed between each pushed value from the source before the resulting observable\n * will timeout.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(each: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * @see {@link timeoutWith}\n *\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it throws an error.\n */\nexport function timeout<T, O extends ObservableInput<any>, M>(\n  config: number | Date | TimeoutConfig<T, O, M>,\n  schedulerArg?: SchedulerLike\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  // Intentionally terse code.\n  // If the first argument is a valid `Date`, then we use it as the `first` config.\n  // Otherwise, if the first argument is a `number`, then we use it as the `each` config.\n  // Otherwise, it can be assumed the first argument is the configuration object itself, and\n  // we destructure that into what we're going to use, setting important defaults as we do.\n  // NOTE: The default for `scheduler` will be the `scheduler` argument if it exists, or\n  // it will default to the `asyncScheduler`.\n  const {\n    first,\n    each,\n    with: _with = timeoutErrorFactory,\n    scheduler = schedulerArg ?? asyncScheduler,\n    meta = null!,\n  } = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config) as TimeoutConfig<T, O, M>;\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate((source, subscriber) => {\n    // This subscription encapsulates our subscription to the\n    // source for this operator. We're capturing it separately,\n    // because if there is a `with` observable to fail over to,\n    // we want to unsubscribe from our original subscription, and\n    // hand of the subscription to that one.\n    let originalSourceSubscription: Subscription;\n    // The subscription for our timeout timer. This changes\n    // every time we get a new value.\n    let timerSubscription: Subscription;\n    // A bit of state we pass to our with and error factories to\n    // tell what the last value we saw was.\n    let lastValue: T | null = null;\n    // A bit of state we pass to the with and error factories to\n    // tell how many values we have seen so far.\n    let seen = 0;\n    const startTimer = (delay: number) => {\n      timerSubscription = executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          try {\n            originalSourceSubscription.unsubscribe();\n            innerFrom(\n              _with!({\n                meta,\n                lastValue,\n                seen,\n              })\n            ).subscribe(subscriber);\n          } catch (err) {\n            subscriber.error(err);\n          }\n        },\n        delay\n      );\n    };\n\n    originalSourceSubscription = source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // clear the timer so we can emit and start another one.\n          timerSubscription?.unsubscribe();\n          seen++;\n          // Emit\n          subscriber.next((lastValue = value));\n          // null | undefined are both < 0. Thanks, JavaScript.\n          each! > 0 && startTimer(each!);\n        },\n        undefined,\n        undefined,\n        () => {\n          if (!timerSubscription?.closed) {\n            timerSubscription?.unsubscribe();\n          }\n          // Be sure not to hold the last value in memory after unsubscription\n          // it could be quite large.\n          lastValue = null;\n        }\n      )\n    );\n\n    // Intentionally terse code.\n    // If we've `seen` a value, that means the \"first\" clause was met already, if it existed.\n    //   it also means that a timer was already started for \"each\" (in the next handler above).\n    // If `first` was provided, and it's a number, then use it.\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\n    !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\n  });\n}\n\n/**\n * The default function to use to emit an error when timeout occurs and a `with` function\n * is not specified.\n * @param info The information about the timeout to pass along to the error\n */\nfunction timeoutErrorFactory(info: TimeoutInfo<any>): Observable<never> {\n  throw new TimeoutError(info);\n}\n", "import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n *\n * Map every click to the `clientX` position of that click\n *\n * ```ts\n * import { fromEvent, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n *\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param project The function to apply to each `value` emitted by the source\n * Observable. The `index` parameter is the number `i` for the i-th emission\n * that has happened since the subscription, starting from the number `0`.\n * @param thisArg An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n", "import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}", "const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n", "import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/innerFrom';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { executeSchedule } from '../util/executeSchedule';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalFinalizer?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                if (innerSubScheduler) {\n                  executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));\n                } else {\n                  doInnerSub(bufferedValue);\n                }\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    createOperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional finalization (for when the destination is torn down).\n  // Other finalization is added implicitly via subscription above.\n  return () => {\n    additionalFinalizer?.();\n  };\n}\n", "import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n *\n * Map and flatten each letter to an Observable ticking every 1 second\n *\n * ```ts\n * import { of, mergeMap, interval, map } from 'rxjs';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x + i)))\n * );\n *\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a, b, c every second with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param project A function that, when applied to an item emitted by the source\n * Observable, returns an Observable.\n * @param concurrent Maximum number of `ObservableInput`s being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n", "import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n *\n * ```ts\n * import { fromEvent, map, interval, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map(() => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n *\n * ```ts\n * import { fromEvent, map, interval, take, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(10)))\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n *\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param concurrent Maximum number of inner Observables being subscribed to\n * concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n", "import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, map, interval, take, concatAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(() => interval(1000).pipe(take(4)))\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(\n  ...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]\n): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n *\n * Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n *\n * ```ts\n * import { interval, take, range, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * Concatenate 3 Observables\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * Concatenate the same Observable to repeat it\n *\n * ```ts\n * import { interval, take, concat } from 'rxjs';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n *   .subscribe({\n *     next: value => console.log(value),\n *     complete: () => console.log('...and it is done!')\n *   });\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // '...and it is done!' also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param args `ObservableInput`s to concatenate.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(from(args, popScheduler(args)));\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<R>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n *\n * Emit clicks happening on the DOM document\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * Use `addEventListener` with capture option\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * // note optional configuration parameter which will be passed to addEventListener\n * const clicksInDocument = fromEvent(document, 'click', { capture: true });\n * const clicksInDiv = fromEvent(div, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param target The DOM EventTarget, Node.js EventEmitter, JQuery-like event target,\n * NodeList or HTMLCollection to attach the event handler to.\n * @param eventName The event name of interest, being emitted by the `target`.\n * @param options Options to pass through to the underlying `addListener`,\n * `addEventListener` or `on` functions.\n * @param resultSelector A mapping function used to transform events. It takes the\n * arguments from the event handler and should return a single value.\n * @return An Observable emitting events registered through `target`'s\n * listener handlers.\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        innerFrom(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we finalize, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n", "import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\n\n/**\n * Creates an observable that will wait for a specified time period, or exact date, before\n * emitting the number 0.\n *\n * <span class=\"informal\">Used to emit a notification after a delay.</span>\n *\n * This observable is useful for creating delays in code, or racing against other values\n * for ad-hoc timeouts.\n *\n * The `delay` is specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Examples\n *\n * Wait 3 seconds and start another observable\n *\n * You might want to use `timer` to delay subscription to an\n * observable by a set amount of time. Here we use a timer with\n * {@link concatMapTo} or {@link concatMap} in order to wait\n * a few seconds and start a subscription to a source.\n *\n * ```ts\n * import { of, timer, concatMap } from 'rxjs';\n *\n * // This could be any observable\n * const source = of(1, 2, 3);\n *\n * timer(3000)\n *   .pipe(concatMap(() => source))\n *   .subscribe(console.log);\n * ```\n *\n * Take all values until the start of the next minute\n *\n * Using a `Date` as the trigger for the first emission, you can\n * do things like wait until midnight to fire an event, or in this case,\n * wait until a new minute starts (chosen so the example wouldn't take\n * too long to run) in order to stop watching a stream. Leveraging\n * {@link takeUntil}.\n *\n * ```ts\n * import { interval, takeUntil, timer } from 'rxjs';\n *\n * // Build a Date object that marks the\n * // next minute.\n * const currentDate = new Date();\n * const startOfNextMinute = new Date(\n *   currentDate.getFullYear(),\n *   currentDate.getMonth(),\n *   currentDate.getDate(),\n *   currentDate.getHours(),\n *   currentDate.getMinutes() + 1\n * );\n *\n * // This could be any observable stream\n * const source = interval(1000);\n *\n * const result = source.pipe(\n *   takeUntil(timer(startOfNextMinute))\n * );\n *\n * result.subscribe(console.log);\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `dueTime`.\n *\n * @param due If a `number`, the amount of time in milliseconds to wait before emitting.\n * If a `Date`, the exact time at which to emit.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(due: number | Date, scheduler?: SchedulerLike): Observable<0>;\n\n/**\n * Creates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\n * on each interval after words.\n *\n * The `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Example\n *\n * ### Start an interval that starts right away\n *\n * Since {@link interval} waits for the passed delay before starting,\n * sometimes that's not ideal. You may want to start an interval immediately.\n * `timer` works well for this. Here we have both side-by-side so you can\n * see them in comparison.\n *\n * Note that this observable will never complete.\n *\n * ```ts\n * import { timer, interval } from 'rxjs';\n *\n * timer(0, 1000).subscribe(n => console.log('timer', n));\n * interval(1000).subscribe(n => console.log('interval', n));\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `startDue`.\n * @param startDue If a `number`, is the time to wait before starting the interval.\n * If a `Date`, is the exact time at which to start the interval.\n * @param intervalDuration The delay between each value emitted in the interval. Passing a\n * negative number here will result in immediate completion after the first value is emitted, as though\n * no `intervalDuration` was passed at all.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(startDue: number | Date, intervalDuration: number, scheduler?: SchedulerLike): Observable<number>;\n\n/**\n * @deprecated The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead.\n */\nexport function timer(dueTime: number | Date, unused: undefined, scheduler?: SchedulerLike): Observable<0>;\n\nexport function timer(\n  dueTime: number | Date = 0,\n  intervalOrScheduler?: number | SchedulerLike,\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> {\n  // Since negative intervalDuration is treated as though no\n  // interval was specified at all, we start with a negative number.\n  let intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    // If we have a second argument, and it's a scheduler,\n    // override the scheduler we had defaulted. Otherwise,\n    // it must be an interval.\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      // Note that this *could* be negative, in which case\n      // it's like not passing an intervalDuration at all.\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable((subscriber) => {\n    // If a valid date is passed, calculate how long to wait before\n    // executing the first value... otherwise, if it's a number just schedule\n    // that many milliseconds (or scheduler-specified unit size) in the future.\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\n\n    if (due < 0) {\n      // Ensure we don't schedule in the future.\n      due = 0;\n    }\n\n    // The incrementing value we emit.\n    let n = 0;\n\n    // Start the timer.\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        // Emit the next value and increment.\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          // If we have a interval after the initial timer,\n          // reschedule with the period.\n          this.schedule(undefined, intervalDuration);\n        } else {\n          // We didn't have an interval. So just complete.\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n", "import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { innerFrom } from './innerFrom';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\nimport { from } from './from';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n *\n * Merge together two Observables: 1s interval and clicks\n *\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console every time the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * Merge together 3 Observables, but run only 2 concurrently\n *\n * ```ts\n * import { interval, take, merge } from 'rxjs';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param args `ObservableInput`s to merge together. If the last parameter\n * is of type number, `merge` will use it to limit number of concurrently\n * subscribed `ObservableInput`s. If the last parameter is {@link SchedulerLike},\n * it will be used for scheduling the emission of values.\n * @return An Observable that emits items that are the result of every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(from(sources, scheduler));\n}\n", "import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n *\n * Emit the number 7, then never emit anything else (not even complete)\n *\n * ```ts\n * import { NEVER, startWith } from 'rxjs';\n *\n * const info = () => console.log('Will not be called');\n *\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe({\n *   next: x => console.log(x),\n *   error: info,\n *   complete: info\n * });\n * ```\n *\n * @see {@link Observable}\n * @see {@link EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n", "const { isArray } = Array;\n\n/**\n * Used in operators and functions that accept either a list of arguments, or an array of arguments\n * as a single argument.\n */\nexport function argsOrArgArray<T>(args: (T | T[])[]): T[] {\n  return args.length === 1 && isArray(args[0]) ? args[0] : (args as T[]);\n}\n", "import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n *\n * Emit only click events whose target was a DIV element\n *\n * ```ts\n * import { fromEvent, filter } from 'rxjs';\n *\n * const div = document.createElement('div');\n * div.style.cssText = 'width: 200px; height: 200px; background: #09c;';\n * document.body.appendChild(div);\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => (<HTMLElement>ev.target).tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n", "import { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * `ObservableInput` (that internally gets converted to an Observable)\n * emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval, buffer } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param closingNotifier An `ObservableInput` that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: ObservableInput<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    innerFrom(closingNotifier).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on finalization.\n      currentBuffer = null!;\n    };\n  });\n}\n", "import { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a notification from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent notification from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays notifications emitted by the source Observable, but drops\n * previous pending delayed emissions if a new notification arrives on the source\n * Observable. This operator keeps track of the most recent notification from the\n * source Observable, and emits that only when `dueTime` has passed\n * without any other notification appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous notification will be dropped\n * and will not be emitted and a new `dueTime` is scheduled.\n * If the completing event happens during `dueTime` the last cached notification\n * is emitted before the completion event is forwarded to the output observable.\n * If the error event happens during `dueTime` or after it only the error event is\n * forwarded to the output observable. The cache notification is not emitted in this case.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * notification to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n *\n * Emit the most recent click after a burst of clicks\n *\n * ```ts\n * import { fromEvent, debounceTime } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link throttle}\n * @see {@link throttleTime}\n *\n * @param dueTime The timeout duration in milliseconds (or the time unit determined\n * internally by the optional `scheduler`) for the window of time required to wait\n * for emission silence before emitting the most recent source value.\n * @param scheduler The {@link SchedulerLike} to use for managing the timers that\n * handle the timeout for each value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified `dueTime`, and may drop some values\n * if they occur too frequently.\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let activeTask: Subscription | null = null;\n    let lastValue: T | null = null;\n    let lastTime: number | null = null;\n\n    const emit = () => {\n      if (activeTask) {\n        // We have a value! Free up memory first, then emit the value.\n        activeTask.unsubscribe();\n        activeTask = null;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\n      // This is called `dueTime` after the first value\n      // but we might have received new values during this window!\n\n      const targetTime = lastTime! + dueTime;\n      const now = scheduler.now();\n      if (now < targetTime) {\n        // On that case, re-schedule to the new target\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          lastValue = value;\n          lastTime = scheduler.now();\n\n          // Only set up a task if it's not already up\n          if (!activeTask) {\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n            subscriber.add(activeTask);\n          }\n        },\n        () => {\n          // Source completed.\n          // Emit any pending debounced values then complete\n          emit();\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Finalization.\n          lastValue = activeTask = null;\n        }\n      )\n    );\n  });\n}\n", "import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n *\n * Take the first 5 seconds of an infinite 1-second interval Observable\n *\n * ```ts\n * import { interval, take } from 'rxjs';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          createOperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n", "import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * The `ignoreElements` operator suppresses all items emitted by the source Observable,\n * but allows its termination notification (either `error` or `complete`) to pass through unchanged.\n *\n * If you do not care about the items being emitted by an Observable, but you do want to be notified\n * when it completes or when it terminates with an error, you can apply the `ignoreElements` operator\n * to the Observable, which will ensure that it will never call its observers’ `next` handlers.\n *\n * ## Example\n *\n * Ignore all `next` emissions from the source\n *\n * ```ts\n * import { of, ignoreElements } from 'rxjs';\n *\n * of('you', 'talking', 'to', 'me')\n *   .pipe(ignoreElements())\n *   .subscribe({\n *     next: word => console.log(word),\n *     error: err => console.log('error:', err),\n *     complete: () => console.log('the end'),\n *   });\n *\n * // result:\n * // 'the end'\n * ```\n *\n * @return A function that returns an empty Observable that only calls\n * `complete` or `error`, based on which one is called by the source\n * Observable.\n */\nexport function ignoreElements(): OperatorFunction<unknown, never> {\n  return operate((source, subscriber) => {\n    source.subscribe(createOperatorSubscriber(subscriber, noop));\n  });\n}\n", "import { OperatorFunction } from '../types';\nimport { map } from './map';\n\n/** @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`. */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R>;\n/**\n * @deprecated Do not specify explicit type parameters. Signatures with type parameters\n * that cannot be inferred will be removed in v8. `mapTo` itself will be removed in v9,\n * use {@link map} instead: `map(() => value)`.\n * */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n *\n * Map every click to the string `'Hi'`\n *\n * ```ts\n * import { fromEvent, mapTo } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n *\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param value The value to map each source value to.\n * @return A function that returns an Observable that emits the given `value`\n * every time the source Observable emits.\n * @deprecated To be removed in v9. Use {@link map} instead: `map(() => value)`.\n */\nexport function mapTo<R>(value: R): OperatorFunction<unknown, R> {\n  return map(() => value);\n}\n", "import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\n\n/** @deprecated The `subscriptionDelay` parameter will be removed in v8. */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\n  subscriptionDelay: Observable<any>\n): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => ObservableInput<any>): MonoTypeOperatorFunction<T>;\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` operator shifts each emitted value from the source Observable by\n * a time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the value emitted from\n * the source Observable as the first argument to the `delayDurationSelector`.\n * The `delayDurationSelector` function should return an {@link ObservableInput},\n * that is internally converted to an Observable that is called the \"duration\"\n * Observable.\n *\n * The source value is emitted on the output Observable only when the \"duration\"\n * Observable emits ({@link guide/glossary-and-semantics#next next}s) any value.\n * Upon that, the \"duration\" Observable gets unsubscribed.\n *\n * Before RxJS V7, the {@link guide/glossary-and-semantics#complete completion}\n * of the \"duration\" Observable would have been triggering the emission of the\n * source value to the output Observable, but with RxJS V7, this is not the case\n * anymore.\n *\n * Only next notifications (from the \"duration\" Observable) trigger values from\n * the source Observable to be passed to the output Observable. If the \"duration\"\n * Observable only emits the complete notification (without next), the value\n * emitted by the source Observable will never get to the output Observable - it\n * will be swallowed. If the \"duration\" Observable errors, the error will be\n * propagated to the output Observable.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n *\n * Delay each click by a random amount of time, between 0 and 5 seconds\n *\n * ```ts\n * import { fromEvent, delayWhen, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(() => interval(Math.random() * 5000))\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delay}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param delayDurationSelector A function that returns an `ObservableInput` for\n * each `value` emitted by the source Observable, which is then used to delay the\n * emission of that `value` on the output Observable until the `ObservableInput`\n * returned from this function emits a next value. When called, beside `value`,\n * this function receives a zero-based `index` of the emission order.\n * @param subscriptionDelay An Observable that triggers the subscription to the\n * source Observable once it emits any value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by an amount of time specified by the Observable\n * returned by `delayDurationSelector`.\n */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => ObservableInput<any>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) =>\n      concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n  }\n\n  return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n", "import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.svg)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n *\n * Delay each click by one second\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n *\n * ```ts\n * import { fromEvent, delay } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delayWhen}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param due The delay duration in milliseconds (a `number`) or a `Date` until\n * which the emission of the source items is delayed.\n * @param scheduler The {@link SchedulerLike} to use for managing the timers\n * that handle the time-shift for each item.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified timeout or Date.\n */\nexport function delay<T>(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  const duration = timer(due, scheduler);\n  return delayWhen(() => duration);\n}\n", "import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n *\n * On every click (starting from the second), emit the relative distance to the previous click\n *\n * ```ts\n * import { fromEvent, pairwise, map } from 'rxjs';\n *\n * const clicks = fromEvent<PointerEvent>(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(([first, second]) => {\n *     const x0 = first.clientX;\n *     const y0 = first.clientY;\n *     const x1 = second.clientX;\n *     const y1 = second.clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   })\n * );\n *\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      createOperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n", "import { innerFrom } from '../observable/innerFrom';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If `true`, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If `false`, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => ObservableInput<any>);\n  /**\n   * If `true`, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If `false`, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => ObservableInput<any>);\n  /**\n   * If `true`, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If `false`, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an `ObservableInput` instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => ObservableInput<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n *\n * Generate new multicast Observable from the `source` Observable value\n *\n * ```ts\n * import { interval, tap, map, take, share } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   tap(x => console.log('Processing: ', x)),\n *   map(x => x * x),\n *   take(6),\n *   share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 2: ', x));\n *\n * // Logs:\n * // Processing: 0\n * // subscription 1: 0\n * // subscription 2: 0\n * // Processing: 1\n * // subscription 1: 1\n * // subscription 2: 1\n * // Processing: 2\n * // subscription 1: 4\n * // subscription 2: 4\n * // Processing: 3\n * // subscription 1: 9\n * // subscription 2: 9\n * // Processing: 4\n * // subscription 1: 16\n * // subscription 2: 16\n * // Processing: 5\n * // subscription 1: 25\n * // subscription 2: 25\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n *\n * ```ts\n * import { interval, take, share, timer } from 'rxjs';\n *\n * const source = interval(1000).pipe(\n *   take(3),\n *   share({\n *     resetOnRefCountZero: () => timer(1000)\n *   })\n * );\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link shareReplay}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | undefined;\n    let resetConnection: Subscription | undefined;\n    let subject: SubjectLike<T> | undefined;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = undefined;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = undefined;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertions when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the finalization directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (\n        !connection &&\n        // Check this shareReplay is still activate - it can be reset to 0\n        // and be \"unsubscribed\" _before_ it actually subscribes.\n        // If we were to subscribe then, it'd leak and get stuck.\n        refCount > 0\n      ) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        innerFrom(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => ObservableInput<any>),\n  ...args: T\n): Subscription | undefined {\n  if (on === true) {\n    reset();\n    return;\n  }\n\n  if (on === false) {\n    return;\n  }\n\n  const onSubscriber = new SafeSubscriber({\n    next: () => {\n      onSubscriber.unsubscribe();\n      reset();\n    },\n  });\n\n  return innerFrom(on(...args)).subscribe(onSubscriber);\n}\n", "import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switchAll}.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n *\n * Generate new Observable according to source Observable values\n *\n * ```ts\n * import { of, switchMap } from 'rxjs';\n *\n * const switched = of(1, 2, 3).pipe(switchMap(x => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // 3\n * // 9\n * // 27\n * ```\n *\n * Restart an interval Observable on every click event\n *\n * ```ts\n * import { fromEvent, switchMap, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap(() => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param project A function that, when applied to an item emitted by the source\n * Observable, returns an Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = createOperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subscriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n", "/* eslint-disable no-restricted-globals */\nimport * as constants from './constants';\nimport { ElementInteractionsOptions, ActionType } from '@amplitude/analytics-core';\nimport { ElementBasedEvent, ElementBasedTimestampedEvent } from './autocapture-plugin';\n\nexport type JSONValue = string | number | boolean | null | { [x: string]: JSONValue } | Array<JSONValue>;\n\nconst SENSITIVE_TAGS = ['input', 'select', 'textarea'];\n\nexport type shouldTrackEvent = (actionType: ActionType, element: Element) => boolean;\n\nexport const createShouldTrackEvent = (\n  autocaptureOptions: ElementInteractionsOptions,\n  allowlist: string[], // this can be any type of css selector allow list\n): shouldTrackEvent => {\n  return (actionType: ActionType, element: Element) => {\n    const { pageUrlAllowlist, shouldTrackEventResolver } = autocaptureOptions;\n\n    /* istanbul ignore next */\n    const tag = element?.tagName?.toLowerCase?.();\n    // window, document, and Text nodes have no tag\n    if (!tag) {\n      return false;\n    }\n\n    if (shouldTrackEventResolver) {\n      return shouldTrackEventResolver(actionType, element);\n    }\n\n    if (!isPageUrlAllowed(window.location.href, pageUrlAllowlist)) {\n      return false;\n    }\n\n    /* istanbul ignore next */\n    const elementType = String(element?.getAttribute('type')) || '';\n    if (typeof elementType === 'string') {\n      switch (elementType.toLowerCase()) {\n        case 'hidden':\n          return false;\n        case 'password':\n          return false;\n      }\n    }\n\n    /* istanbul ignore if */\n    if (allowlist) {\n      const hasMatchAnyAllowedSelector = allowlist.some((selector) => !!element?.matches?.(selector));\n      if (!hasMatchAnyAllowedSelector) {\n        return false;\n      }\n    }\n\n    switch (tag) {\n      case 'input':\n      case 'select':\n      case 'textarea':\n        return actionType === 'change' || actionType === 'click';\n      default: {\n        /* istanbul ignore next */\n        const computedStyle = window?.getComputedStyle?.(element);\n        /* istanbul ignore next */\n        if (computedStyle && computedStyle.getPropertyValue('cursor') === 'pointer' && actionType === 'click') {\n          return true;\n        }\n        return actionType === 'click';\n      }\n    }\n  };\n};\n\nexport const isNonSensitiveString = (text: string | null) => {\n  if (text == null) {\n    return false;\n  }\n  if (typeof text === 'string') {\n    const ccRegex =\n      /^(?:(4[0-9]{12}(?:[0-9]{3})?)|(5[1-5][0-9]{14})|(6(?:011|5[0-9]{2})[0-9]{12})|(3[47][0-9]{13})|(3(?:0[0-5]|[68][0-9])[0-9]{11})|((?:2131|1800|35[0-9]{3})[0-9]{11}))$/;\n    if (ccRegex.test((text || '').replace(/[- ]/g, ''))) {\n      return false;\n    }\n    const ssnRegex = /(^\\d{3}-?\\d{2}-?\\d{4}$)/;\n    if (ssnRegex.test(text)) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const isTextNode = (node: Node) => {\n  return !!node && node.nodeType === 3;\n};\n\nexport const isNonSensitiveElement = (element: Element) => {\n  /* istanbul ignore next */\n  const tag = element?.tagName?.toLowerCase?.();\n  const isContentEditable =\n    element instanceof HTMLElement ? element.getAttribute('contenteditable')?.toLowerCase() === 'true' : false;\n\n  return !SENSITIVE_TAGS.includes(tag) && !isContentEditable;\n};\n\n// Maybe this can be simplified with element.innerText, keep and manual concatenating for now, more research needed.\nexport const getText = (element: Element): string => {\n  let text = '';\n  if (isNonSensitiveElement(element) && element.childNodes && element.childNodes.length) {\n    element.childNodes.forEach((child) => {\n      let childText = '';\n      if (isTextNode(child)) {\n        if (child.textContent) {\n          childText = child.textContent;\n        }\n      } else {\n        childText = getText(child as Element);\n      }\n      text += childText\n        .split(/(\\s+)/)\n        .filter(isNonSensitiveString)\n        .join('')\n        .replace(/[\\r\\n]/g, ' ')\n        .replace(/[ ]+/g, ' ')\n        .substring(0, 255);\n    });\n  }\n  return text;\n};\n\nexport const isPageUrlAllowed = (url: string, pageUrlAllowlist: (string | RegExp)[] | undefined) => {\n  if (!pageUrlAllowlist || !pageUrlAllowlist.length) {\n    return true;\n  }\n  return pageUrlAllowlist.some((allowedUrl) => {\n    if (typeof allowedUrl === 'string') {\n      return url === allowedUrl;\n    }\n    return url.match(allowedUrl);\n  });\n};\n\nexport const getAttributesWithPrefix = (element: Element, prefix: string): { [key: string]: string } => {\n  return element.getAttributeNames().reduce((attributes: { [key: string]: string }, attributeName) => {\n    if (attributeName.startsWith(prefix)) {\n      const attributeKey = attributeName.replace(prefix, '');\n      const attributeValue = element.getAttribute(attributeName);\n      if (attributeKey) {\n        attributes[attributeKey] = attributeValue || '';\n      }\n    }\n    return attributes;\n  }, {});\n};\n\nexport const isEmpty = (value: unknown) => {\n  return (\n    value === undefined ||\n    value === null ||\n    (typeof value === 'object' && Object.keys(value).length === 0) ||\n    (typeof value === 'string' && value.trim().length === 0)\n  );\n};\n\nexport const removeEmptyProperties = (properties: { [key: string]: unknown }) => {\n  return Object.keys(properties).reduce((filteredProperties: { [key: string]: unknown }, key) => {\n    const value = properties[key];\n    if (!isEmpty(value)) {\n      filteredProperties[key] = value;\n    }\n    return filteredProperties;\n  }, {});\n};\n\nexport const getNearestLabel = (element: Element): string => {\n  const parent = element.parentElement;\n  if (!parent) {\n    return '';\n  }\n  let labelElement;\n  try {\n    labelElement = parent.querySelector(':scope>span,h1,h2,h3,h4,h5,h6');\n  } catch (error) {\n    /* istanbul ignore next */\n    labelElement = null;\n  }\n  if (labelElement) {\n    /* istanbul ignore next */\n    const labelText = labelElement.textContent || '';\n    return isNonSensitiveString(labelText) ? labelText : '';\n  }\n  return getNearestLabel(parent);\n};\n\nexport const querySelectUniqueElements = (root: Element | Document, selectors: string[]): Element[] => {\n  if (root && 'querySelectorAll' in root && typeof root.querySelectorAll === 'function') {\n    const elementSet = selectors.reduce((elements: Set<Element>, selector) => {\n      if (selector) {\n        const selectedElements = Array.from(root.querySelectorAll(selector));\n        selectedElements.forEach((element) => {\n          elements.add(element);\n        });\n      }\n      return elements;\n    }, new Set<Element>());\n    return Array.from(elementSet);\n  }\n  return [];\n};\n\n// Similar as element.closest, but works with multiple selectors\nexport const getClosestElement = (element: Element | null, selectors: string[]): Element | null => {\n  if (!element) {\n    return null;\n  }\n  /* istanbul ignore next */\n  if (selectors.some((selector) => element?.matches?.(selector))) {\n    return element;\n  }\n  /* istanbul ignore next */\n  return getClosestElement(element?.parentElement, selectors);\n};\n\n// Returns the element properties for the given element in Visual Labeling.\nexport const getEventTagProps = (element: Element) => {\n  if (!element) {\n    return {};\n  }\n  /* istanbul ignore next */\n  const tag = element?.tagName?.toLowerCase?.();\n\n  const properties: Record<string, JSONValue> = {\n    [constants.AMPLITUDE_EVENT_PROP_ELEMENT_TAG]: tag,\n    [constants.AMPLITUDE_EVENT_PROP_ELEMENT_TEXT]: getText(element),\n    [constants.AMPLITUDE_EVENT_PROP_PAGE_URL]: window.location.href.split('?')[0],\n  };\n  return removeEmptyProperties(properties);\n};\n\nexport const asyncLoadScript = (url: string) => {\n  return new Promise((resolve, reject) => {\n    try {\n      const scriptElement = document.createElement('script');\n      scriptElement.type = 'text/javascript';\n      scriptElement.async = true;\n      scriptElement.src = url;\n      scriptElement.addEventListener(\n        'load',\n        () => {\n          resolve({ status: true });\n        },\n        { once: true },\n      );\n      scriptElement.addEventListener('error', () => {\n        reject({\n          status: false,\n          message: `Failed to load the script ${url}`,\n        });\n      });\n      /* istanbul ignore next */\n      document.head?.appendChild(scriptElement);\n    } catch (error) {\n      /* istanbul ignore next */\n      reject(error);\n    }\n  });\n};\n\nexport function generateUniqueId(): string {\n  return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n}\n\nexport const filterOutNonTrackableEvents = (event: ElementBasedTimestampedEvent<ElementBasedEvent>): boolean => {\n  // Filter out changeEvent events with no target\n  // This could happen when change events are triggered programmatically\n  if (event.event.target === null || !event.closestTrackedAncestor) {\n    return false;\n  }\n\n  return true;\n};\n", "/* istanbul ignore file */\n/* eslint-disable no-restricted-globals */\nimport {\n  AMPLITUDE_ORIGIN,\n  AMPLITUDE_VISUAL_TAGGING_SELECTOR_SCRIPT_URL,\n  AMPLITUDE_VISUAL_TAGGING_HIGHLIGHT_CLASS,\n} from '../constants';\nimport { asyncLoadScript, generateUniqueId, getEventTagProps } from '../helpers';\nimport { ILogger, Messenger, ActionType } from '@amplitude/analytics-core';\n\nexport type Action =\n  | 'ping'\n  | 'pong'\n  | 'page-loaded'\n  | 'selector-loaded'\n  | 'initialize-visual-tagging-selector'\n  | 'close-visual-tagging-selector'\n  | 'element-selected'\n  | 'track-selector-mode-changed'\n  | 'track-selector-moved';\n\ninterface InitializeVisualTaggingSelectorData {\n  actionType: ActionType;\n}\n\ninterface ElementSelectedData {\n  '[Amplitude] Element Hierarchy'?: string;\n  '[Amplitude] Element Tag'?: string;\n  '[Amplitude] Element Text'?: string;\n  '[Amplitude] Page URL'?: string;\n  elementScreenshot?: Blob;\n}\n\ninterface TrackSelectorModeChangedData {\n  newMode: string;\n  pageUrl?: string;\n}\n\ninterface TrackSelectorMovedData {\n  newEditorLocation: string;\n  pageUrl?: string;\n}\n\nexport type ActionData = {\n  ping: null | undefined;\n  pong: null | undefined;\n  'page-loaded': null | undefined;\n  'selector-loaded': null | undefined;\n  'initialize-visual-tagging-selector': InitializeVisualTaggingSelectorData | null | undefined;\n  'close-visual-tagging-selector': null | undefined;\n  'element-selected': ElementSelectedData;\n  'track-selector-mode-changed': TrackSelectorModeChangedData;\n  'track-selector-moved': TrackSelectorMovedData;\n};\n\nexport interface Message<A extends Action> {\n  action: A;\n  data?: ActionData[A];\n}\n\ntype MessageRequest = {\n  id: string;\n  action: string;\n  args: Record<string, any>;\n};\n\ntype MessageResponse = {\n  id: string;\n  action: string;\n  responseData: any;\n};\n\n// TODO: use MessageChannel instead of window.postMessage\nexport class WindowMessenger implements Messenger {\n  endpoint = AMPLITUDE_ORIGIN;\n  logger?: ILogger;\n  requestCallbacks: {\n    [id: string]: {\n      resolve: (data: any) => void;\n      reject: (data: any) => void;\n    };\n  } = {};\n\n  constructor({ origin = AMPLITUDE_ORIGIN }: { origin?: string } = {}) {\n    this.endpoint = origin;\n  }\n\n  private notify(message: Message<Action> | MessageRequest) {\n    this.logger?.debug?.('Message sent: ', JSON.stringify(message));\n    (window.opener as WindowProxy)?.postMessage?.(message, this.endpoint);\n  }\n\n  // Send an async request to the parent window\n  public sendRequest(action: string, args: Record<string, any>, options = { timeout: 15_000 }): Promise<any> {\n    // Create Request ID\n    const id = generateUniqueId();\n    const request = {\n      id,\n      action,\n      args,\n    };\n\n    // Create a Promise that will be resolved when the response is received\n    const promise = new Promise((resolve, reject) => {\n      this.requestCallbacks[id] = { resolve, reject };\n\n      // Send the request\n      this.notify(request);\n\n      // Handle request timeouts\n      if (options?.timeout > 0) {\n        setTimeout(() => {\n          reject(new Error(`${action} timed out (id: ${id})`));\n          delete this.requestCallbacks[id];\n        }, options.timeout);\n      }\n    });\n\n    return promise;\n  }\n\n  // Handle messages from the parent window\n  private handleResponse(response: MessageResponse) {\n    if (!this.requestCallbacks[response.id]) {\n      this.logger?.warn(`No callback found for request id: ${response.id}`);\n      return;\n    }\n\n    this.requestCallbacks[response.id].resolve(response.responseData);\n    delete this.requestCallbacks[response.id];\n  }\n\n  setup({\n    logger,\n    endpoint,\n    isElementSelectable,\n    cssSelectorAllowlist,\n    actionClickAllowlist,\n  }: {\n    logger?: ILogger;\n    endpoint?: string;\n    isElementSelectable?: (action: InitializeVisualTaggingSelectorData['actionType'], element: Element) => boolean;\n    cssSelectorAllowlist?: string[];\n    actionClickAllowlist?: string[];\n  } = {}) {\n    this.logger = logger;\n    // If endpoint is customized, don't override it.\n    if (endpoint && this.endpoint === AMPLITUDE_ORIGIN) {\n      this.endpoint = endpoint;\n    }\n    let amplitudeVisualTaggingSelectorInstance: any = null;\n\n    // Attach Event Listener to listen for messages from the parent window\n    window.addEventListener('message', (event) => {\n      this.logger?.debug?.('Message received: ', JSON.stringify(event));\n\n      // Only accept messages from the specified origin\n      if (this.endpoint !== event.origin) {\n        return;\n      }\n\n      const eventData = event?.data as Message<Action> | MessageResponse;\n      const action = eventData?.action;\n\n      // Ignore messages without action\n      if (!action) {\n        return;\n      }\n\n      // If id exists, handle responses to previous requests\n      if ('id' in eventData) {\n        this.logger?.debug?.('Received Response to previous request: ', JSON.stringify(event));\n        this.handleResponse(eventData);\n\n        // If action exists, handle the action using existing handlers\n      } else {\n        if (action === 'ping') {\n          this.notify({ action: 'pong' });\n        } else if (action === 'initialize-visual-tagging-selector') {\n          const actionData = eventData?.data as InitializeVisualTaggingSelectorData;\n          asyncLoadScript(AMPLITUDE_VISUAL_TAGGING_SELECTOR_SCRIPT_URL)\n            .then(() => {\n              // eslint-disable-next-line\n              amplitudeVisualTaggingSelectorInstance = (window as any)?.amplitudeVisualTaggingSelector?.({\n                getEventTagProps,\n                isElementSelectable: (element: Element) => {\n                  if (isElementSelectable) {\n                    return isElementSelectable(actionData?.actionType || 'click', element);\n                  }\n                  return true;\n                },\n                onTrack: this.onTrack,\n                onSelect: this.onSelect,\n                visualHighlightClass: AMPLITUDE_VISUAL_TAGGING_HIGHLIGHT_CLASS,\n                messenger: this,\n                cssSelectorAllowlist,\n                actionClickAllowlist,\n              });\n              this.notify({ action: 'selector-loaded' });\n            })\n            .catch(() => {\n              this.logger?.warn('Failed to initialize visual tagging selector');\n            });\n        } else if (action === 'close-visual-tagging-selector') {\n          // eslint-disable-next-line\n          amplitudeVisualTaggingSelectorInstance?.close?.();\n        }\n      }\n    });\n\n    // Notify the parent window that the page has loaded\n    this.notify({ action: 'page-loaded' });\n  }\n\n  private onSelect = (data: ElementSelectedData) => {\n    this.notify({ action: 'element-selected', data });\n  };\n\n  private onTrack = (type: string, properties: { [key: string]: string | null }) => {\n    if (type === 'selector-mode-changed') {\n      this.notify({ action: 'track-selector-mode-changed', data: properties });\n    } else if (type === 'selector-moved') {\n      this.notify({ action: 'track-selector-moved', data: properties });\n    }\n  };\n}\n", "import { isNonSensitiveElement, JSONValue } from './helpers';\nimport { Hierarchy, HierarchyNode } from './typings/autocapture';\n\nconst BLOCKED_ATTRIBUTES = [\n  // Already captured elsewhere in the hierarchy object\n  'id',\n  'class',\n\n  // non-useful and potentially large attribute\n  'style',\n\n  // sensitive as prefilled form data may populate this attribute\n  'value',\n\n  // DOM events\n  'onclick',\n  'onchange',\n  'oninput',\n  'onblur',\n  'onsubmit',\n  'onfocus',\n  'onkeydown',\n  'onkeyup',\n  'onkeypress',\n\n  // React specific\n  'data-reactid',\n  'data-react-checksum',\n  'data-reactroot',\n];\nconst SENSITIVE_ELEMENT_ATTRIBUTE_ALLOWLIST = ['type'];\n\nconst SVG_TAGS = ['svg', 'path', 'g'];\nconst HIGHLY_SENSITIVE_INPUT_TYPES = ['password', 'hidden'];\nconst MAX_ATTRIBUTE_LENGTH = 128;\nconst MAX_HIERARCHY_LENGTH = 1024;\n\nexport function getElementProperties(element: Element | null): HierarchyNode | null {\n  if (element === null) {\n    return null;\n  }\n\n  const tagName = String(element.tagName).toLowerCase();\n  const properties: HierarchyNode = {\n    tag: tagName,\n  };\n\n  const siblings = Array.from(element.parentElement?.children ?? []);\n  if (siblings.length) {\n    properties.index = siblings.indexOf(element);\n    properties.indexOfType = siblings.filter((el) => el.tagName === element.tagName).indexOf(element);\n  }\n\n  const prevSiblingTag = element.previousElementSibling?.tagName?.toLowerCase();\n  if (prevSiblingTag) {\n    properties.prevSib = String(prevSiblingTag);\n  }\n\n  const id = element.getAttribute('id');\n  if (id) {\n    properties.id = String(id);\n  }\n\n  const classes = Array.from(element.classList);\n  if (classes.length) {\n    properties.classes = classes;\n  }\n\n  const attributes: Record<string, string> = {};\n  const attributesArray = Array.from(element.attributes);\n  const filteredAttributes = attributesArray.filter((attr) => !BLOCKED_ATTRIBUTES.includes(attr.name));\n  const isSensitiveElement = !isNonSensitiveElement(element);\n\n  // if input is hidden or password or for SVGs, skip attribute collection entirely\n  if (!HIGHLY_SENSITIVE_INPUT_TYPES.includes(String(element.getAttribute('type'))) && !SVG_TAGS.includes(tagName)) {\n    for (const attr of filteredAttributes) {\n      // If sensitive element, only allow certain attributes\n      if (isSensitiveElement && !SENSITIVE_ELEMENT_ATTRIBUTE_ALLOWLIST.includes(attr.name)) {\n        continue;\n      }\n\n      // Finally cast attribute value to string and limit attribute value length\n      attributes[attr.name] = String(attr.value).substring(0, MAX_ATTRIBUTE_LENGTH);\n    }\n  }\n\n  if (Object.keys(attributes).length) {\n    properties.attrs = attributes;\n  }\n\n  return properties;\n}\n\nexport function getAncestors(targetEl: Element | null): Element[] {\n  const ancestors: Element[] = [];\n\n  if (!targetEl) {\n    return ancestors;\n  }\n\n  // Add self to the list of ancestors\n  ancestors.push(targetEl);\n  let current = targetEl.parentElement;\n  while (current && current.tagName !== 'HTML') {\n    ancestors.push(current);\n    current = current.parentElement;\n  }\n  return ancestors;\n}\n\n// Get the DOM hierarchy of the element, starting from the target element to the root element.\nexport const getHierarchy = (element: Element | null): Hierarchy => {\n  let hierarchy: Hierarchy = [];\n  if (!element) {\n    return [];\n  }\n\n  // Get list of ancestors including itself and get properties at each level in the hierarchy\n  const ancestors = getAncestors(element);\n  hierarchy = ensureListUnderLimit(\n    ancestors.map((el) => getElementProperties(el)),\n    MAX_HIERARCHY_LENGTH,\n  ) as Hierarchy;\n\n  return hierarchy;\n};\n\nexport function ensureListUnderLimit(list: Hierarchy | JSONValue[], bytesLimit: number): Hierarchy | JSONValue[] {\n  let numChars = 0;\n  for (let i = 0; i < list.length; i++) {\n    const node = list[i];\n    if (node === null) {\n      // simulate 'None' in python\n      numChars += 4;\n    } else {\n      const value = ensureUnicodePythonCompatible(node);\n      // Using Array.from(string).length instead of string.length\n      // to correctly count Unicode characters (including emojis)\n      numChars += value ? Array.from(value).length : 4;\n    }\n    if (numChars > bytesLimit) {\n      return list.slice(0, i);\n    }\n  }\n  return list;\n}\n\n/**\n * Converts a JSON-compatible value to a Python-compatible string representation.\n * This function handles various data types and ensures proper escaping and formatting.\n *\n * @param value - The value to be converted (can be any JSON-compatible type)\n * @param nested - Indicates if the value is nested within another structure (default: false)\n * @returns A string representation of the value compatible with Python, or null if conversion fails\n */\nexport function ensureUnicodePythonCompatible(value: HierarchyNode | JSONValue | null, nested = false): string | null {\n  try {\n    if (value == null) {\n      // Handle null values\n      if (nested) {\n        return 'None'; // Represent null as 'None' in Python when nested\n      }\n      return null; // Return null for top-level null values\n    } else if (typeof value === 'string') {\n      if (nested) {\n        // Escape special characters in nested strings\n        value = value.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n').replace(/\\t/g, '\\\\t').replace(/\\r/g, '\\\\r');\n\n        // Handle quotes in the string\n        if (value.includes('\"')) {\n          return `'${value}'`; // Wrap in single quotes if it contains double quotes\n        }\n        if (value.includes(\"'\")) {\n          return `\"${value.replace(/'/g, \"\\\\'\")}\"`; // Wrap in double quotes and escape single quotes\n        }\n        return `'${value}'`; // Default to wrapping in single quotes\n      }\n      return value; // Return non-nested strings as-is\n    } else if (typeof value === 'boolean') {\n      // Convert boolean to Python-style capitalized string\n      return value ? 'True' : 'False';\n    } else if (Array.isArray(value)) {\n      // Handle arrays by recursively converting each element\n      const elements = value.map((o) => ensureUnicodePythonCompatible(o, true));\n      return `[${elements.join(', ')}]`;\n    } else if (typeof value === 'object') {\n      // Handle objects (dictionaries in Python)\n      const entries = Object.entries(value)\n        .filter(([key]) => key != null) // Filter out null keys\n        .map(\n          ([key, val]) =>\n            `${String(ensureUnicodePythonCompatible(key, true))}: ${String(ensureUnicodePythonCompatible(val, true))}`,\n        );\n      let result = `{${entries.join(', ')}}`;\n\n      // Handle single quotes in the resulting string\n      if (result.includes(\"\\\\'\")) {\n        result = result.replace(/'/g, \"'\").replace(/'/g, \"\\\\'\");\n      }\n      return result;\n    }\n    // For any other types, return their string representation;\n    return value.toString();\n  } catch (e) {\n    // Return null if any error occurs during the conversion\n    return null;\n  }\n}\n", "import { AllWindowObservables, AutoCaptureOptionsWithDefaults } from 'src/autocapture-plugin';\nimport { buffer, filter, map, debounceTime, merge, pairwise, delay } from 'rxjs';\nimport { BrowserClient } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_CLICKED_EVENT } from '../constants';\n\nconst RAGE_CLICK_THRESHOLD = 5;\n\nexport function trackClicks({\n  amplitude,\n  allObservables,\n  options,\n  shouldTrackEvent,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  options: AutoCaptureOptionsWithDefaults;\n  shouldTrackEvent: shouldTrackEvent;\n}) {\n  const { clickObservable } = allObservables;\n\n  // Trigger if the target of the click event has changed and position is different\n  // Keeping track of position is important to avoid false positives when the user clicks on the same\n  // element where certain frameworks could replace the element instance between rerenders\n  const comparisonTrigger = clickObservable.pipe(\n    pairwise(),\n    filter(([prev, current]) => {\n      const targetChanged = prev.event.target !== current.event.target;\n      /* istanbul ignore next */\n      const samePos =\n        Math.abs(current.event.screenX - prev.event.screenX) <= 20 &&\n        Math.abs(current.event.screenY - prev.event.screenY) <= 20;\n      return targetChanged && !samePos;\n    }),\n  );\n\n  // Trigger if there is no click event within 1 second\n  const timeoutTrigger = clickObservable.pipe(\n    debounceTime(options.debounceTime),\n    map(() => 'timeout' as const),\n  );\n\n  const triggers = merge(comparisonTrigger, timeoutTrigger);\n\n  // Get buffers of clicks, if the buffer length is over 5, it is rage click\n  const bufferedClicks = clickObservable.pipe(\n    delay(0),\n    filter(filterOutNonTrackableEvents),\n    filter((click) => {\n      // Only track clicks on elements that should be tracked,\n      return shouldTrackEvent('click', click.closestTrackedAncestor);\n    }),\n    buffer(triggers),\n  );\n\n  return bufferedClicks.subscribe((clicks) => {\n    // TODO: update this when rage clicks are added\n    const clickType =\n      clicks.length >= RAGE_CLICK_THRESHOLD ? AMPLITUDE_ELEMENT_CLICKED_EVENT : AMPLITUDE_ELEMENT_CLICKED_EVENT;\n\n    for (const click of clicks) {\n      /* istanbul ignore next */\n      amplitude?.track(clickType, click.targetElementProperties);\n    }\n  });\n}\n", "import { AllWindowObservables } from 'src/autocapture-plugin';\nimport { filter } from 'rxjs';\nimport { BrowserClient, ActionType } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_CHANGED_EVENT } from '../constants';\n\nexport function trackChange({\n  amplitude,\n  allObservables,\n  getEventProperties,\n  shouldTrackEvent,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  getEventProperties: (actionType: ActionType, element: Element) => Record<string, any>;\n  shouldTrackEvent: shouldTrackEvent;\n}) {\n  const { changeObservable } = allObservables;\n\n  const filteredChangeObservable = changeObservable.pipe(\n    filter(filterOutNonTrackableEvents),\n    filter((changeEvent) => {\n      // Only track change on elements that should be tracked,\n      return shouldTrackEvent('change', changeEvent.closestTrackedAncestor);\n    }),\n  );\n\n  return filteredChangeObservable.subscribe((changeEvent) => {\n    /* istanbul ignore next */\n    amplitude?.track(AMPLITUDE_ELEMENT_CHANGED_EVENT, getEventProperties('change', changeEvent.closestTrackedAncestor));\n  });\n}\n", "import {\n  AllWindowObservables,\n  AutoCaptureOptionsWithDefaults,\n  ElementBasedTimestampedEvent,\n  ObservablesEnum,\n} from 'src/autocapture-plugin';\nimport { filter, map, merge, switchMap, take, timeout, EMPTY } from 'rxjs';\nimport { BrowserClient, ActionType } from '@amplitude/analytics-core';\nimport { filterOutNonTrackableEvents, getClosestElement, shouldTrackEvent } from '../helpers';\nimport { AMPLITUDE_ELEMENT_CLICKED_EVENT } from '../constants';\n\nexport function trackActionClick({\n  amplitude,\n  allObservables,\n  options,\n  getEventProperties,\n  shouldTrackEvent,\n  shouldTrackActionClick,\n}: {\n  amplitude: BrowserClient;\n  allObservables: AllWindowObservables;\n  options: AutoCaptureOptionsWithDefaults;\n  getEventProperties: (actionType: ActionType, element: Element) => Record<string, any>;\n  shouldTrackActionClick: shouldTrackEvent;\n  shouldTrackEvent: shouldTrackEvent;\n}) {\n  const { clickObservable, mutationObservable, navigateObservable } = allObservables;\n\n  const filteredClickObservable = clickObservable.pipe(\n    filter((click) => {\n      // Filter out regularly tracked click events that are already handled in trackClicks\n      return !shouldTrackEvent('click', click.closestTrackedAncestor);\n    }),\n    map((click) => {\n      // overwrite the closestTrackedAncestor with the closest element that is on the actionClickAllowlist\n      const closestActionClickEl = getClosestElement(click.event.target as Element, options.actionClickAllowlist);\n      click.closestTrackedAncestor = closestActionClickEl as Element;\n\n      // overwrite the targetElementProperties with the properties of the closestActionClickEl\n      if (click.closestTrackedAncestor !== null) {\n        click.targetElementProperties = getEventProperties(click.type, click.closestTrackedAncestor);\n      }\n      return click;\n    }),\n    filter(filterOutNonTrackableEvents),\n    filter((clickEvent) => {\n      // Only track change on elements that should be tracked\n      return shouldTrackActionClick('click', clickEvent.closestTrackedAncestor);\n    }),\n  );\n\n  const changeObservables: Array<\n    AllWindowObservables[ObservablesEnum.MutationObservable] | AllWindowObservables[ObservablesEnum.NavigateObservable]\n  > = [mutationObservable];\n  /* istanbul ignore next */\n  if (navigateObservable) {\n    changeObservables.push(navigateObservable);\n  }\n  const mutationOrNavigate = merge(...changeObservables);\n\n  const actionClicks = filteredClickObservable.pipe(\n    // If a mutation occurs within 0.5 seconds of a click event (timeout({ first: 500 })), it emits the original first click event.\n    // take 1 to only limit the action events in case there are multiple\n    switchMap((click) =>\n      mutationOrNavigate.pipe(\n        take(1),\n        timeout({ first: 500, with: () => EMPTY }), // in case of timeout, map to empty to prevent any click from being emitted\n        map(() => click),\n      ),\n    ),\n  );\n\n  return actionClicks.subscribe((actionClick) => {\n    /* istanbul ignore next */\n    amplitude?.track(\n      AMPLITUDE_ELEMENT_CLICKED_EVENT,\n      getEventProperties('click', (actionClick as ElementBasedTimestampedEvent<MouseEvent>).closestTrackedAncestor),\n    );\n  });\n}\n", "/* eslint-disable no-restricted-globals */\nimport {\n  BrowserClient,\n  BrowserConfig,\n  EnrichmentPlugin,\n  ElementInteractionsOptions,\n  DEFAULT_CSS_SELECTOR_ALLOWLIST,\n  DEFAULT_DATA_ATTRIBUTE_PREFIX,\n  DEFAULT_ACTION_CLICK_ALLOWLIST,\n  ActionType,\n} from '@amplitude/analytics-core';\nimport * as constants from './constants';\nimport { fromEvent, map, Observable, Subscription, share } from 'rxjs';\nimport {\n  getText,\n  getAttributesWithPrefix,\n  removeEmptyProperties,\n  getNearestLabel,\n  createShouldTrackEvent,\n  getClosestElement,\n} from './helpers';\nimport { WindowMessenger } from './libs/messenger';\nimport { getHierarchy } from './hierarchy';\nimport { trackClicks } from './autocapture/track-click';\nimport { trackChange } from './autocapture/track-change';\nimport { trackActionClick } from './autocapture/track-action-click';\nimport { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';\n\ndeclare global {\n  interface Window {\n    navigation: HasEventTargetAddRemove<Event>;\n  }\n}\n\ninterface NavigateEvent extends Event {\n  readonly navigationType: 'reload' | 'push' | 'replace' | 'traverse';\n  readonly destination: {\n    readonly url: string;\n    readonly key: string | null;\n    readonly id: string | null;\n    readonly index: number;\n    readonly sameDocument: boolean;\n\n    getState(): any;\n  };\n  readonly canIntercept: boolean;\n  readonly userInitiated: boolean;\n  readonly hashChange: boolean;\n  readonly signal: AbortSignal;\n  readonly formData: FormData | null;\n  readonly downloadRequest: string | null;\n  readonly info: any;\n  readonly hasUAVisualTransition: boolean;\n  /** @see https://github.com/WICG/navigation-api/pull/264 */\n  readonly sourceElement: Element | null;\n\n  scroll(): void;\n}\n\ntype BrowserEnrichmentPlugin = EnrichmentPlugin<BrowserClient, BrowserConfig>;\n\nexport type AutoCaptureOptionsWithDefaults = Required<\n  Pick<ElementInteractionsOptions, 'debounceTime' | 'cssSelectorAllowlist' | 'actionClickAllowlist'>\n> &\n  ElementInteractionsOptions;\n\nexport enum ObservablesEnum {\n  ClickObservable = 'clickObservable',\n  ChangeObservable = 'changeObservable',\n  // ErrorObservable = 'errorObservable',\n  NavigateObservable = 'navigateObservable',\n  MutationObservable = 'mutationObservable',\n}\n\n// Base TimestampedEvent type\ntype BaseTimestampedEvent<T> = {\n  event: T;\n  timestamp: number;\n  type: 'rage' | 'click' | 'change' | 'error' | 'navigate' | 'mutation';\n};\n\n// Specific types for events with targetElementProperties\nexport type ElementBasedEvent = MouseEvent | Event;\nexport type ElementBasedTimestampedEvent<T> = BaseTimestampedEvent<T> & {\n  event: MouseEvent | Event;\n  type: 'click' | 'change';\n  closestTrackedAncestor: Element;\n  targetElementProperties: Record<string, any>;\n};\n\n// Union type for all possible TimestampedEvents\nexport type TimestampedEvent<T> = BaseTimestampedEvent<T> | ElementBasedTimestampedEvent<T>;\n\nexport interface AllWindowObservables {\n  [ObservablesEnum.ClickObservable]: Observable<ElementBasedTimestampedEvent<MouseEvent>>;\n  [ObservablesEnum.ChangeObservable]: Observable<ElementBasedTimestampedEvent<Event>>;\n  // [ObservablesEnum.ErrorObservable]: Observable<TimestampedEvent<ErrorEvent>>;\n  [ObservablesEnum.NavigateObservable]: Observable<TimestampedEvent<NavigateEvent>> | undefined;\n  [ObservablesEnum.MutationObservable]: Observable<TimestampedEvent<MutationRecord[]>>;\n}\n\n// Type predicate\nexport function isElementBasedEvent<T>(event: BaseTimestampedEvent<T>): event is ElementBasedTimestampedEvent<T> {\n  return event.type === 'click' || event.type === 'change';\n}\n\nexport const autocapturePlugin = (options: ElementInteractionsOptions = {}): BrowserEnrichmentPlugin => {\n  const {\n    dataAttributePrefix = DEFAULT_DATA_ATTRIBUTE_PREFIX,\n    visualTaggingOptions = {\n      enabled: true,\n      messenger: new WindowMessenger(),\n    },\n  } = options;\n\n  options.cssSelectorAllowlist = options.cssSelectorAllowlist ?? DEFAULT_CSS_SELECTOR_ALLOWLIST;\n  options.actionClickAllowlist = options.actionClickAllowlist ?? DEFAULT_ACTION_CLICK_ALLOWLIST;\n  options.debounceTime = options.debounceTime ?? 0; // TODO: update this when rage clicks are added to 1000ms\n\n  const name = constants.PLUGIN_NAME;\n  const type = 'enrichment';\n\n  const subscriptions: Subscription[] = [];\n\n  // Create observables on events on the window\n  const createObservables = (): AllWindowObservables => {\n    // Create Observables from direct user events\n    const clickObservable = fromEvent<MouseEvent>(document, 'click', { capture: true }).pipe(\n      map((click) => addAdditionalEventProperties(click, 'click')),\n      share(),\n    );\n    const changeObservable = fromEvent<Event>(document, 'change', { capture: true }).pipe(\n      map((change) => addAdditionalEventProperties(change, 'change')),\n      share(),\n    );\n\n    // Create Observable from unhandled errors\n    // const errorObservable = fromEvent<ErrorEvent>(window, 'error').pipe(\n    //   map((error) => addAdditionalEventProperties(error, 'error')),\n    // );\n\n    // Create observable for URL changes\n    let navigateObservable;\n    /* istanbul ignore next */\n    if (window.navigation) {\n      navigateObservable = fromEvent<NavigateEvent>(window.navigation, 'navigate').pipe(\n        map((navigate) => addAdditionalEventProperties(navigate, 'navigate')),\n        share(),\n      );\n    }\n\n    // Track DOM Mutations\n    const mutationObservable = new Observable<MutationRecord[]>((observer) => {\n      const mutationObserver = new MutationObserver((mutations) => {\n        observer.next(mutations);\n      });\n      mutationObserver.observe(document.body, {\n        childList: true,\n        attributes: true,\n        characterData: true,\n        subtree: true,\n      });\n      return () => mutationObserver.disconnect();\n    }).pipe(\n      map((mutation) => addAdditionalEventProperties(mutation, 'mutation')),\n      share(),\n    );\n\n    return {\n      [ObservablesEnum.ClickObservable]: clickObservable as Observable<ElementBasedTimestampedEvent<MouseEvent>>,\n      [ObservablesEnum.ChangeObservable]: changeObservable as Observable<ElementBasedTimestampedEvent<Event>>,\n      // [ObservablesEnum.ErrorObservable]: errorObservable,\n      [ObservablesEnum.NavigateObservable]: navigateObservable,\n      [ObservablesEnum.MutationObservable]: mutationObservable,\n    };\n  };\n\n  // Returns the Amplitude event properties for the given element.\n  const getEventProperties = (actionType: ActionType, element: Element) => {\n    /* istanbul ignore next */\n    const tag = element?.tagName?.toLowerCase?.();\n    /* istanbul ignore next */\n    const rect =\n      typeof element.getBoundingClientRect === 'function' ? element.getBoundingClientRect() : { left: null, top: null };\n    const ariaLabel = element.getAttribute('aria-label');\n    const attributes = getAttributesWithPrefix(element, dataAttributePrefix);\n    const nearestLabel = getNearestLabel(element);\n    /* istanbul ignore next */\n    const properties: Record<string, any> = {\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_ID]: element.getAttribute('id') || '',\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_CLASS]: element.getAttribute('class'),\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_HIERARCHY]: getHierarchy(element),\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_TAG]: tag,\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_TEXT]: getText(element),\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_LEFT]: rect.left == null ? null : Math.round(rect.left),\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_POSITION_TOP]: rect.top == null ? null : Math.round(rect.top),\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_ARIA_LABEL]: ariaLabel,\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_ATTRIBUTES]: attributes,\n      [constants.AMPLITUDE_EVENT_PROP_ELEMENT_PARENT_LABEL]: nearestLabel,\n      [constants.AMPLITUDE_EVENT_PROP_PAGE_URL]: window.location.href.split('?')[0],\n      [constants.AMPLITUDE_EVENT_PROP_PAGE_TITLE]: (typeof document !== 'undefined' && document.title) || '',\n      [constants.AMPLITUDE_EVENT_PROP_VIEWPORT_HEIGHT]: window.innerHeight,\n      [constants.AMPLITUDE_EVENT_PROP_VIEWPORT_WIDTH]: window.innerWidth,\n    };\n    if (tag === 'a' && actionType === 'click' && element instanceof HTMLAnchorElement) {\n      properties[constants.AMPLITUDE_EVENT_PROP_ELEMENT_HREF] = element.href;\n    }\n    return removeEmptyProperties(properties);\n  };\n\n  const addAdditionalEventProperties = <T>(\n    event: T,\n    type: TimestampedEvent<T>['type'],\n  ): TimestampedEvent<T> | ElementBasedTimestampedEvent<T> => {\n    const baseEvent: BaseTimestampedEvent<T> | ElementBasedTimestampedEvent<T> = {\n      event,\n      timestamp: Date.now(),\n      type,\n    };\n\n    if (isElementBasedEvent(baseEvent) && baseEvent.event.target !== null) {\n      // Retrieve additional event properties from the target element\n      const closestTrackedAncestor = getClosestElement(\n        baseEvent.event.target as HTMLElement,\n        (options as AutoCaptureOptionsWithDefaults).cssSelectorAllowlist,\n      );\n      if (closestTrackedAncestor) {\n        baseEvent.closestTrackedAncestor = closestTrackedAncestor;\n        baseEvent.targetElementProperties = getEventProperties(baseEvent.type, closestTrackedAncestor);\n      }\n      return baseEvent;\n    }\n\n    return baseEvent;\n  };\n\n  const setup: BrowserEnrichmentPlugin['setup'] = async (config, amplitude) => {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // Create should track event functions the different allowlists\n    const shouldTrackEvent = createShouldTrackEvent(\n      options,\n      (options as AutoCaptureOptionsWithDefaults).cssSelectorAllowlist,\n    );\n    const shouldTrackActionClick = createShouldTrackEvent(\n      options,\n      (options as AutoCaptureOptionsWithDefaults).actionClickAllowlist,\n    );\n\n    // Create observables for events on the window\n    const allObservables = createObservables();\n\n    // Create subscriptions\n    const clickTrackingSubscription = trackClicks({\n      allObservables,\n      options: options as AutoCaptureOptionsWithDefaults,\n      amplitude,\n      shouldTrackEvent: shouldTrackEvent,\n    });\n    subscriptions.push(clickTrackingSubscription);\n\n    const changeSubscription = trackChange({\n      allObservables,\n      getEventProperties,\n      amplitude,\n      shouldTrackEvent: shouldTrackEvent,\n    });\n    subscriptions.push(changeSubscription);\n\n    const actionClickSubscription = trackActionClick({\n      allObservables,\n      options: options as AutoCaptureOptionsWithDefaults,\n      getEventProperties,\n      amplitude,\n      shouldTrackEvent,\n      shouldTrackActionClick: shouldTrackActionClick,\n    });\n    subscriptions.push(actionClickSubscription);\n\n    /* istanbul ignore next */\n    config?.loggerProvider?.log(`${name} has been successfully added.`);\n\n    // Setup visual tagging selector\n    if (window.opener && visualTaggingOptions.enabled) {\n      const allowlist = (options as AutoCaptureOptionsWithDefaults).cssSelectorAllowlist;\n      const actionClickAllowlist = (options as AutoCaptureOptionsWithDefaults).actionClickAllowlist;\n\n      /* istanbul ignore next */\n      visualTaggingOptions.messenger?.setup({\n        logger: config?.loggerProvider,\n        ...(config?.serverZone && { endpoint: constants.AMPLITUDE_ORIGINS_MAP[config.serverZone] }),\n        isElementSelectable: createShouldTrackEvent(options, [...allowlist, ...actionClickAllowlist]),\n        cssSelectorAllowlist: allowlist,\n        actionClickAllowlist: actionClickAllowlist,\n      });\n    }\n  };\n\n  const execute: BrowserEnrichmentPlugin['execute'] = async (event) => {\n    return event;\n  };\n\n  const teardown = async () => {\n    for (const subscription of subscriptions) {\n      subscription.unsubscribe();\n    }\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n", "export const PLUGIN_NAME = '@amplitude/plugin-network-capture-browser';\n\nexport const AMPLITUDE_NETWORK_REQUEST_EVENT = '[Amplitude] Network Request';\n", "import {\n  BrowserClient,\n  NetworkRequestEvent,\n  NetworkCaptureRule,\n  NetworkTrackingOptions,\n  getGlobalScope,\n} from '@amplitude/analytics-core';\nimport { filter } from 'rxjs';\nimport { AllWindowObservables, TimestampedEvent } from './network-capture-plugin';\nimport { AMPLITUDE_NETWORK_REQUEST_EVENT } from './constants';\n\nconst DEFAULT_STATUS_CODE_RANGE = '500-599';\n\nfunction wildcardMatch(str: string, pattern: string) {\n  // Escape all regex special characters except for *\n  const escapedPattern = pattern.replace(/[-[\\]{}()+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  // Replace * with .*\n  const regexPattern = '^' + escapedPattern.replace(/\\*/g, '.*') + '$';\n  const regex = new RegExp(regexPattern);\n  return regex.test(str);\n}\n\nfunction isStatusCodeInRange(statusCode: number, range: string) {\n  const ranges = range.split(',');\n  for (const r of ranges) {\n    const [start, end] = r.split('-').map(Number);\n    if (statusCode === start && end === undefined) {\n      return true;\n    }\n    if (statusCode >= start && statusCode <= end) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction isCaptureRuleMatch(rule: NetworkCaptureRule, hostname: string, status?: number) {\n  // check if the host is in the allowed hosts\n  if (rule.hosts && !rule.hosts.find((host: string) => wildcardMatch(hostname, host))) {\n    return;\n  }\n\n  // check if the status code is in the allowed range\n  if (status || status === 0) {\n    const statusCodeRange = rule.statusCodeRange || DEFAULT_STATUS_CODE_RANGE;\n    if (!isStatusCodeInRange(status, statusCodeRange)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction parseUrl(url: string | undefined) {\n  if (!url) {\n    return;\n  }\n  try {\n    /* istanbul ignore next */\n    const currentHref = getGlobalScope()?.location.href;\n    const urlObj = new URL(url, currentHref);\n    const query = urlObj.searchParams.toString();\n    const fragment = urlObj.hash.replace('#', '');\n    const href = urlObj.href;\n    const host = urlObj.host;\n    urlObj.hash = '';\n    urlObj.search = '';\n    const hrefWithoutQueryOrHash = urlObj.href;\n    return { query, fragment, href, hrefWithoutQueryOrHash, host };\n  } catch (e) {\n    /* istanbul ignore next */\n    return;\n  }\n}\n\nexport function shouldTrackNetworkEvent(networkEvent: NetworkRequestEvent, options: NetworkTrackingOptions = {}) {\n  const urlObj = parseUrl(networkEvent.url);\n  /* istanbul ignore if */\n  if (!urlObj) {\n    // if the URL failed to parse, do not track the event\n    // this is a probably impossible case that would only happen if the URL is malformed\n    /* istanbul ignore next */\n    return false;\n  }\n  const { host } = urlObj;\n\n  // false if is amplitude request and not configured to track amplitude requests\n  if (\n    options.ignoreAmplitudeRequests !== false &&\n    (wildcardMatch(host, '*.amplitude.com') || wildcardMatch(host, 'amplitude.com'))\n  ) {\n    return false;\n  }\n\n  // false if the host is in the ignore list\n  if (options.ignoreHosts?.find((ignoreHost: string) => wildcardMatch(host, ignoreHost))) {\n    return false;\n  }\n\n  // false if the status code is not 500-599 and there are no captureRules\n  if (\n    !options.captureRules &&\n    networkEvent.status !== undefined &&\n    !isStatusCodeInRange(networkEvent.status, DEFAULT_STATUS_CODE_RANGE)\n  ) {\n    return false;\n  }\n\n  if (options.captureRules) {\n    // find the first capture rule, in reverse-order,\n    // that is a match (true) or a miss (false)\n    let isMatch: boolean | undefined;\n    [...options.captureRules].reverse().find((rule) => {\n      isMatch = isCaptureRuleMatch(rule, host, networkEvent.status);\n      return isMatch !== undefined;\n    });\n\n    // if we found a miss (false) or no match (undefined),\n    // then do not track the event\n    if (!isMatch) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport type NetworkAnalyticsEvent = {\n  ['[Amplitude] URL']: string;\n  ['[Amplitude] URL Query']?: string;\n  ['[Amplitude] URL Fragment']?: string;\n  ['[Amplitude] Request Method']: string;\n  ['[Amplitude] Status Code']?: number;\n  ['[Amplitude] Start Time']?: number; // unix timestamp\n  ['[Amplitude] Completion Time']?: number; // unix timestamp\n  ['[Amplitude] Duration']?: number; // completionTime - startTime (millis)\n  ['[Amplitude] Request Body Size']?: number;\n  ['[Amplitude] Response Body Size']?: number;\n  ['[Amplitude] Request Type']?: 'xhr' | 'fetch';\n};\n\nexport function trackNetworkEvents({\n  allObservables,\n  networkTrackingOptions,\n  amplitude,\n}: {\n  allObservables: AllWindowObservables;\n  networkTrackingOptions: NetworkTrackingOptions;\n  amplitude: BrowserClient;\n}) {\n  const { networkObservable } = allObservables;\n\n  const filteredNetworkObservable = networkObservable.pipe(\n    filter((event: TimestampedEvent<NetworkRequestEvent>) => {\n      // Only track network events that should be tracked,\n      return shouldTrackNetworkEvent(event.event as NetworkRequestEvent, networkTrackingOptions);\n    }),\n  );\n\n  return filteredNetworkObservable.subscribe((networkEvent) => {\n    const request = networkEvent.event;\n\n    // convert to NetworkAnalyticsEvent\n    const urlObj = parseUrl(request.url);\n    /* istanbul ignore if */\n    if (!urlObj) {\n      // if the URL failed to parse, do not track the event\n      // this is a very unlikely case, because URL() shouldn't throw an exception\n      // when the URL is a valid URL\n      /* istanbul ignore next */\n      return;\n    }\n\n    const responseBodySize = request.responseWrapper?.bodySize;\n    /* istanbul ignore next */\n    const requestBodySize = request.requestWrapper?.bodySize;\n\n    const networkAnalyticsEvent: NetworkAnalyticsEvent = {\n      ['[Amplitude] URL']: urlObj.hrefWithoutQueryOrHash,\n      ['[Amplitude] URL Query']: urlObj.query,\n      ['[Amplitude] URL Fragment']: urlObj.fragment,\n      ['[Amplitude] Request Method']: request.method,\n      ['[Amplitude] Status Code']: request.status,\n      ['[Amplitude] Start Time']: request.startTime,\n      ['[Amplitude] Completion Time']: request.endTime,\n      ['[Amplitude] Duration']: request.duration,\n      ['[Amplitude] Request Body Size']: requestBodySize,\n      ['[Amplitude] Response Body Size']: responseBodySize,\n      ['[Amplitude] Request Type']: request.type,\n    };\n\n    /* istanbul ignore next */\n    amplitude?.track(AMPLITUDE_NETWORK_REQUEST_EVENT, networkAnalyticsEvent);\n  });\n}\n", "/* eslint-disable no-restricted-globals */\nimport {\n  BrowserClient,\n  BrowserConfig,\n  EnrichmentPlugin,\n  NetworkRequestEvent,\n  networkObserver,\n  NetworkEventCallback,\n  NetworkTrackingOptions,\n  ILogger,\n} from '@amplitude/analytics-core';\nimport * as constants from './constants';\nimport { Observable, Subscription } from 'rxjs';\nimport { HasEventTargetAddRemove } from 'rxjs/internal/observable/fromEvent';\nimport { trackNetworkEvents } from './track-network-event';\n\ndeclare global {\n  interface Window {\n    navigation: HasEventTargetAddRemove<Event>;\n  }\n}\n\nexport type BrowserEnrichmentPlugin = EnrichmentPlugin<BrowserClient, BrowserConfig>;\n\nexport enum ObservablesEnum {\n  NetworkObservable = 'networkObservable',\n}\n\n// Base TimestampedEvent type\ntype BaseTimestampedEvent<T> = {\n  event: T;\n  timestamp: number;\n  type: 'rage' | 'click' | 'change' | 'error' | 'navigate' | 'mutation' | 'network';\n};\n\n// Specific types for events with targetElementProperties\nexport type ElementBasedEvent = MouseEvent | Event;\nexport type ElementBasedTimestampedEvent<T> = BaseTimestampedEvent<T> & {\n  event: MouseEvent | Event;\n  type: 'click' | 'change';\n  closestTrackedAncestor: Element;\n  targetElementProperties: Record<string, any>;\n};\n\n// Union type for all possible TimestampedEvents\nexport type TimestampedEvent<T> = BaseTimestampedEvent<T> | ElementBasedTimestampedEvent<T>;\n\nexport interface AllWindowObservables {\n  [ObservablesEnum.NetworkObservable]: Observable<TimestampedEvent<NetworkRequestEvent>>;\n}\n\nexport const networkCapturePlugin = (options: NetworkTrackingOptions = {}): BrowserEnrichmentPlugin => {\n  const name = constants.PLUGIN_NAME;\n  const type = 'enrichment';\n  let logger: ILogger;\n\n  const subscriptions: Subscription[] = [];\n\n  const addAdditionalEventProperties = <T>(\n    event: T,\n    type: TimestampedEvent<T>['type'],\n  ): TimestampedEvent<T> | ElementBasedTimestampedEvent<T> => {\n    const baseEvent: BaseTimestampedEvent<T> | ElementBasedTimestampedEvent<T> = {\n      event,\n      timestamp: Date.now(),\n      type,\n    };\n\n    return baseEvent;\n  };\n\n  // Create observables on events on the window\n  const createObservables = (): AllWindowObservables => {\n    const networkObservable = new Observable<TimestampedEvent<NetworkRequestEvent>>((observer) => {\n      const callback = new NetworkEventCallback((event) => {\n        const eventWithProperties = addAdditionalEventProperties(event, 'network');\n        observer.next(eventWithProperties);\n      });\n      networkObserver.subscribe(callback, logger);\n      return () => {\n        networkObserver.unsubscribe(callback);\n      };\n    });\n\n    return {\n      [ObservablesEnum.NetworkObservable]: networkObservable,\n    };\n  };\n\n  const setup: BrowserEnrichmentPlugin['setup'] = async (config, amplitude) => {\n    /* istanbul ignore if */\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    // Create observables for events on the window\n    const allObservables = createObservables();\n\n    const networkRequestSubscription = trackNetworkEvents({\n      allObservables,\n      networkTrackingOptions: options,\n      amplitude,\n    });\n    subscriptions.push(networkRequestSubscription);\n\n    /* istanbul ignore next */\n    logger = config?.loggerProvider;\n    /* istanbul ignore next */\n    logger?.log(`${name} has been successfully added.`);\n  };\n\n  /* istanbul ignore next */\n  const execute: BrowserEnrichmentPlugin['execute'] = async (event) => {\n    return event;\n  };\n\n  const teardown = async () => {\n    for (const subscription of subscriptions) {\n      subscription.unsubscribe();\n    }\n  };\n\n  return {\n    name,\n    type,\n    setup,\n    execute,\n    teardown,\n  };\n};\n", "import { Campaign } from './campaign';\n\nexport const UTM_CAMPAIGN = 'utm_campaign';\nexport const UTM_CONTENT = 'utm_content';\nexport const UTM_ID = 'utm_id';\nexport const UTM_MEDIUM = 'utm_medium';\nexport const UTM_SOURCE = 'utm_source';\nexport const UTM_TERM = 'utm_term';\n\nexport const DCLID = 'dclid';\nexport const FBCLID = 'fbclid';\nexport const GBRAID = 'gbraid';\nexport const GCLID = 'gclid';\nexport const KO_CLICK_ID = 'ko_click_id';\nexport const LI_FAT_ID = 'li_fat_id';\nexport const MSCLKID = 'msclkid';\nexport const RDT_CID = 'rtd_cid';\nexport const TTCLID = 'ttclid';\nexport const TWCLID = 'twclid';\nexport const WBRAID = 'wbraid';\n\nexport const EMPTY_VALUE = 'EMPTY';\n\nexport const BASE_CAMPAIGN: Campaign = {\n  utm_campaign: undefined,\n  utm_content: undefined,\n  utm_id: undefined,\n  utm_medium: undefined,\n  utm_source: undefined,\n  utm_term: undefined,\n  referrer: undefined,\n  referring_domain: undefined,\n  dclid: undefined,\n  gbraid: undefined,\n  gclid: undefined,\n  fbclid: undefined,\n  ko_click_id: undefined,\n  li_fat_id: undefined,\n  msclkid: undefined,\n  rtd_cid: undefined,\n  ttclid: undefined,\n  twclid: undefined,\n  wbraid: undefined,\n};\n\nexport const MKTG = 'MKTG';\n", "import { createIdentifyEvent, Identify, ILogger } from '@amplitude/analytics-core';\nimport { Campaign } from './campaign';\nimport { BASE_CAMPAIGN } from './constants';\n\nexport interface Options {\n  excludeReferrers?: (string | RegExp)[];\n  initialEmptyValue?: string;\n  resetSessionOnNewCampaign?: boolean;\n}\n\nconst domainWithoutSubdomain = (domain: string) => {\n  const parts = domain.split('.');\n\n  if (parts.length <= 2) {\n    return domain;\n  }\n\n  return parts.slice(parts.length - 2, parts.length).join('.');\n};\n\n//Direct traffic mean no external referral, no UTMs, no click-ids, and no other customer identified marketing campaign url params.\nconst isDirectTraffic = (current: Campaign) => {\n  return Object.values(current).every((value) => !value);\n};\n\nexport const isNewCampaign = (\n  current: Campaign,\n  previous: Campaign | undefined,\n  options: Options,\n  logger: ILogger,\n  isNewSession = true,\n) => {\n  const { referrer, referring_domain, ...currentCampaign } = current;\n  const { referrer: _previous_referrer, referring_domain: prevReferringDomain, ...previousCampaign } = previous || {};\n\n  if (isExcludedReferrer(options.excludeReferrers, current.referring_domain)) {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    logger.debug(`This is not a new campaign because ${current.referring_domain} is in the exclude referrer list.`);\n    return false;\n  }\n\n  //In the same session, direct traffic should not override or unset any persisting query params\n  if (!isNewSession && isDirectTraffic(current) && previous) {\n    logger.debug('This is not a new campaign because this is a direct traffic in the same session.');\n    return false;\n  }\n\n  const hasNewCampaign = JSON.stringify(currentCampaign) !== JSON.stringify(previousCampaign);\n  const hasNewDomain =\n    domainWithoutSubdomain(referring_domain || '') !== domainWithoutSubdomain(prevReferringDomain || '');\n\n  const result = !previous || hasNewCampaign || hasNewDomain;\n\n  if (!result) {\n    logger.debug(\"This is not a new campaign because it's the same as the previous one.\");\n  } else {\n    logger.debug(`This is a new campaign. An $identify event will be sent.`);\n  }\n\n  return result;\n};\n\nexport const isExcludedReferrer = (excludeReferrers: (string | RegExp)[] = [], referringDomain = '') => {\n  return excludeReferrers.some((value) =>\n    value instanceof RegExp ? value.test(referringDomain) : value === referringDomain,\n  );\n};\n\nexport const createCampaignEvent = (campaign: Campaign, options: Options) => {\n  const campaignParameters: Campaign = {\n    // This object definition allows undefined keys to be iterated on\n    // in .reduce() to build indentify object\n    ...BASE_CAMPAIGN,\n    ...campaign,\n  };\n  const identifyEvent = Object.entries(campaignParameters).reduce((identify, [key, value]) => {\n    identify.setOnce(`initial_${key}`, value ?? options.initialEmptyValue ?? 'EMPTY');\n    if (value) {\n      return identify.set(key, value);\n    }\n    return identify.unset(key);\n  }, new Identify());\n\n  return createIdentifyEvent(identifyEvent);\n};\n\nexport const getDefaultExcludedReferrers = (cookieDomain: string | undefined) => {\n  let domain = cookieDomain;\n  if (domain) {\n    if (domain.startsWith('.')) {\n      domain = domain.substring(1);\n    }\n    return [new RegExp(`${domain.replace('.', '\\\\.')}$`)];\n  }\n  return [];\n};\n", "import { getQueryParams } from '@amplitude/analytics-core';\nimport {\n  UTM_CAMPAIGN,\n  UTM_CONTENT,\n  UTM_MEDIUM,\n  UTM_SOURCE,\n  UTM_TERM,\n  GCLID,\n  FBCLID,\n  BASE_CAMPAIGN,\n  DCLID,\n  MSCLKID,\n  RDT_CID,\n  TWCLID,\n  TTCLID,\n  KO_CLICK_ID,\n  LI_FAT_ID,\n  GBRAID,\n  WBRAID,\n  UTM_ID,\n} from './constants';\nimport {\n  Campaign,\n  CampaignParser as ICampaignParser,\n  ClickIdParameters,\n  ReferrerParameters,\n  UTMParameters,\n} from './campaign';\n\nexport class CampaignParser implements ICampaignParser {\n  async parse(): Promise<Campaign> {\n    return {\n      ...BASE_CAMPAIGN,\n      ...this.getUtmParam(),\n      ...this.getReferrer(),\n      ...this.getClickIds(),\n    } as Campaign;\n  }\n\n  getUtmParam(): UTMParameters {\n    const params = getQueryParams();\n\n    const utmCampaign = params[UTM_CAMPAIGN];\n    const utmContent = params[UTM_CONTENT];\n    const utmId = params[UTM_ID];\n    const utmMedium = params[UTM_MEDIUM];\n    const utmSource = params[UTM_SOURCE];\n    const utmTerm = params[UTM_TERM];\n\n    return {\n      utm_campaign: utmCampaign,\n      utm_content: utmContent,\n      utm_id: utmId,\n      utm_medium: utmMedium,\n      utm_source: utmSource,\n      utm_term: utmTerm,\n    };\n  }\n\n  getReferrer(): ReferrerParameters {\n    const data: ReferrerParameters = {\n      referrer: undefined,\n      referring_domain: undefined,\n    };\n    try {\n      data.referrer = document.referrer || undefined;\n      data.referring_domain = data.referrer?.split('/')[2] ?? undefined;\n    } catch {\n      // nothing to track\n    }\n    return data;\n  }\n\n  getClickIds(): ClickIdParameters {\n    const params = getQueryParams();\n    return {\n      [DCLID]: params[DCLID],\n      [FBCLID]: params[FBCLID],\n      [GBRAID]: params[GBRAID],\n      [GCLID]: params[GCLID],\n      [KO_CLICK_ID]: params[KO_CLICK_ID],\n      [LI_FAT_ID]: params[LI_FAT_ID],\n      [MSCLKID]: params[MSCLKID],\n      [RDT_CID]: params[RDT_CID],\n      [TTCLID]: params[TTCLID],\n      [TWCLID]: params[TWCLID],\n      [WBRAID]: params[WBRAID],\n    };\n  }\n}\n", "import { BrowserConfig, ILogger, Storage, getStorageKey, isNewSession } from '@amplitude/analytics-core';\nimport { Campaign } from './campaign';\nimport { Options, getDefaultExcludedReferrers, createCampaignEvent, isNewCampaign } from './helpers';\nimport { CampaignParser } from './campaign-parser';\nimport { BASE_CAMPAIGN } from './constants';\n\nexport class WebAttribution {\n  options: Options;\n  storage: Storage<Campaign>;\n  storageKey: string;\n  previousCampaign?: Campaign;\n  currentCampaign: Campaign;\n  shouldTrackNewCampaign = false;\n  sessionTimeout: number;\n  lastEventTime?: number;\n  logger: ILogger;\n\n  constructor(options: Options, config: BrowserConfig) {\n    this.options = {\n      initialEmptyValue: 'EMPTY',\n      resetSessionOnNewCampaign: false,\n      excludeReferrers: getDefaultExcludedReferrers(config.cookieOptions?.domain),\n      ...options,\n    };\n    this.storage = config.cookieStorage as unknown as Storage<Campaign>;\n    this.storageKey = getStorageKey(config.apiKey, 'MKTG');\n    this.currentCampaign = BASE_CAMPAIGN;\n    this.sessionTimeout = config.sessionTimeout;\n    this.lastEventTime = config.lastEventTime;\n    this.logger = config.loggerProvider;\n    config.loggerProvider.log('Installing web attribution tracking.');\n  }\n\n  async init() {\n    [this.currentCampaign, this.previousCampaign] = await this.fetchCampaign();\n    const isEventInNewSession = !this.lastEventTime ? true : isNewSession(this.sessionTimeout, this.lastEventTime);\n\n    if (isNewCampaign(this.currentCampaign, this.previousCampaign, this.options, this.logger, isEventInNewSession)) {\n      this.shouldTrackNewCampaign = true;\n      await this.storage.set(this.storageKey, this.currentCampaign);\n    }\n  }\n\n  async fetchCampaign() {\n    return await Promise.all([new CampaignParser().parse(), this.storage.get(this.storageKey)]);\n  }\n\n  /**\n   * This can be called when enable web attribution and either\n   * 1. set a new session\n   * 2. has new campaign and enable resetSessionOnNewCampaign\n   */\n  generateCampaignEvent(event_id?: number) {\n    // Mark this campaign has been tracked\n    this.shouldTrackNewCampaign = false;\n    const campaignEvent = createCampaignEvent(this.currentCampaign, this.options);\n    if (event_id) {\n      campaignEvent.event_id = event_id;\n    }\n    return campaignEvent;\n  }\n\n  shouldSetSessionIdOnNewCampaign() {\n    return this.shouldTrackNewCampaign && !!this.options.resetSessionOnNewCampaign;\n  }\n}\n", "import {\n  AmplitudeCore,\n  Destination,\n  Identify,\n  returnWrapper,\n  Revenue,\n  UUID,\n  getAnalyticsConnector,\n  setConnectorDeviceId,\n  setConnectorUserId,\n  isNewSession,\n  IdentityEventSender,\n  getQueryParams,\n  Event,\n  EventOptions,\n  IIdentify,\n  IRevenue,\n  TransportType,\n  OfflineDisabled,\n  Result,\n  BrowserOptions,\n  BrowserConfig,\n  BrowserClient,\n} from '@amplitude/analytics-core';\nimport {\n  getAttributionTrackingConfig,\n  getPageViewTrackingConfig,\n  getElementInteractionsConfig,\n  getNetworkTrackingConfig,\n  isAttributionTrackingEnabled,\n  isSessionTrackingEnabled,\n  isFileDownloadTrackingEnabled,\n  isFormInteractionTrackingEnabled,\n  isElementInteractionsEnabled,\n  isPageViewTrackingEnabled,\n  isNetworkTrackingEnabled,\n} from './default-tracking';\nimport { convertProxyObjectToRealObject, isInstanceProxy } from './utils/snippet-helper';\nimport { Context } from './plugins/context';\nimport { useBrowserConfig, createTransport } from './config';\nimport { pageViewTrackingPlugin } from '@amplitude/plugin-page-view-tracking-browser';\nimport { formInteractionTracking } from './plugins/form-interaction-tracking';\nimport { fileDownloadTracking } from './plugins/file-download-tracking';\nimport { DEFAULT_SESSION_END_EVENT, DEFAULT_SESSION_START_EVENT } from './constants';\nimport { detNotify } from './det-notification';\nimport { networkConnectivityCheckerPlugin } from './plugins/network-connectivity-checker';\nimport { createBrowserJoinedConfigGenerator } from './config/joined-config';\nimport { autocapturePlugin } from '@amplitude/plugin-autocapture-browser';\nimport { plugin as networkCapturePlugin } from '@amplitude/plugin-network-capture-browser';\nimport { WebAttribution } from './attribution/web-attribution';\n\n/**\n * Exported for `@amplitude/unified` or integration with blade plugins.\n * If you only use `@amplitude/analytics-browser`, use `amplitude.init()` or `amplitude.createInstance()` instead.\n */\nexport class AmplitudeBrowser extends AmplitudeCore implements BrowserClient {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  config: BrowserConfig;\n  previousSessionDeviceId: string | undefined;\n  previousSessionUserId: string | undefined;\n  webAttribution: WebAttribution | undefined;\n\n  init(apiKey = '', userIdOrOptions?: string | BrowserOptions, maybeOptions?: BrowserOptions) {\n    let userId: string | undefined;\n    let options: BrowserOptions | undefined;\n\n    if (arguments.length > 2) {\n      userId = userIdOrOptions as string | undefined;\n      options = maybeOptions;\n    } else {\n      if (typeof userIdOrOptions === 'string') {\n        userId = userIdOrOptions;\n        options = undefined;\n      } else {\n        userId = userIdOrOptions?.userId;\n        options = userIdOrOptions;\n      }\n    }\n    return returnWrapper(this._init({ ...options, userId, apiKey }));\n  }\n  protected async _init(options: BrowserOptions & { apiKey: string }) {\n    // Step 1: Block concurrent initialization\n    if (this.initializing) {\n      return;\n    }\n    this.initializing = true;\n\n    let browserOptions = await useBrowserConfig(options.apiKey, options, this);\n    // Step 2: Create browser config\n    if (browserOptions.fetchRemoteConfig) {\n      const joinedConfigGenerator = await createBrowserJoinedConfigGenerator(browserOptions);\n      browserOptions = await joinedConfigGenerator.generateJoinedConfig();\n    }\n    await super._init(browserOptions);\n    this.logBrowserOptions(browserOptions);\n\n    // Add web attribution plugin\n    if (isAttributionTrackingEnabled(this.config.defaultTracking)) {\n      const attributionTrackingOptions = getAttributionTrackingConfig(this.config);\n      this.webAttribution = new WebAttribution(attributionTrackingOptions, this.config);\n      // Fetch the current campaign, check if need to track web attribution later\n      await this.webAttribution.init();\n    }\n\n    // Step 3: Set session ID\n    // Priority 1: `options.sessionId`\n    // Priority 2: sessionId from url if it's Number\n    // Priority 3: last known sessionId from user identity storage\n    // Default: `Date.now()`\n    // Session ID is handled differently than device ID and user ID due to session events\n    const queryParams = getQueryParams();\n    const querySessionId = Number.isNaN(Number(queryParams.ampSessionId))\n      ? undefined\n      : Number(queryParams.ampSessionId);\n    this.setSessionId(options.sessionId ?? querySessionId ?? this.config.sessionId ?? Date.now());\n\n    // Set up the analytics connector to integrate with the experiment SDK.\n    // Send events from the experiment SDK and forward identifies to the\n    // identity store.\n    const connector = getAnalyticsConnector(options.instanceName);\n    connector.identityStore.setIdentity({\n      userId: this.config.userId,\n      deviceId: this.config.deviceId,\n    });\n\n    // Step 4: Install plugins\n    // Do not track any events before this\n    if (this.config.offline !== OfflineDisabled) {\n      await this.add(networkConnectivityCheckerPlugin()).promise;\n    }\n    await this.add(new Destination()).promise;\n    await this.add(new Context()).promise;\n    await this.add(new IdentityEventSender()).promise;\n\n    // Notify if DET is enabled\n    detNotify(this.config);\n\n    if (isFileDownloadTrackingEnabled(this.config.defaultTracking)) {\n      this.config.loggerProvider.debug('Adding file download tracking plugin');\n      await this.add(fileDownloadTracking()).promise;\n    }\n\n    if (isFormInteractionTrackingEnabled(this.config.defaultTracking)) {\n      this.config.loggerProvider.debug('Adding form interaction plugin');\n      await this.add(formInteractionTracking()).promise;\n    }\n\n    // Add page view plugin\n    if (isPageViewTrackingEnabled(this.config.defaultTracking)) {\n      this.config.loggerProvider.debug('Adding page view tracking plugin');\n      await this.add(pageViewTrackingPlugin(getPageViewTrackingConfig(this.config))).promise;\n    }\n\n    if (isElementInteractionsEnabled(this.config.autocapture)) {\n      this.config.loggerProvider.debug('Adding user interactions plugin (autocapture plugin)');\n      await this.add(autocapturePlugin(getElementInteractionsConfig(this.config))).promise;\n    }\n\n    if (isNetworkTrackingEnabled(this.config.autocapture)) {\n      this.config.loggerProvider.debug('Adding network tracking plugin');\n      await this.add(networkCapturePlugin(getNetworkTrackingConfig(this.config))).promise;\n    }\n\n    this.initializing = false;\n\n    // Step 6: Run queued dispatch functions\n    await this.runQueuedFunctions('dispatchQ');\n\n    // Step 7: Add the event receiver after running remaining queued functions.\n    connector.eventBridge.setEventReceiver((event) => {\n      void this.track(event.eventType, event.eventProperties);\n    });\n  }\n\n  getUserId() {\n    return this.config?.userId;\n  }\n\n  setUserId(userId: string | undefined) {\n    if (!this.config) {\n      this.q.push(this.setUserId.bind(this, userId));\n      return;\n    }\n    this.config.loggerProvider.debug('function setUserId: ', userId);\n    if (userId !== this.config.userId || userId === undefined) {\n      this.config.userId = userId;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.timeline.onIdentityChanged({ userId: userId });\n      setConnectorUserId(userId, this.config.instanceName);\n    }\n  }\n\n  getDeviceId() {\n    return this.config?.deviceId;\n  }\n\n  setDeviceId(deviceId: string) {\n    if (!this.config) {\n      this.q.push(this.setDeviceId.bind(this, deviceId));\n      return;\n    }\n    this.config.loggerProvider.debug('function setDeviceId: ', deviceId);\n    if (deviceId !== this.config.deviceId) {\n      this.config.deviceId = deviceId;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.timeline.onIdentityChanged({ deviceId: deviceId });\n      setConnectorDeviceId(deviceId, this.config.instanceName);\n    }\n  }\n\n  reset() {\n    this.setDeviceId(UUID());\n    this.setUserId(undefined);\n  }\n\n  getSessionId() {\n    return this.config?.sessionId;\n  }\n\n  setSessionId(sessionId: number) {\n    const promises: Promise<Result>[] = [];\n    if (!this.config) {\n      this.q.push(this.setSessionId.bind(this, sessionId));\n      return returnWrapper(Promise.resolve());\n    }\n    // Prevents starting a new session with the same session ID\n    if (sessionId === this.config.sessionId) {\n      return returnWrapper(Promise.resolve());\n    }\n\n    this.config.loggerProvider.debug('function setSessionId: ', sessionId);\n\n    const previousSessionId = this.getSessionId();\n    if (previousSessionId !== sessionId) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.timeline.onSessionIdChanged(sessionId);\n    }\n\n    const lastEventTime = this.config.lastEventTime;\n    let lastEventId = this.config.lastEventId ?? -1;\n\n    this.config.sessionId = sessionId;\n    this.config.lastEventTime = undefined;\n    this.config.pageCounter = 0;\n\n    if (isSessionTrackingEnabled(this.config.defaultTracking)) {\n      if (previousSessionId && lastEventTime) {\n        promises.push(\n          this.track(DEFAULT_SESSION_END_EVENT, undefined, {\n            device_id: this.previousSessionDeviceId,\n            event_id: ++lastEventId,\n            session_id: previousSessionId,\n            time: lastEventTime + 1,\n            user_id: this.previousSessionUserId,\n          }).promise,\n        );\n      }\n      this.config.lastEventTime = this.config.sessionId;\n    }\n\n    // Fire web attribution event when enable webAttribution tracking\n    // 1. has new campaign (call setSessionId from init function)\n    // 2. or shouldTrackNewCampaign (call setSessionId from async process(event) when there has new campaign and resetSessionOnNewCampaign = true )\n    const isCampaignEventTracked = this.trackCampaignEventIfNeeded(++lastEventId, promises);\n\n    if (isSessionTrackingEnabled(this.config.defaultTracking)) {\n      promises.push(\n        this.track(DEFAULT_SESSION_START_EVENT, undefined, {\n          event_id: isCampaignEventTracked ? ++lastEventId : lastEventId,\n          session_id: this.config.sessionId,\n          time: this.config.lastEventTime,\n        }).promise,\n      );\n    }\n\n    this.previousSessionDeviceId = this.config.deviceId;\n    this.previousSessionUserId = this.config.userId;\n    return returnWrapper(Promise.all(promises));\n  }\n\n  extendSession() {\n    if (!this.config) {\n      this.q.push(this.extendSession.bind(this));\n      return;\n    }\n    this.config.lastEventTime = Date.now();\n  }\n\n  setTransport(transport: TransportType) {\n    if (!this.config) {\n      this.q.push(this.setTransport.bind(this, transport));\n      return;\n    }\n    this.config.transportProvider = createTransport(transport);\n  }\n\n  identify(identify: IIdentify, eventOptions?: EventOptions) {\n    if (isInstanceProxy(identify)) {\n      const queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    if (eventOptions?.user_id) {\n      this.setUserId(eventOptions.user_id);\n    }\n    if (eventOptions?.device_id) {\n      this.setDeviceId(eventOptions.device_id);\n    }\n    return super.identify(identify, eventOptions);\n  }\n\n  groupIdentify(groupType: string, groupName: string | string[], identify: IIdentify, eventOptions?: EventOptions) {\n    if (isInstanceProxy(identify)) {\n      const queue = identify._q;\n      identify._q = [];\n      identify = convertProxyObjectToRealObject(new Identify(), queue);\n    }\n    return super.groupIdentify(groupType, groupName, identify, eventOptions);\n  }\n\n  revenue(revenue: IRevenue, eventOptions?: EventOptions) {\n    if (isInstanceProxy(revenue)) {\n      const queue = revenue._q;\n      revenue._q = [];\n      revenue = convertProxyObjectToRealObject(new Revenue(), queue);\n    }\n    return super.revenue(revenue, eventOptions);\n  }\n\n  private trackCampaignEventIfNeeded(lastEventId?: number, promises?: Promise<Result>[]) {\n    if (!this.webAttribution || !this.webAttribution.shouldTrackNewCampaign) {\n      return false;\n    }\n\n    const campaignEvent = this.webAttribution.generateCampaignEvent(lastEventId);\n    if (promises) {\n      promises.push(this.track(campaignEvent).promise);\n    } else {\n      this.track(campaignEvent);\n    }\n    this.config.loggerProvider.log('Tracking attribution.');\n    return true;\n  }\n\n  async process(event: Event) {\n    const currentTime = Date.now();\n    const isEventInNewSession = isNewSession(this.config.sessionTimeout, this.config.lastEventTime);\n    const shouldSetSessionIdOnNewCampaign =\n      this.webAttribution && this.webAttribution.shouldSetSessionIdOnNewCampaign();\n\n    if (\n      event.event_type !== DEFAULT_SESSION_START_EVENT &&\n      event.event_type !== DEFAULT_SESSION_END_EVENT &&\n      (!event.session_id || event.session_id === this.getSessionId())\n    ) {\n      if (isEventInNewSession || shouldSetSessionIdOnNewCampaign) {\n        this.setSessionId(currentTime);\n        if (shouldSetSessionIdOnNewCampaign) {\n          this.config.loggerProvider.log('Created a new session for new campaign.');\n        }\n      } else if (!isEventInNewSession) {\n        // Web attribution should be tracked during the middle of a session\n        // if there has been a chance in the campaign information.\n        this.trackCampaignEventIfNeeded();\n      }\n    }\n\n    return super.process(event);\n  }\n\n  private logBrowserOptions(browserConfig: BrowserOptions & { apiKey: string }) {\n    try {\n      const browserConfigCopy = {\n        ...browserConfig,\n        apiKey: browserConfig.apiKey.substring(0, 10) + '********',\n      };\n      this.config.loggerProvider.debug('Initialized Amplitude with BrowserConfig:', JSON.stringify(browserConfigCopy));\n    } catch (e) {\n      /* istanbul ignore next */\n      this.config.loggerProvider.error('Error logging browser config', e);\n    }\n  }\n}\n", "import { debugWrapper, getClientLogConfig, getClientStates, BrowserClient } from '@amplitude/analytics-core';\nimport { AmplitudeBrowser } from './browser-client';\n\nexport const createInstance = (): BrowserClient => {\n  const client = new AmplitudeBrowser();\n  return {\n    init: debugWrapper(\n      client.init.bind(client),\n      'init',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    add: debugWrapper(\n      client.add.bind(client),\n      'add',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.plugins']),\n    ),\n    remove: debugWrapper(\n      client.remove.bind(client),\n      'remove',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.plugins']),\n    ),\n    track: debugWrapper(\n      client.track.bind(client),\n      'track',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    logEvent: debugWrapper(\n      client.logEvent.bind(client),\n      'logEvent',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    identify: debugWrapper(\n      client.identify.bind(client),\n      'identify',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    groupIdentify: debugWrapper(\n      client.groupIdentify.bind(client),\n      'groupIdentify',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    setGroup: debugWrapper(\n      client.setGroup.bind(client),\n      'setGroup',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    revenue: debugWrapper(\n      client.revenue.bind(client),\n      'revenue',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    flush: debugWrapper(\n      client.flush.bind(client),\n      'flush',\n      getClientLogConfig(client),\n      getClientStates(client, ['config.apiKey', 'timeline.queue.length']),\n    ),\n    getUserId: debugWrapper(\n      client.getUserId.bind(client),\n      'getUserId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId']),\n    ),\n    setUserId: debugWrapper(\n      client.setUserId.bind(client),\n      'setUserId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId']),\n    ),\n    getDeviceId: debugWrapper(\n      client.getDeviceId.bind(client),\n      'getDeviceId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.deviceId']),\n    ),\n    setDeviceId: debugWrapper(\n      client.setDeviceId.bind(client),\n      'setDeviceId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.deviceId']),\n    ),\n    reset: debugWrapper(\n      client.reset.bind(client),\n      'reset',\n      getClientLogConfig(client),\n      getClientStates(client, ['config', 'config.userId', 'config.deviceId']),\n    ),\n    getSessionId: debugWrapper(\n      client.getSessionId.bind(client),\n      'getSessionId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setSessionId: debugWrapper(\n      client.setSessionId.bind(client),\n      'setSessionId',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    extendSession: debugWrapper(\n      client.extendSession.bind(client),\n      'extendSession',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setOptOut: debugWrapper(\n      client.setOptOut.bind(client),\n      'setOptOut',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n    setTransport: debugWrapper(\n      client.setTransport.bind(client),\n      'setTransport',\n      getClientLogConfig(client),\n      getClientStates(client, ['config']),\n    ),\n  };\n};\n\nexport default createInstance();\n", "/* eslint-disable @typescript-eslint/unbound-method */\nexport {\n  AmplitudeReturn,\n  BaseEvent,\n  EventOptions,\n  BrowserClient,\n  AttributionOptions,\n  AutocaptureOptions,\n  BrowserOptions,\n  BrowserConfig,\n  IConfig,\n  Event,\n  IdentifyEvent,\n  GroupIdentifyEvent,\n  IdentifyOperation,\n  SpecialEventType,\n  IIdentify,\n  IRevenue,\n  RevenueProperty,\n  ILogger,\n  LogLevel,\n  Plugin,\n  BeforePlugin,\n  EnrichmentPlugin,\n  DestinationPlugin,\n  Result,\n  ServerZoneType,\n  ServerZone,\n  IdentityStorageType,\n  Storage,\n  TransportType,\n  OfflineDisabled,\n  Messenger,\n  ElementInteractionsOptions,\n  ActionType,\n  DEFAULT_CSS_SELECTOR_ALLOWLIST,\n  DEFAULT_DATA_ATTRIBUTE_PREFIX,\n  DEFAULT_ACTION_CLICK_ALLOWLIST,\n} from '@amplitude/analytics-core';\n\nexport { Campaign, CampaignParser, ClickIdParameters, ReferrerParameters, UTMParameters } from './attribution/campaign';\n", "/* eslint-disable @typescript-eslint/unbound-method */\nimport client from './browser-client-factory';\nexport { createInstance } from './browser-client-factory';\nexport const {\n  add,\n  extendSession,\n  flush,\n  getDeviceId,\n  getSessionId,\n  getUserId,\n  groupIdentify,\n  identify,\n  init,\n  logEvent,\n  remove,\n  reset,\n  revenue,\n  setDeviceId,\n  setGroup,\n  setOptOut,\n  setSessionId,\n  setTransport,\n  setUserId,\n  track,\n} = client;\nexport { AmplitudeBrowser } from './browser-client';\nexport { runQueuedFunctions } from './utils/snippet-helper';\nexport { Revenue, Identify } from '@amplitude/analytics-core';\n\n// Export types to maintain backward compatibility with `analytics-types`.\n// In the next major version, only export customer-facing types to reduce the public API surface.\nexport * as Types from './types';\n"],
  "mappings": "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",
  "names": ["IdentifyOperation", "SpecialEventType", "Identify", "IdentifyOperation", "IdentifyOperation", "Status", "_a", "Timeline", "config", "plugin", "timeout", "e", "_a", "_b", "queue", "identity", "identify", "groupIdentify", "revenue", "AmplitudeCore", "config", "identify", "revenue", "plugin", "Revenue", "revenue", "RevenueProperty", "LogLevel", "Logger", "Config", "RequestMetadata", "Destination", "config", "context", "timeout", "_a", "retry", "ApplicationContextProviderImpl", "EventBridgeImpl", "__assign", "__values", "__read", "__values", "IdentityStoreImpl", "self", "__assign", "__read", "identity", "AnalyticsConnector", "IdentityEventSender", "context", "config", "getLanguage", "pairs", "MemoryStorage", "CookieStorage", "BaseTransport", "FetchTransport", "ServerZone", "RequestWrapperFetch", "global", "RequestWrapperXhr", "global", "count", "ResponseWrapperFetch", "ResponseWrapperXhr", "NetworkRequestEvent", "timestamp", "_a", "_b", "NetworkEventCallback", "NetworkObserver", "config", "queue", "Context", "config", "context", "getLanguage", "BrowserStorage", "LocalStorage", "config", "SessionStorage", "XHRTransport", "_a", "SendBeaconTransport", "BrowserConfig", "getGlobalScope", "getQueryParams", "getGlobalScope", "pairs", "tryDecodeURIComponent", "CampaignParser", "getQueryParams", "getCookieName", "CampaignTracker", "getCookieName", "identify", "isNewSession", "domainWithoutSubdomain", "isNewSession", "identify", "getStorageKey", "isNewSession", "WebAttribution", "config", "getStorageKey", "isNewSession", "CookieStorage", "getGlobalScope", "decodeCookiesAsDefault", "decodeCookiesWithDoubleUrlEncoding", "decodeCookiesAsDefault", "decodeCookiesWithDoubleUrlEncoding", "FetchTransport", "getAnalyticsConnector", "IdentityEventSender", "getAnalyticsConnector", "context", "config", "IdentifyOperation", "RevenueProperty", "SpecialEventType", "LogLevel", "ServerZone", "Status", "getGlobalScope", "_a", "config", "_b", "IdentifyOperation", "type", "config", "_a", "type", "config", "_a", "config", "type", "config", "MAX_RETRIES_EXCEEDED_MESSAGE", "UNEXPECTED_ERROR_MESSAGE", "RemoteConfigFetch", "_a", "Status", "_this", "ServerZone", "createRemoteConfigFetch", "BrowserJoinedConfigGenerator", "createRemoteConfigFetch", "Subscription", "empty", "timeout", "Subscriber", "ConsumerObserver", "SafeSubscriber", "Observable", "observable", "init", "OperatorSubscriber", "err", "ConnectableObservable", "timestamp", "timestamp", "Subject", "observable", "AnonymousSubject", "BehaviorSubject", "ReplaySubject", "last", "AsyncSubject", "Action", "delay", "timeout", "AsyncAction", "delay", "AsapAction", "delay", "Scheduler", "delay", "AsyncScheduler", "AsapScheduler", "QueueAction", "delay", "QueueScheduler", "AnimationFrameAction", "delay", "AnimationFrameScheduler", "VirtualTimeScheduler", "VirtualAction", "delay", "delay", "repeat", "delay", "delay", "iterator", "iterator", "init", "NotificationKind", "Notification", "config", "first", "delay", "isArray", "expand", "buffer", "add", "remove", "isArray", "count", "refCount", "reset", "_a", "isEmpty", "WindowMessenger", "_b", "_a", "attr", "_a", "ObservablesEnum", "_a", "_c", "_b", "type", "config", "PLUGIN_NAME", "range", "_a", "ObservablesEnum", "PLUGIN_NAME", "type", "config", "UTM_CAMPAIGN", "UTM_CONTENT", "UTM_ID", "UTM_MEDIUM", "UTM_SOURCE", "UTM_TERM", "DCLID", "FBCLID", "GBRAID", "GCLID", "KO_CLICK_ID", "LI_FAT_ID", "MSCLKID", "RDT_CID", "TTCLID", "TWCLID", "WBRAID", "BASE_CAMPAIGN", "domainWithoutSubdomain", "isDirectTraffic", "isNewCampaign", "isNewSession", "isExcludedReferrer", "createCampaignEvent", "BASE_CAMPAIGN", "identify", "getDefaultExcludedReferrers", "CampaignParser", "BASE_CAMPAIGN", "UTM_CAMPAIGN", "UTM_CONTENT", "UTM_ID", "UTM_MEDIUM", "UTM_SOURCE", "UTM_TERM", "DCLID", "FBCLID", "GBRAID", "GCLID", "KO_CLICK_ID", "LI_FAT_ID", "MSCLKID", "RDT_CID", "TTCLID", "TWCLID", "WBRAID", "WebAttribution", "config", "getDefaultExcludedReferrers", "BASE_CAMPAIGN", "isNewCampaign", "CampaignParser", "createCampaignEvent", "AmplitudeBrowser", "WebAttribution", "identify", "queue", "revenue"]
}
