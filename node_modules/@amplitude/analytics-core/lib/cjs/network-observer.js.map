{"version":3,"file":"network-observer.js","sourceRoot":"","sources":["../../src/network-observer.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalScope } from './global-scope';\nimport { UUID } from './utils/uuid';\nimport { ILogger } from './logger';\nimport {\n  IRequestWrapper,\n  NetworkRequestEvent,\n  RequestWrapperFetch,\n  ResponseWrapperFetch,\n  RequestWrapperXhr,\n  ResponseWrapperXhr,\n  IResponseWrapper,\n  RequestInitSafe,\n  XMLHttpRequestBodyInitSafe,\n} from './network-request-event';\n\n// object that is added to each XHR instance so\n// that info can be set in xhr.open and retrieved in xhr.send\ntype AmplitudeAnalyticsEvent = {\n  method: string;\n  url: string | URL;\n  startTime: number;\n  durationStart: number;\n  status?: number;\n};\n\n/**\n * Typeguard function checks if an input is a Request object.\n */\nfunction isRequest(requestInfo: any): requestInfo is Request {\n  return typeof requestInfo === 'object' && requestInfo !== null && 'url' in requestInfo && 'method' in requestInfo;\n}\n\nexport type NetworkEventCallbackFn = (event: NetworkRequestEvent) => void;\n\nexport class NetworkEventCallback {\n  constructor(public readonly callback: (event: NetworkRequestEvent) => void, public readonly id: string = UUID()) {}\n}\n\ntype RequestUrlAndMethod = {\n  url: string | URL | undefined;\n  method: string | undefined;\n};\n\n// A narrowed down [XMLHttpRequest](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) type\n// that only includes the properties we need to access and adds the $$AmplitudeAnalyticsEvent property\n// Use great care when modifying this type, make sure you only use read-only properties and only add\n// what you need to access, nothing more.\ntype AmplitudeXMLHttpRequestSafe = {\n  $$AmplitudeAnalyticsEvent: AmplitudeAnalyticsEvent;\n  status: number;\n  getAllResponseHeaders: typeof XMLHttpRequest.prototype.getAllResponseHeaders;\n  getResponseHeader: typeof XMLHttpRequest.prototype.getResponseHeader;\n  addEventListener: (type: 'loadend', listener: () => void) => void;\n};\n\nexport class NetworkObserver {\n  private eventCallbacks: Map<string, NetworkEventCallback> = new Map();\n  // eslint-disable-next-line no-restricted-globals\n  private globalScope?: typeof globalThis;\n  private logger?: ILogger;\n  private isObserving = false;\n  constructor(logger?: ILogger) {\n    this.logger = logger;\n    const globalScope = getGlobalScope();\n    if (!NetworkObserver.isSupported()) {\n      /* istanbul ignore next */\n      return;\n    }\n    this.globalScope = globalScope;\n  }\n\n  static isSupported(): boolean {\n    const globalScope = getGlobalScope();\n    return !!globalScope && !!globalScope.fetch;\n  }\n\n  subscribe(eventCallback: NetworkEventCallback, logger?: ILogger) {\n    if (!this.logger) {\n      this.logger = logger;\n    }\n    this.eventCallbacks.set(eventCallback.id, eventCallback);\n    if (!this.isObserving) {\n      /* istanbul ignore next */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalXhrOpen = this.globalScope?.XMLHttpRequest?.prototype?.open;\n      /* istanbul ignore next */\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const originalXhrSend = this.globalScope?.XMLHttpRequest?.prototype?.send;\n      if (originalXhrOpen && originalXhrSend) {\n        this.observeXhr(originalXhrOpen, originalXhrSend);\n      }\n\n      /* istanbul ignore next */\n      const originalFetch = this.globalScope?.fetch;\n      /* istanbul ignore next */\n      if (originalFetch) {\n        this.observeFetch(originalFetch);\n      }\n\n      /* istanbul ignore next */\n      this.isObserving = true;\n    }\n  }\n\n  unsubscribe(eventCallback: NetworkEventCallback) {\n    this.eventCallbacks.delete(eventCallback.id);\n  }\n\n  protected triggerEventCallbacks(event: NetworkRequestEvent) {\n    this.eventCallbacks.forEach((callback) => {\n      try {\n        callback.callback(event);\n      } catch (err) {\n        // if the callback throws an error, we should catch it\n        // to avoid breaking the fetch promise chain\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while triggering event callbacks', err);\n      }\n    });\n  }\n\n  private handleNetworkRequestEvent(\n    requestType: 'fetch' | 'xhr',\n    requestInfo: RequestInfo | URL | RequestUrlAndMethod | undefined,\n    requestWrapper: IRequestWrapper | undefined,\n    responseWrapper: IResponseWrapper | undefined,\n    typedError: Error | undefined,\n    startTime?: number,\n    durationStart?: number,\n  ) {\n    /* istanbul ignore next */\n    if (startTime === undefined || durationStart === undefined) {\n      // if we reach this point, it means that the performance API is not supported\n      // so we can't construct a NetworkRequestEvent\n      return;\n    }\n\n    // parse the URL and Method\n    let url: string | undefined;\n    let method = 'GET';\n    if (isRequest(requestInfo)) {\n      url = requestInfo['url'];\n      method = requestInfo['method'];\n    } else {\n      url = requestInfo?.toString?.();\n    }\n    method = requestWrapper?.method || method;\n\n    let status, error;\n    if (responseWrapper) {\n      status = responseWrapper.status;\n    }\n\n    if (typedError) {\n      error = {\n        name: typedError.name || 'UnknownError',\n        message: typedError.message || 'An unknown error occurred',\n      };\n      status = 0;\n    }\n\n    const duration = Math.floor(performance.now() - durationStart);\n    const endTime = Math.floor(startTime + duration);\n\n    const requestEvent = new NetworkRequestEvent(\n      requestType,\n      method,\n      startTime, // timestamp and startTime are aliases\n      startTime,\n      url,\n      requestWrapper,\n      status,\n      duration,\n      responseWrapper,\n      error,\n      endTime,\n    );\n\n    this.triggerEventCallbacks(requestEvent);\n  }\n\n  private getTimestamps() {\n    /* istanbul ignore next */\n    return {\n      startTime: Date.now?.(),\n      durationStart: performance?.now?.(),\n    };\n  }\n\n  private observeFetch(\n    originalFetch: (requestInfo: RequestInfo | URL, requestInit?: RequestInit) => Promise<Response>,\n  ) {\n    /* istanbul ignore next */\n    if (!this.globalScope || !originalFetch) {\n      return;\n    }\n    /**\n     * IMPORTANT: This overrides window.fetch in browsers.\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of fetch\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    this.globalScope.fetch = async (requestInfo?: RequestInfo | URL, requestInit?: RequestInit) => {\n      // 1: capture the start time and duration start time before the fetch call\n      let timestamps;\n      try {\n        timestamps = this.getTimestamps();\n      } catch (error) {\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while retrieving timestamps', error);\n      }\n\n      // 2. make the call to the original fetch and preserve the response or error\n      let originalResponse, originalError;\n      try {\n        originalResponse = await originalFetch(requestInfo as RequestInfo | URL, requestInit);\n      } catch (err) {\n        // Capture error information\n        originalError = err;\n      }\n\n      // 3. call the handler after the fetch call is done\n      try {\n        this.handleNetworkRequestEvent(\n          'fetch',\n          requestInfo,\n          requestInit ? new RequestWrapperFetch(requestInit as RequestInitSafe) : undefined,\n          originalResponse ? new ResponseWrapperFetch(originalResponse) : undefined,\n          originalError as Error,\n          /* istanbul ignore next */\n          timestamps?.startTime,\n          /* istanbul ignore next */\n          timestamps?.durationStart,\n        );\n      } catch (err) {\n        // this catch shouldn't be reachable, but keep it here for safety\n        // because we're overriding the fetch function and better to be safe than sorry\n        /* istanbul ignore next */\n        this.logger?.debug('an unexpected error occurred while handling fetch', err);\n      }\n\n      // 4. return the original response or throw the original error\n      if (originalResponse) {\n        // if the response is not undefined, return it\n        return originalResponse;\n      } else {\n        throw originalError;\n      }\n    };\n  }\n\n  private observeXhr(\n    originalXhrOpen:\n      | ((\n          method: string,\n          url: string | URL,\n          async?: boolean,\n          username?: string | null,\n          password?: string | null,\n        ) => void)\n      | undefined,\n    originalXhrSend: ((body?: Document | XMLHttpRequestBodyInit | null) => void) | undefined,\n  ) {\n    /* istanbul ignore next */\n    if (!this.globalScope || !originalXhrOpen || !originalXhrSend) {\n      return;\n    }\n\n    const xhrProto = this.globalScope.XMLHttpRequest.prototype;\n\n    const networkObserverContext = this as NetworkObserver;\n\n    /**\n     * IMPORTANT: This overrides window.XMLHttpRequest.prototype.open\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of xhr.open\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    xhrProto.open = function (...args: any[]) {\n      const xhrSafe = this as unknown as AmplitudeXMLHttpRequestSafe;\n      const [method, url] = args as [string, string | URL];\n      try {\n        /* istanbul ignore next */\n        xhrSafe.$$AmplitudeAnalyticsEvent = {\n          method,\n          url: url?.toString?.(),\n          ...networkObserverContext.getTimestamps(),\n        } as AmplitudeAnalyticsEvent;\n      } catch (err) {\n        /* istanbul ignore next */\n        networkObserverContext.logger?.debug('an unexpected error occurred while calling xhr open', err);\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return originalXhrOpen.apply(xhrSafe, args as any);\n    };\n\n    /**\n     * IMPORTANT: This overrides window.XMLHttpRequest.prototype.send\n     * You probably never need to make changes to this function.\n     * If you do, please be careful to preserve the original functionality of xhr.send\n     * and make sure another developer who is an expert reviews this change throughly\n     */\n    // allow \"any\" type for args to reflect how it's used in the browser\n    /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */\n    xhrProto.send = function (...args: any[]) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const xhrSafe = this as unknown as AmplitudeXMLHttpRequestSafe;\n      const body = args[0] as XMLHttpRequestBodyInitSafe;\n      const requestEvent = xhrSafe.$$AmplitudeAnalyticsEvent;\n\n      xhrSafe.addEventListener('loadend', function () {\n        try {\n          const responseHeaders = xhrSafe.getAllResponseHeaders();\n          const responseBodySize = xhrSafe.getResponseHeader('content-length');\n          const responseWrapper = new ResponseWrapperXhr(\n            xhrSafe.status,\n            responseHeaders,\n            /* istanbul ignore next */\n            responseBodySize ? parseInt(responseBodySize, 10) : undefined,\n          );\n          const requestWrapper = new RequestWrapperXhr(body);\n          requestEvent.status = xhrSafe.status;\n          networkObserverContext.handleNetworkRequestEvent(\n            'xhr',\n            { url: requestEvent.url, method: requestEvent.method },\n            requestWrapper,\n            responseWrapper,\n            undefined,\n            requestEvent.startTime,\n            requestEvent.durationStart,\n          );\n        } catch (err) {\n          /* istanbul ignore next */\n          networkObserverContext.logger?.debug('an unexpected error occurred while handling xhr send', err);\n        }\n      });\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-argument */\n      return originalXhrSend.apply(xhrSafe, args as any);\n    };\n  }\n}\n\n// singleton instance of NetworkObserver\nexport const networkObserver = new NetworkObserver();\n"]}