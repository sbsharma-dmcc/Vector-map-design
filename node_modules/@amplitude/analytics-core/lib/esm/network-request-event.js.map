{"version":3,"file":"network-request-event.js","sourceRoot":"","sources":["../../src/network-request-event.ts"],"names":[],"mappings":"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","sourcesContent":["import { getGlobalScope } from './global-scope';\n\n/* SAFE TYPE DEFINITIONS\n  These type definitions expose limited properties of the original types\n  to prevent the consumer from mutating them or consuming them.\n*/\ntype BlobSafe = {\n  size: number;\n};\n\ntype ArrayBufferSafe = {\n  byteLength: number;\n};\n\ntype ArrayBufferViewSafe = {\n  byteLength: number;\n};\n\ntype URLSearchParamsSafe = {\n  toString(): string;\n};\n\n// no method on readablestream is safe to call\ntype ReadableStreamSafe = Record<string, never>;\n\ntype FormDataEntryValueSafe = string | BlobSafe | null;\n\ntype BodyInitSafe =\n  | string\n  | Blob\n  | ArrayBufferSafe\n  | FormDataSafe\n  | URLSearchParamsSafe\n  | ArrayBufferViewSafe\n  | null\n  | undefined;\n\ntype HeadersRequestSafe = {\n  entries(): IterableIterator<[string, string]>;\n  forEach(callbackfn: (value: string, key: string) => void): void;\n};\n\ntype HeadersResponseSafe = {\n  get(name: string): string | null;\n  forEach(callbackfn: (value: string, key: string) => void): void;\n};\n\ntype HeadersInitSafe = HeadersRequestSafe | Record<string, string> | string[][];\n\ntype ResponseSafe = {\n  status: number;\n  headers: HeadersResponseSafe | undefined;\n};\n\nexport type RequestInitSafe = {\n  method?: string;\n  headers?: HeadersInitSafe;\n  body?: BodyInitSafe;\n};\nexport interface FormDataSafe {\n  entries(): IterableIterator<[string, FormDataEntryValueSafe]>;\n}\nexport type XMLHttpRequestBodyInitSafe = BlobSafe | FormDataSafe | URLSearchParamsSafe | string;\n\nexport type FetchRequestBody =\n  | string\n  | BlobSafe\n  | ArrayBufferSafe\n  | FormDataSafe\n  | URLSearchParamsSafe\n  | ArrayBufferViewSafe\n  | null\n  | undefined;\n\nexport interface IRequestWrapper {\n  headers?: Record<string, string>;\n  bodySize?: number;\n  method?: string;\n  body?: FetchRequestBody | XMLHttpRequestBodyInitSafe | null;\n}\n\nexport const MAXIMUM_ENTRIES = 100;\n\n/**\n * This class encapsulates the RequestInit (https://developer.mozilla.org/en-US/docs/Web/API/RequestInit)\n * object so that the consumer can only get access to the headers, method and body size.\n *\n * This is to prevent consumers from directly accessing the Request object\n * and mutating it or running costly operations on it.\n *\n * IMPORTANT:\n *    * Do not make changes to this class without careful consideration\n *      of performance implications, memory usage and potential to mutate the customer's\n *      request.\n *   * NEVER .clone() the RequestInit object. This will 2x's the memory overhead of the request\n *   * NEVER: call .arrayBuffer(), text(), json() or any other method on the body that\n *     consumes the body's stream. This will cause the response to be consumed\n *     meaning the body will be empty when the customer tries to access it.\n *     (ie: if the body is an instanceof https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n *      never call any of the methods on it)\n */\nexport class RequestWrapperFetch implements IRequestWrapper {\n  private _headers: Record<string, string> | undefined;\n  private _bodySize: number | undefined;\n  constructor(private request: RequestInitSafe) {}\n\n  get headers(): Record<string, string> | undefined {\n    if (this._headers) return this._headers;\n\n    const headersUnsafe = this.request.headers;\n    if (Array.isArray(headersUnsafe)) {\n      const headers = headersUnsafe;\n      this._headers = headers.reduce((acc, [key, value]) => {\n        acc[key] = value;\n        return acc;\n      }, {} as Record<string, string>);\n    } else if (headersUnsafe instanceof Headers) {\n      const headersSafe = headersUnsafe as HeadersRequestSafe;\n      const headersObj: Record<string, string> = {};\n      headersSafe.forEach((value, key) => {\n        headersObj[key] = value;\n      });\n      this._headers = headersObj;\n    } else if (typeof headersUnsafe === 'object') {\n      this._headers = headersUnsafe as Record<string, string>;\n    }\n\n    return this._headers;\n  }\n\n  get bodySize(): number | undefined {\n    if (typeof this._bodySize === 'number') return this._bodySize;\n    const global = getGlobalScope();\n\n    /* istanbul ignore if */\n    if (!global?.TextEncoder) {\n      return;\n    }\n    const body = this.request.body as FetchRequestBody;\n    this._bodySize = getBodySize(body, MAXIMUM_ENTRIES);\n    return this._bodySize;\n  }\n\n  get method(): string | undefined {\n    return this.request.method;\n  }\n}\n\nexport class RequestWrapperXhr implements IRequestWrapper {\n  constructor(readonly body: XMLHttpRequestBodyInitSafe | null) {}\n\n  get bodySize(): number | undefined {\n    return getBodySize(this.body as FetchRequestBody, MAXIMUM_ENTRIES);\n  }\n}\n\nfunction getBodySize(bodyUnsafe: FetchRequestBody, maxEntries: number): number | undefined {\n  let bodySize: number | undefined;\n  const global = getGlobalScope();\n  /* istanbul ignore next */\n  const TextEncoder = global?.TextEncoder;\n  /* istanbul ignore next */\n  if (!TextEncoder) {\n    return;\n  }\n  let bodySafe;\n  if (typeof bodyUnsafe === 'string') {\n    bodySafe = bodyUnsafe;\n    bodySize = new TextEncoder().encode(bodySafe).length;\n  } else if (bodyUnsafe instanceof Blob) {\n    bodySafe = bodyUnsafe as BlobSafe;\n    bodySize = bodySafe.size;\n  } else if (bodyUnsafe instanceof URLSearchParams) {\n    bodySafe = bodyUnsafe as URLSearchParamsSafe;\n    bodySize = new TextEncoder().encode(bodySafe.toString()).length;\n  } else if (ArrayBuffer.isView(bodyUnsafe)) {\n    bodySafe = bodyUnsafe as ArrayBufferViewSafe;\n    bodySize = bodySafe.byteLength;\n  } else if (bodyUnsafe instanceof ArrayBuffer) {\n    bodySafe = bodyUnsafe as ArrayBufferSafe;\n    bodySize = bodySafe.byteLength;\n  } else if (bodyUnsafe instanceof FormData) {\n    // Estimating only for text parts; not accurate for files\n    const formData = bodyUnsafe as unknown as FormDataSafe;\n\n    let total = 0;\n    let count = 0;\n    for (const [key, value] of formData.entries()) {\n      total += key.length;\n      if (typeof value === 'string') {\n        total += new TextEncoder().encode(value).length;\n      } else if (value instanceof Blob) {\n        total += value.size;\n      } else {\n        // encountered an unknown type\n        // we can't estimate the size of this entry\n        return;\n      }\n      // terminate if we reach the maximum number of entries\n      // to avoid performance issues in case of very large FormData\n      if (++count >= maxEntries) {\n        return;\n      }\n    }\n    bodySize = total;\n  } else if (bodyUnsafe instanceof ReadableStream) {\n    // If bodyUnsafe is an instanceof ReadableStream, we can't determine the size,\n    // without consuming it, so we return undefined.\n    // Never ever consume ReadableStream! DO NOT DO IT!!!\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    bodySafe = bodyUnsafe as unknown as ReadableStreamSafe;\n    return;\n  }\n  return bodySize;\n}\n\nexport interface IResponseWrapper {\n  headers?: Record<string, string>;\n  bodySize?: number;\n  status?: number;\n  body?: string | Blob | ReadableStream | ArrayBuffer | FormDataSafe | URLSearchParams | ArrayBufferView | null;\n}\n\n/**\n * This class encapsulates the Fetch API Response object\n * (https://developer.mozilla.org/en-US/docs/Web/API/Response) so that the consumer can\n * only get access to the headers and body size.\n *\n * This is to prevent consumers from directly accessing the Response object\n * and mutating it or running costly operations on it.\n *\n * IMPORTANT:\n *   * Do not make changes to this class without careful consideration\n *     of performance implications, memory usage and potential to mutate the customer's\n *     response.\n *   * NEVER .clone() the Response object. This will 2x's the memory overhead of the response\n *   * NEVER consume the body's stream. This will cause the response to be consumed\n *     meaning the body will be empty when the customer tries to access it.\n *     (ie: if the body is an instanceof https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream\n *      never call any of the methods on it)\n */\nexport class ResponseWrapperFetch implements IResponseWrapper {\n  private _headers: Record<string, string> | undefined;\n  private _bodySize: number | undefined;\n  constructor(private response: ResponseSafe) {}\n\n  get headers(): Record<string, string> | undefined {\n    if (this._headers) return this._headers;\n\n    if (this.response.headers instanceof Headers) {\n      const headersSafe = this.response.headers as HeadersResponseSafe;\n      const headersOut: Record<string, string> = {};\n      /* istanbul ignore next */\n      headersSafe?.forEach?.((value, key) => {\n        headersOut[key] = value;\n      });\n      this._headers = headersOut;\n      return headersOut;\n    }\n\n    return;\n  }\n\n  get bodySize(): number | undefined {\n    if (this._bodySize !== undefined) return this._bodySize;\n    /* istanbul ignore next */\n    const contentLength = this.response.headers?.get?.('content-length');\n    const bodySize = contentLength ? parseInt(contentLength, 10) : undefined;\n    this._bodySize = bodySize;\n    return bodySize;\n  }\n\n  get status(): number {\n    return this.response.status;\n  }\n}\n\nexport class ResponseWrapperXhr implements IResponseWrapper {\n  constructor(readonly statusCode: number, readonly headersString: string, readonly size: number | undefined) {}\n\n  get bodySize(): number | undefined {\n    return this.size;\n  }\n\n  get status(): number {\n    return this.statusCode;\n  }\n\n  get headers(): Record<string, string> | undefined {\n    if (!this.headersString) {\n      return;\n    }\n    const headers: Record<string, string> = {};\n    const headerLines = this.headersString.split('\\r\\n');\n    for (const line of headerLines) {\n      const [key, value] = line.split(': ');\n      if (key && value) {\n        headers[key] = value;\n      }\n    }\n    return headers;\n  }\n}\n\nexport class NetworkRequestEvent {\n  constructor(\n    public readonly type: 'xhr' | 'fetch',\n    public readonly method: string,\n    public readonly timestamp: number,\n    public readonly startTime: number,\n    public readonly url?: string,\n    public readonly requestWrapper?: IRequestWrapper,\n    public readonly status: number = 0,\n    public readonly duration?: number,\n    public readonly responseWrapper?: IResponseWrapper,\n    public readonly error?: {\n      name: string;\n      message: string;\n    },\n    public readonly endTime?: number,\n  ) {}\n\n  toSerializable(): Record<string, any> {\n    const serialized: Record<string, any> = {\n      type: this.type,\n      method: this.method,\n      url: this.url,\n      timestamp: this.timestamp,\n      status: this.status,\n      duration: this.duration,\n      error: this.error,\n      startTime: this.startTime,\n      endTime: this.endTime,\n      requestHeaders: this.requestWrapper?.headers,\n      requestBodySize: this.requestWrapper?.bodySize,\n      responseHeaders: this.responseWrapper?.headers,\n      responseBodySize: this.responseWrapper?.bodySize,\n    };\n\n    return Object.fromEntries(Object.entries(serialized).filter(([_, v]) => v !== undefined));\n  }\n}\n"]}